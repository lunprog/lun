
trait Display
    fun display(self, f: Formatter) -> result
end

struct Person
    name: string,
end

// NOT REALLY SURE
impl Display for Person
    fun display(self, f: Formatter) -> result
        // ...
    end
end

// here this function takes a variadic amount of arguments of type `obj<Display>`
fun print(..: obj(Display))
    // builin ..
end

// or maybe a print function like that.
fun print(fmt: string, ..: obj(Display))
    // builtin..
end

// and like that
fun println(fmt: string = "", ..: obj(Display))
    print(concat(fmt, "\n"), args())
    // here `args()` is to collect the variable number of arguments
end

// ALSO NOT SURE
// the `obj` type represents everything.
//
// you can ensure an object `obj` implements a specific Trait(s) like that:
// obj(Trait1, Trait2, Trait3) and lun will ensure at compile-time if possible or
// at runtime if the type implements all the necessary traits
//
// you can also ensure an object doesn't implement a specific Trait(s) like that:
// obj(not Trait1, Trait2, not Trait3) here the obj will never implement Trait1
// and Trait3 but will always implement Trait2

// exported values those that aren't marked as local, like functions, or variables:
// fun test() end
// a := 12.34
//
// can be accessed from another file like that:
//
// local my_api = require("the_file.lun")
// or without the local if you want to re-export.
//
// then you can make calls to the exported function
// my_api.hello_world()
//
// or access globals:
// my_api.my_global

fun test2()
    // for
    // 
    // iterate on the iterator here `"Hello":chars()`, until the iterator
    // returns `nil`
    for c in "Hello":chars() do
        print(c)
    then

    // while looop
    i := 0
    while i < len(list) do
        i += 1
        print(list[i])
    end

    list := [1, 2, 3]

    // if condition
    if list:len() == 3 then
        print("blabla")
    end

    // if else
    if cond then
        // ...
    else
        // ...
    end

    // if else-if else
    if -1 == -1 then
        // ...
    else if 2 > 0 then
        // ...
    else
        // ...
    end

    // if else-if
    if true then
        // ...
    else if not false then
        // ..
    end
end

// TYPES AND TRAITS
// are compile time values that can be exported:
//
// struct Test
//     field: int,
// end
//
// is equivalent to:
//
// Test :: struct
//     field: int
// end
//
// and
//
// trait Test
//     fun test()
// end
//
// is equivalent to:
//
// Test :: trait
//     fun test()
// end
//
// so you can write comptime functions that return a type like
//
// fun array(T: comptime type, N: int) -> comptime type
//     // built in
// end
//
// and so values of this type could look like `array(int, 12)`

// `nil` value and type,
//
// THE NIL TYPE
//
// it's the type of a function that doesn't return anything.
//
// THE NIL VALUE
//
// it's a value that can be used to initialize variables, fields but when used
// like in a call to a function or something else, it makes an error.


// A MACRO SYSTEM?
// => the `macro` keyword
//
// macro definition:
//
// my_macro :: macro {
//     // from here i don't really know
// }
//
// macro use:
// ident "!" "(" token_stream ")"
// ident "!" "[" token_stream "]"
// ident "!" "{" token_stream "}"

// LOOP LABELS

label: while my_condition do
    // ...
    break :label
    // ...
end

// in this simple example the label is useless but when you nest loops it
// starts to be useful:

x: for x := 0..10 do
    y: for y := 0..10 do
        // do something with x and y

        if some_logic() then
            // here we short cut the `y` for loop we directly continue the `x`
            // loop, it was not possible before and it also works with break.
            continue :x
        end

        // ...
    end
end

// DO-BLOCK break
label: do
    // ...
    break :do // here we short cut the execution to the end of the block it can
              // be useful, if you want to conditionally go after the block's
              // end
    // ...
end
// execution will resume here after the break
