{
    "desugaring/expression": (
        expected_compiler_out: r#"dsir = [
  GlobalDef {
    name: main @ 11..15 (fid = 0);
    mutable: false;
    typ: none;
    value: FunDefinition {
      args: [];
      rettype: none;
      body: [
        Binary {
          lhs: lazy _ @ 54..55 (fid = 0);
          op: Assignment;
          rhs: integer 12 @ 58..60 (fid = 0);
        } @ 54..60 (fid = 0) @ 54..60 (fid = 0),

        Binary {
          lhs: lazy _ @ 87..88 (fid = 0);
          op: Assignment;
          rhs: boolean true @ 91..95 (fid = 0);
        } @ 87..95 (fid = 0) @ 87..95 (fid = 0),

        Binary {
          lhs: lazy _ @ 101..102 (fid = 0);
          op: Assignment;
          rhs: boolean false @ 105..110 (fid = 0);
        } @ 101..110 (fid = 0) @ 101..110 (fid = 0),

        Binary {
          lhs: lazy _ @ 139..140 (fid = 0);
          op: Assignment;
          rhs: string "Hello world!" @ 143..157 (fid = 0);
        } @ 139..157 (fid = 0) @ 139..157 (fid = 0),

        Binary {
          lhs: lazy _ @ 184..185 (fid = 0);
          op: Assignment;
          rhs: character 'C' @ 188..191 (fid = 0);
        } @ 184..191 (fid = 0) @ 184..191 (fid = 0),

        Binary {
          lhs: lazy _ @ 219..220 (fid = 0);
          op: Assignment;
          rhs: float 602199999999999960000000 @ 223..231 (fid = 0);
        } @ 219..231 (fid = 0) @ 219..231 (fid = 0),

        Binary {
          lhs: lazy _ @ 287..288 (fid = 0);
          op: Assignment;
          rhs: Binary {
            lhs: integer 12 @ 292..294 (fid = 0);
            op: Add;
            rhs: integer 3 @ 297..298 (fid = 0);
          } @ 292..298 (fid = 0);
        } @ 287..299 (fid = 0) @ 287..299 (fid = 0),

        Binary {
          lhs: lazy _ @ 324..325 (fid = 0);
          op: Assignment;
          rhs: lazy main @ 328..332 (fid = 0);
        } @ 324..332 (fid = 0) @ 324..332 (fid = 0),

        Binary {
          lhs: lazy _ @ 356..357 (fid = 0);
          op: Assignment;
          rhs: Binary {
            lhs: integer 34 @ 360..362 (fid = 0);
            op: Add;
            rhs: integer 35 @ 365..367 (fid = 0);
          } @ 360..367 (fid = 0);
        } @ 356..367 (fid = 0) @ 356..367 (fid = 0),

        Binary {
          lhs: lazy _ @ 390..391 (fid = 0);
          op: Assignment;
          rhs: Unary {
            op: Not;
            expr: boolean false @ 395..400 (fid = 0);
          } @ 394..400 (fid = 0);
        } @ 390..400 (fid = 0) @ 390..400 (fid = 0),

        Binary {
          lhs: lazy _ @ 406..407 (fid = 0);
          op: Assignment;
          rhs: Unary {
            op: Negation;
            expr: float 12 @ 411..415 (fid = 0);
          } @ 410..415 (fid = 0);
        } @ 406..415 (fid = 0) @ 406..415 (fid = 0),

        Binary {
          lhs: lazy _ @ 438..439 (fid = 0);
          op: Assignment;
          rhs: FunCall {
            callee: lazy some_fun @ 442..450 (fid = 0);
            args: [];
          } @ 442..452 (fid = 0);
        } @ 438..452 (fid = 0) @ 438..452 (fid = 0),

        Binary {
          lhs: lazy _ @ 458..459 (fid = 0);
          op: Assignment;
          rhs: FunCall {
            callee: lazy some_fun @ 462..470 (fid = 0);
            args: [
              integer 1 @ 471..472 (fid = 0),
            ];
          } @ 462..473 (fid = 0);
        } @ 458..473 (fid = 0) @ 458..473 (fid = 0),

        Binary {
          lhs: lazy _ @ 479..480 (fid = 0);
          op: Assignment;
          rhs: FunCall {
            callee: lazy some_fun @ 483..491 (fid = 0);
            args: [
              integer 1 @ 492..493 (fid = 0),

              integer 2 @ 495..496 (fid = 0),
            ];
          } @ 483..497 (fid = 0);
        } @ 479..497 (fid = 0) @ 479..497 (fid = 0),

        Binary {
          lhs: lazy _ @ 503..504 (fid = 0);
          op: Assignment;
          rhs: FunCall {
            callee: lazy some_fun @ 507..515 (fid = 0);
            args: [
              integer 1 @ 516..517 (fid = 0),

              integer 2 @ 519..520 (fid = 0),
            ];
          } @ 507..522 (fid = 0);
        } @ 503..522 (fid = 0) @ 503..522 (fid = 0),

        If {
          cond: boolean true @ 542..546 (fid = 0);
          then_br: Block [
            FunCall {
              callee: lazy main @ 557..561 (fid = 0);
              args: [];
            } @ 557..563 (fid = 0) @ 557..563 (fid = 0),
          ] @ 547..570 (fid = 0) @ 539..599 (fid = 0);
          else_br: Block [
            FunCall {
              callee: lazy main @ 586..590 (fid = 0);
              args: [];
            } @ 586..592 (fid = 0) @ 586..592 (fid = 0),
          ] @ 576..599 (fid = 0) @ 576..599 (fid = 0);
        } @ 539..599 (fid = 0) @ 539..599 (fid = 0),

        Binary {
          lhs: lazy _ @ 625..626 (fid = 0);
          op: Assignment;
          rhs: If {
            cond: Binary {
              lhs: integer 23 @ 632..634 (fid = 0);
              op: CompGT;
              rhs: integer 12 @ 637..639 (fid = 0);
            } @ 632..639 (fid = 0);
            then_br: boolean false @ 645..650 (fid = 0);
            else_br: boolean true @ 656..660 (fid = 0);
          } @ 629..660 (fid = 0);
        } @ 625..660 (fid = 0) @ 625..660 (fid = 0),

        Block [
          Binary {
            lhs: lazy _ @ 690..691 (fid = 0);
            op: Assignment;
            rhs: integer 2 @ 694..695 (fid = 0);
          } @ 690..695 (fid = 0) @ 690..695 (fid = 0),

          Binary {
            lhs: lazy _ @ 705..706 (fid = 0);
            op: Assignment;
            rhs: FunCall {
              callee: lazy main @ 709..713 (fid = 0);
              args: [];
            } @ 709..715 (fid = 0);
          } @ 705..715 (fid = 0) @ 705..715 (fid = 0),
        ] @ 680..722 (fid = 0) @ 680..722 (fid = 0) @ 680..722 (fid = 0),

        Loop {
          body: [
            Break {
              val: none;
            } @ 780..785 (fid = 0) @ 780..785 (fid = 0),
          ] @ 754..792 (fid = 0);
        } @ 749..792 (fid = 0) @ 749..792 (fid = 0),

        Return {
          val: Binary {
            lhs: integer 12 @ 819..821 (fid = 0);
            op: Mul;
            rhs: integer 8 @ 824..825 (fid = 0);
          } @ 819..825 (fid = 0);
        } @ 812..825 (fid = 0) @ 812..825 (fid = 0),

        Return {
          val: none;
        } @ 831..837 (fid = 0) @ 831..837 (fid = 0),

        Continue @ 860..868 (fid = 0) @ 860..868 (fid = 0),

        Binary {
          lhs: lazy _ @ 887..888 (fid = 0);
          op: Assignment;
          rhs: Null @ 891..895 (fid = 0);
        } @ 887..895 (fid = 0) @ 887..895 (fid = 0),

        Binary {
          lhs: lazy _ @ 915..916 (fid = 0);
          op: Assignment;
          rhs: Unary {
            op: Dereference;
            expr: lazy some_pointer @ 919..931 (fid = 0);
          } @ 919..933 (fid = 0);
        } @ 915..933 (fid = 0) @ 915..933 (fid = 0),

        Binary {
          lhs: lazy _ @ 961..962 (fid = 0);
          op: Assignment;
          rhs: FunCall {
            callee: MemberAccess {
              expr: string "Hello" @ 965..972 (fid = 0);
              member: len;
            } @ 965..976 (fid = 0);
            args: [];
          } @ 965..978 (fid = 0);
        } @ 961..978 (fid = 0) @ 961..978 (fid = 0),

        Binary {
          lhs: lazy _ @ 985..986 (fid = 0);
          op: Assignment;
          rhs: FunCall {
            callee: MemberAccess {
              expr: MemberAccess {
                expr: Orb @ 989..992 (fid = 0);
                member: driver;
              } @ 989..999 (fid = 0);
              member: run;
            } @ 989..1003 (fid = 0);
            args: [];
          } @ 989..1005 (fid = 0);
        } @ 985..1005 (fid = 0) @ 985..1005 (fid = 0),

        Binary {
          lhs: lazy _ @ 1047..1048 (fid = 0);
          op: Assignment;
          rhs: PointerType {
            mutable: false;
            typ: lazy u32 @ 1052..1055 (fid = 0);
          } @ 1051..1055 (fid = 0);
        } @ 1047..1055 (fid = 0) @ 1047..1055 (fid = 0),

        Binary {
          lhs: lazy _ @ 1061..1062 (fid = 0);
          op: Assignment;
          rhs: PointerType {
            mutable: true;
            typ: lazy u32 @ 1070..1073 (fid = 0);
          } @ 1065..1073 (fid = 0);
        } @ 1061..1073 (fid = 0) @ 1061..1073 (fid = 0),

        Binary {
          lhs: lazy _ @ 1109..1110 (fid = 0);
          op: Assignment;
          rhs: FunPtrType {
            args: [];
            ret: none;
          } @ 1113..1119 (fid = 0);
        } @ 1109..1119 (fid = 0) @ 1109..1119 (fid = 0),

        Binary {
          lhs: lazy _ @ 1125..1126 (fid = 0);
          op: Assignment;
          rhs: FunPtrType {
            args: [
              lazy usz @ 1134..1137 (fid = 0),

              lazy bool @ 1139..1143 (fid = 0),
            ];
            ret: lazy usz @ 1148..1151 (fid = 0);
          } @ 1129..1151 (fid = 0);
        } @ 1125..1151 (fid = 0) @ 1125..1151 (fid = 0),

        Binary {
          lhs: lazy _ @ 1157..1158 (fid = 0);
          op: Assignment;
          rhs: FunPtrType {
            args: [
              lazy usz @ 1166..1169 (fid = 0),
            ];
            ret: lazy usz @ 1175..1178 (fid = 0);
          } @ 1161..1178 (fid = 0);
        } @ 1157..1178 (fid = 0) @ 1157..1178 (fid = 0),
      ] @ 25..1181 (fid = 0);
    } @ 19..1181 (fid = 0);
  } @ 11..1181 (fid = 0),
]"#,
        expected_test_out: "",
    ),
    "desugaring/global_def": (
        expected_compiler_out: r#"dsir = [
  GlobalDef {
    name: main @ 19..23 (fid = 0);
    mutable: false;
    typ: none;
    value: FunDefinition {
      args: [];
      rettype: none;
      body: [] @ 33..35 (fid = 0);
    } @ 27..35 (fid = 0);
  } @ 19..35 (fid = 0),

  GlobalDef {
    name: avogadro @ 36..44 (fid = 0);
    mutable: false;
    typ: lazy f64 @ 47..50 (fid = 0);
    value: float 602199999999999960000000 @ 53..61 (fid = 0);
  } @ 36..62 (fid = 0),

  GlobalDef {
    name: hello @ 78..83 (fid = 0);
    mutable: true;
    typ: PointerType {
      mutable: false;
      typ: lazy str @ 87..90 (fid = 0);
    } @ 86..90 (fid = 0);
    value: string "Hello" @ 93..100 (fid = 0);
  } @ 78..101 (fid = 0),

  GlobalDef {
    name: globFloat @ 102..111 (fid = 0);
    mutable: true;
    typ: none;
    value: float 12 @ 115..119 (fid = 0);
  } @ 102..120 (fid = 0),

  Module {
    name: nested @ 178..190 (fid = 0);
    module: [];
  },
]"#,
        expected_test_out: "",
    ),
    "desugaring/my_module": (
        expected_compiler_out: r#"dsir = [
  Module {
    name: global_def @ 61..77 (fid = 0);
    module: [
      GlobalDef {
        name: main @ 19..23 (fid = 1);
        mutable: false;
        typ: none;
        value: FunDefinition {
          args: [];
          rettype: none;
          body: [] @ 33..35 (fid = 1);
        } @ 27..35 (fid = 1);
      } @ 19..35 (fid = 1),

      GlobalDef {
        name: avogadro @ 36..44 (fid = 1);
        mutable: false;
        typ: lazy f64 @ 47..50 (fid = 1);
        value: float 602199999999999960000000 @ 53..61 (fid = 1);
      } @ 36..62 (fid = 1),

      GlobalDef {
        name: hello @ 78..83 (fid = 1);
        mutable: true;
        typ: PointerType {
          mutable: false;
          typ: lazy str @ 87..90 (fid = 1);
        } @ 86..90 (fid = 1);
        value: string "Hello" @ 93..100 (fid = 1);
      } @ 78..101 (fid = 1),

      GlobalDef {
        name: globFloat @ 102..111 (fid = 1);
        mutable: true;
        typ: none;
        value: float 12 @ 115..119 (fid = 1);
      } @ 102..120 (fid = 1),

      Module {
        name: nested @ 178..190 (fid = 1);
        module: [
          GlobalDef {
            name: add @ 65..68 (fid = 2);
            mutable: false;
            typ: none;
            value: FunDefinition {
              args: [
                Arg {
                  name: a @ 76..77 (fid = 2);
                  typ: lazy usz @ 79..82 (fid = 2);
                } @ 76..82 (fid = 2),

                Arg {
                  name: b @ 84..85 (fid = 2);
                  typ: lazy usz @ 87..90 (fid = 2);
                } @ 84..90 (fid = 2),
              ];
              rettype: lazy usz @ 95..98 (fid = 2);
              body: [
                Binary {
                  lhs: lazy a @ 105..106 (fid = 2);
                  op: Add;
                  rhs: lazy b @ 109..110 (fid = 2);
                } @ 105..110 (fid = 2),
              ] @ 99..112 (fid = 2);
            } @ 72..112 (fid = 2);
          } @ 65..112 (fid = 2),
        ];
      },
    ];
  },
]"#,
        expected_test_out: "",
    ),
    "desugaring/nested": (
        expected_compiler_out: "dsir = []",
        expected_test_out: "",
    ),
    "desugaring/predicate_loop": (
        expected_compiler_out: r#"dsir = [
  GlobalDef {
    name: main @ 52..56 (fid = 0);
    mutable: false;
    typ: none;
    value: FunDefinition {
      args: [];
      rettype: none;
      body: [
        Loop {
          body: [
            If {
              cond: Unary {
                op: Not;
                expr: Binary {
                  lhs: lazy i @ 78..79 (fid = 0);
                  op: CompLT;
                  rhs: integer 10 @ 82..84 (fid = 0);
                } @ 78..84 (fid = 0);
              } @ none;
              then_br: Break {
                val: none;
              } @ none;
              else_br: none;
            } @ none @ none,

            Block [
              FunCall {
                callee: lazy println @ 95..102 (fid = 0);
                args: [
                  string "i = {}" @ 103..111 (fid = 0),

                  lazy i @ 113..114 (fid = 0),
                ];
              } @ 95..115 (fid = 0) @ 95..115 (fid = 0),
            ] @ 85..122 (fid = 0) @ none @ none,
          ] @ none;
        } @ 72..122 (fid = 0),
      ] @ 66..124 (fid = 0);
    } @ 60..124 (fid = 0);
  } @ 52..124 (fid = 0),
]"#,
        expected_test_out: "",
    ),
    "lexer/char_literal": (
        expected_compiler_out: r#"tokenstream = {
  {
    tt: character 'C';
    loc: 0..3 (fid = 0);
    lexeme: `'C'`;
  },
  {
    tt: character '\0';
    loc: 4..8 (fid = 0);
    lexeme: `'\0'`;
  },
  {
    tt: character '\n';
    loc: 9..13 (fid = 0);
    lexeme: `'\n'`;
  },
  {
    tt: character '\u{c}';
    loc: 14..18 (fid = 0);
    lexeme: `'\f'`;
  },
  {
    tt: character '\t';
    loc: 19..23 (fid = 0);
    lexeme: `'\t'`;
  },
  {
    tt: character '\u{b}';
    loc: 24..28 (fid = 0);
    lexeme: `'\v'`;
  },
  {
    tt: character '\u{7}';
    loc: 29..33 (fid = 0);
    lexeme: `'\a'`;
  },
  {
    tt: character '\u{8}';
    loc: 34..38 (fid = 0);
    lexeme: `'\b'`;
  },
  {
    tt: character '\u{1b}';
    loc: 39..43 (fid = 0);
    lexeme: `'\e'`;
  },
  {
    tt: character '\\';
    loc: 44..48 (fid = 0);
    lexeme: `'\\'`;
  },
  {
    tt: character '@';
    loc: 49..55 (fid = 0);
    lexeme: `'\x40'`;
  },
  {
    tt: character 'ÿ';
    loc: 56..60 (fid = 0);
    lexeme: `'ÿ'`;
  },
  {
    tt: character '🌒';
    loc: 61..67 (fid = 0);
    lexeme: `'🌒'`;
  },
  {
    tt: character '🌒';
    loc: 68..79 (fid = 0);
    lexeme: `'\u{1F312}'`;
  },
  {
    tt: end of file;
    loc: 80..81 (fid = 0);
    lexeme: N/A;
  },
}
"#,
        expected_test_out: "",
    ),
    "lexer/float_literal": (
        expected_compiler_out: "tokenstream = {
  {
    tt: float 1012.3456;
    loc: 18..31 (fid = 0);
    lexeme: `1_012.345_600`;
  },
  {
    tt: float 6.0219999999999996e23;
    loc: 32..41 (fid = 0);
    lexeme: `6.022e+23`;
  },
  {
    tt: float 1.67e-27;
    loc: 42..50 (fid = 0);
    lexeme: `1.67e-27`;
  },
  {
    tt: float 0.0;
    loc: 51..53 (fid = 0);
    lexeme: `0.`;
  },
  {
    tt: float 1.2;
    loc: 54..67 (fid = 0);
    lexeme: `0001.2000e000`;
  },
  {
    tt: float 15.6;
    loc: 68..75 (fid = 0);
    lexeme: `1_5.6_0`;
  },
  {
    tt: float 0.25;
    loc: 91..97 (fid = 0);
    lexeme: `0x1p-2`;
  },
  {
    tt: float 2048.0;
    loc: 115..122 (fid = 0);
    lexeme: `0x2.p10`;
  },
  {
    tt: float 1.9375;
    loc: 141..149 (fid = 0);
    lexeme: `0x1.Fp+0`;
  },
  {
    tt: float 0.5;
    loc: 167..174 (fid = 0);
    lexeme: `0X.8p-0`;
  },
  {
    tt: float 0.1249847412109375;
    loc: 190..201 (fid = 0);
    lexeme: `0X_1FFFP-16`;
  },
  {
    tt: end of file;
    loc: 228..229 (fid = 0);
    lexeme: N/A;
  },
}
",
        expected_test_out: "",
    ),
    "lexer/integer_literals": (
        expected_compiler_out: "tokenstream = {
  {
    tt: integer '123456789';
    loc: 0..9 (fid = 0);
    lexeme: `123456789`;
  },
  {
    tt: integer '123456789';
    loc: 10..21 (fid = 0);
    lexeme: `123_456_789`;
  },
  {
    tt: integer '123';
    loc: 41..50 (fid = 0);
    lexeme: `0b1111011`;
  },
  {
    tt: integer '123';
    loc: 51..60 (fid = 0);
    lexeme: `0B1111011`;
  },
  {
    tt: integer '123';
    loc: 61..72 (fid = 0);
    lexeme: `0b0111_1011`;
  },
  {
    tt: integer '123';
    loc: 73..84 (fid = 0);
    lexeme: `0B0111_1011`;
  },
  {
    tt: integer '123';
    loc: 103..108 (fid = 0);
    lexeme: `0o173`;
  },
  {
    tt: integer '123';
    loc: 109..114 (fid = 0);
    lexeme: `0O173`;
  },
  {
    tt: integer '123';
    loc: 115..122 (fid = 0);
    lexeme: `0o01_73`;
  },
  {
    tt: integer '123';
    loc: 123..130 (fid = 0);
    lexeme: `0O01_73`;
  },
  {
    tt: integer '123';
    loc: 155..159 (fid = 0);
    lexeme: `0x7b`;
  },
  {
    tt: integer '123';
    loc: 160..164 (fid = 0);
    lexeme: `0X7b`;
  },
  {
    tt: integer '123';
    loc: 165..169 (fid = 0);
    lexeme: `0x7B`;
  },
  {
    tt: integer '123';
    loc: 170..174 (fid = 0);
    lexeme: `0X7B`;
  },
  {
    tt: integer '3735928559';
    loc: 175..186 (fid = 0);
    lexeme: `0xDEAD_BEEF`;
  },
  {
    tt: integer '3735928559';
    loc: 187..200 (fid = 0);
    lexeme: `0Xde_ad_be_ef`;
  },
  {
    tt: end of file;
    loc: 201..202 (fid = 0);
    lexeme: N/A;
  },
}
",
        expected_test_out: "",
    ),
    "lexer/kw_idents": (
        expected_compiler_out: "tokenstream = {
  {
    tt: keyword 'and';
    loc: 19..22 (fid = 0);
    lexeme: `and`;
  },
  {
    tt: keyword 'as';
    loc: 23..25 (fid = 0);
    lexeme: `as`;
  },
  {
    tt: keyword 'break';
    loc: 26..31 (fid = 0);
    lexeme: `break`;
  },
  {
    tt: keyword 'comptime';
    loc: 32..40 (fid = 0);
    lexeme: `comptime`;
  },
  {
    tt: keyword 'continue';
    loc: 41..49 (fid = 0);
    lexeme: `continue`;
  },
  {
    tt: keyword 'defer';
    loc: 50..55 (fid = 0);
    lexeme: `defer`;
  },
  {
    tt: keyword 'else';
    loc: 56..60 (fid = 0);
    lexeme: `else`;
  },
  {
    tt: keyword 'false';
    loc: 61..66 (fid = 0);
    lexeme: `false`;
  },
  {
    tt: keyword 'for';
    loc: 67..70 (fid = 0);
    lexeme: `for`;
  },
  {
    tt: keyword 'fun';
    loc: 71..74 (fid = 0);
    lexeme: `fun`;
  },
  {
    tt: keyword 'if';
    loc: 75..77 (fid = 0);
    lexeme: `if`;
  },
  {
    tt: keyword 'impl';
    loc: 78..82 (fid = 0);
    lexeme: `impl`;
  },
  {
    tt: keyword 'in';
    loc: 83..85 (fid = 0);
    lexeme: `in`;
  },
  {
    tt: keyword 'let';
    loc: 86..89 (fid = 0);
    lexeme: `let`;
  },
  {
    tt: keyword 'loop';
    loc: 90..94 (fid = 0);
    lexeme: `loop`;
  },
  {
    tt: keyword 'mut';
    loc: 95..98 (fid = 0);
    lexeme: `mut`;
  },
  {
    tt: keyword 'null';
    loc: 99..103 (fid = 0);
    lexeme: `null`;
  },
  {
    tt: keyword 'or';
    loc: 104..106 (fid = 0);
    lexeme: `or`;
  },
  {
    tt: keyword 'orb';
    loc: 107..110 (fid = 0);
    lexeme: `orb`;
  },
  {
    tt: keyword 'pub';
    loc: 111..114 (fid = 0);
    lexeme: `pub`;
  },
  {
    tt: keyword 'return';
    loc: 115..121 (fid = 0);
    lexeme: `return`;
  },
  {
    tt: keyword 'self';
    loc: 122..126 (fid = 0);
    lexeme: `self`;
  },
  {
    tt: keyword 'then';
    loc: 127..131 (fid = 0);
    lexeme: `then`;
  },
  {
    tt: keyword 'trait';
    loc: 132..137 (fid = 0);
    lexeme: `trait`;
  },
  {
    tt: keyword 'true';
    loc: 138..142 (fid = 0);
    lexeme: `true`;
  },
  {
    tt: keyword 'while';
    loc: 143..148 (fid = 0);
    lexeme: `while`;
  },
  {
    tt: ident 'foo';
    loc: 176..179 (fid = 0);
    lexeme: `foo`;
  },
  {
    tt: ident 'bar_baz';
    loc: 180..187 (fid = 0);
    lexeme: `bar_baz`;
  },
  {
    tt: ident 'FooBarBaz';
    loc: 188..197 (fid = 0);
    lexeme: `FooBarBaz`;
  },
  {
    tt: end of file;
    loc: 198..199 (fid = 0);
    lexeme: N/A;
  },
}
",
        expected_test_out: "",
    ),
    "lexer/punctuation": (
        expected_compiler_out: "tokenstream = {
  {
    tt: punctuation LParen;
    loc: 0..1 (fid = 0);
    lexeme: `(`;
  },
  {
    tt: punctuation RParen;
    loc: 2..3 (fid = 0);
    lexeme: `)`;
  },
  {
    tt: punctuation LBracket;
    loc: 4..5 (fid = 0);
    lexeme: `[`;
  },
  {
    tt: punctuation RBracket;
    loc: 6..7 (fid = 0);
    lexeme: `]`;
  },
  {
    tt: punctuation LBrace;
    loc: 8..9 (fid = 0);
    lexeme: `{`;
  },
  {
    tt: punctuation RBrace;
    loc: 10..11 (fid = 0);
    lexeme: `}`;
  },
  {
    tt: punctuation Plus;
    loc: 12..13 (fid = 0);
    lexeme: `+`;
  },
  {
    tt: punctuation Minus;
    loc: 14..15 (fid = 0);
    lexeme: `-`;
  },
  {
    tt: punctuation Star;
    loc: 16..17 (fid = 0);
    lexeme: `*`;
  },
  {
    tt: punctuation Slash;
    loc: 18..19 (fid = 0);
    lexeme: `/`;
  },
  {
    tt: punctuation Colon;
    loc: 20..21 (fid = 0);
    lexeme: `:`;
  },
  {
    tt: punctuation Comma;
    loc: 22..23 (fid = 0);
    lexeme: `,`;
  },
  {
    tt: punctuation Equal;
    loc: 24..25 (fid = 0);
    lexeme: `=`;
  },
  {
    tt: punctuation Equal2;
    loc: 26..28 (fid = 0);
    lexeme: `==`;
  },
  {
    tt: punctuation BangEqual;
    loc: 29..31 (fid = 0);
    lexeme: `!=`;
  },
  {
    tt: punctuation Bang;
    loc: 32..33 (fid = 0);
    lexeme: `!`;
  },
  {
    tt: punctuation LtEqual;
    loc: 34..36 (fid = 0);
    lexeme: `<=`;
  },
  {
    tt: punctuation Lt;
    loc: 37..38 (fid = 0);
    lexeme: `<`;
  },
  {
    tt: punctuation Lt2;
    loc: 39..41 (fid = 0);
    lexeme: `<<`;
  },
  {
    tt: punctuation Gt;
    loc: 42..43 (fid = 0);
    lexeme: `>`;
  },
  {
    tt: punctuation Gt2;
    loc: 44..46 (fid = 0);
    lexeme: `>>`;
  },
  {
    tt: punctuation GtEqual;
    loc: 47..49 (fid = 0);
    lexeme: `>=`;
  },
  {
    tt: punctuation Semicolon;
    loc: 50..51 (fid = 0);
    lexeme: `;`;
  },
  {
    tt: punctuation MinusGt;
    loc: 52..54 (fid = 0);
    lexeme: `->`;
  },
  {
    tt: punctuation Caret;
    loc: 55..56 (fid = 0);
    lexeme: `^`;
  },
  {
    tt: punctuation Ampsand;
    loc: 57..58 (fid = 0);
    lexeme: `&`;
  },
  {
    tt: punctuation Pipe;
    loc: 59..60 (fid = 0);
    lexeme: `|`;
  },
  {
    tt: punctuation Percent;
    loc: 61..62 (fid = 0);
    lexeme: `%`;
  },
  {
    tt: punctuation Dot;
    loc: 63..64 (fid = 0);
    lexeme: `.`;
  },
  {
    tt: punctuation DotStar;
    loc: 65..67 (fid = 0);
    lexeme: `.*`;
  },
  {
    tt: end of file;
    loc: 68..69 (fid = 0);
    lexeme: N/A;
  },
}
",
        expected_test_out: "",
    ),
    "lexer/specialized_literals": (
        expected_compiler_out: r#"tokenstream = {
  {
    tt: specialized char literal;
    s12n: "a7";
    lit: 'C'
    loc: 28..33 (fid = 0);
    lexeme: `a7'C'`;
  },
  {
    tt: specialized string literal;
    s12n: "c";
    lit: "Hello, world! This string is a null terminated string"
    loc: 65..121 (fid = 0);
    lexeme: `c"Hello, world! This string is a null terminated string"`;
  },
  {
    tt: specialized string literal;
    s12n: "r";
    lit: "no escapes \\n\\r"
    loc: 169..187 (fid = 0);
    lexeme: `r"no escapes \n\r"`;
  },
  {
    tt: specialized int literal;
    s12n: "usz";
    lit: 123456
    loc: 220..231 (fid = 0);
    lexeme: `123_456'usz`;
  },
  {
    tt: specialized float literal;
    s12n: "f64";
    lit: 12345678.9
    loc: 262..280 (fid = 0);
    lexeme: `123_456.789e+2'f64`;
  },
  {
    tt: specialized char literal;
    s12n: "fun";
    lit: '\0'
    loc: 353..360 (fid = 0);
    lexeme: `fun'\0'`;
  },
  {
    tt: specialized string literal;
    s12n: "orb";
    lit: "Hello"
    loc: 409..419 (fid = 0);
    lexeme: `orb"Hello"`;
  },
  {
    tt: specialized int literal;
    s12n: "let";
    lit: 343569
    loc: 435..446 (fid = 0);
    lexeme: `3435_69'let`;
  },
  {
    tt: specialized float literal;
    s12n: "comptime";
    lit: 6.9
    loc: 469..481 (fid = 0);
    lexeme: `6.9'comptime`;
  },
  {
    tt: end of file;
    loc: 482..483 (fid = 0);
    lexeme: N/A;
  },
}
"#,
        expected_test_out: "",
    ),
    "lexer/string_literal": (
        expected_compiler_out: r#"tokenstream = {
  {
    tt: string "Hello, world\n";
    loc: 0..16 (fid = 0);
    lexeme: `"Hello, world\n"`;
  },
  {
    tt: string "\0 \n \r \u{c} \t \u{b} \u{7} \u{8} \u{1b} \\ ÿ";
    loc: 17..53 (fid = 0);
    lexeme: `"\0 \n \r \f \t \v \a \b \e \\ \xFF"`;
  },
  {
    tt: string "'we can use simple quotes inside a string'";
    loc: 54..98 (fid = 0);
    lexeme: `"'we can use simple quotes inside a string'"`;
  },
  {
    tt: string "string support UTF-8: ÿ, 🌒 etc..";
    loc: 99..137 (fid = 0);
    lexeme: `"string support UTF-8: ÿ, 🌒 etc.."`;
  },
  {
    tt: string "and supports unicode escape; Lun: 🌒";
    loc: 138..183 (fid = 0);
    lexeme: `"and supports unicode escape; Lun: \u{1f312}"`;
  },
  {
    tt: end of file;
    loc: 184..185 (fid = 0);
    lexeme: N/A;
  },
}
"#,
        expected_test_out: "",
    ),
    "parser/directive": (
        expected_compiler_out: "ast = [
  Mod {
    name: module;
  } @ 20..32 (fid = 0),

  Use {
    path: orb.driver.run @ 56..70 (fid = 0);
    alias: none;
  } @ 51..71 (fid = 0),

  Use {
    path: std @ 77..80 (fid = 0);
    alias: none;
  } @ 72..81 (fid = 0),

  Use {
    path: std.rc.Rc @ 87..96 (fid = 0);
    alias: ReferenceCountedPtr;
  } @ 82..120 (fid = 0),
]",
        expected_test_out: "",
    ),
    "parser/expression": (
        expected_compiler_out: r#"ast = [
  GlobalConst {
    name: main @ 11..15 (fid = 0);
    typ: none;
    value: FunDefinition {
      args: [];
      rettype: none;
      body: [
        Binary {
          lhs: ident _ @ 54..55 (fid = 0);
          op: Assignment;
          rhs: integer 12 @ 58..60 (fid = 0);
        } @ 54..60 (fid = 0) @ 54..60 (fid = 0),

        Binary {
          lhs: ident _ @ 87..88 (fid = 0);
          op: Assignment;
          rhs: boolean true @ 91..95 (fid = 0);
        } @ 87..95 (fid = 0) @ 87..95 (fid = 0),

        Binary {
          lhs: ident _ @ 101..102 (fid = 0);
          op: Assignment;
          rhs: boolean false @ 105..110 (fid = 0);
        } @ 101..110 (fid = 0) @ 101..110 (fid = 0),

        Binary {
          lhs: ident _ @ 139..140 (fid = 0);
          op: Assignment;
          rhs: string "Hello world!" @ 143..157 (fid = 0);
        } @ 139..157 (fid = 0) @ 139..157 (fid = 0),

        Binary {
          lhs: ident _ @ 184..185 (fid = 0);
          op: Assignment;
          rhs: character 'C' @ 188..191 (fid = 0);
        } @ 184..191 (fid = 0) @ 184..191 (fid = 0),

        Binary {
          lhs: ident _ @ 219..220 (fid = 0);
          op: Assignment;
          rhs: float 602199999999999960000000 @ 223..231 (fid = 0);
        } @ 219..231 (fid = 0) @ 219..231 (fid = 0),

        Binary {
          lhs: ident _ @ 259..260 (fid = 0);
          op: Assignment;
          rhs: Grouping {
            expr: Binary {
              lhs: integer 12 @ 264..266 (fid = 0);
              op: Add;
              rhs: integer 3 @ 269..270 (fid = 0);
            } @ 264..270 (fid = 0);
          } @ 263..271 (fid = 0);
        } @ 259..271 (fid = 0) @ 259..271 (fid = 0),

        Binary {
          lhs: ident _ @ 296..297 (fid = 0);
          op: Assignment;
          rhs: ident main @ 300..304 (fid = 0);
        } @ 296..304 (fid = 0) @ 296..304 (fid = 0),

        Binary {
          lhs: ident _ @ 328..329 (fid = 0);
          op: Assignment;
          rhs: Binary {
            lhs: integer 34 @ 332..334 (fid = 0);
            op: Add;
            rhs: integer 35 @ 337..339 (fid = 0);
          } @ 332..339 (fid = 0);
        } @ 328..339 (fid = 0) @ 328..339 (fid = 0),

        Binary {
          lhs: ident _ @ 362..363 (fid = 0);
          op: Assignment;
          rhs: Unary {
            op: Not;
            expr: boolean false @ 367..372 (fid = 0);
          } @ 366..372 (fid = 0);
        } @ 362..372 (fid = 0) @ 362..372 (fid = 0),

        Binary {
          lhs: ident _ @ 378..379 (fid = 0);
          op: Assignment;
          rhs: Unary {
            op: Negation;
            expr: float 12 @ 383..387 (fid = 0);
          } @ 382..387 (fid = 0);
        } @ 378..387 (fid = 0) @ 378..387 (fid = 0),

        Binary {
          lhs: ident _ @ 410..411 (fid = 0);
          op: Assignment;
          rhs: FunCall {
            callee: ident some_fun @ 414..422 (fid = 0);
            args: [];
          } @ 414..424 (fid = 0);
        } @ 410..424 (fid = 0) @ 410..424 (fid = 0),

        Binary {
          lhs: ident _ @ 430..431 (fid = 0);
          op: Assignment;
          rhs: FunCall {
            callee: ident some_fun @ 434..442 (fid = 0);
            args: [
              integer 1 @ 443..444 (fid = 0),
            ];
          } @ 434..445 (fid = 0);
        } @ 430..445 (fid = 0) @ 430..445 (fid = 0),

        Binary {
          lhs: ident _ @ 451..452 (fid = 0);
          op: Assignment;
          rhs: FunCall {
            callee: ident some_fun @ 455..463 (fid = 0);
            args: [
              integer 1 @ 464..465 (fid = 0),

              integer 2 @ 467..468 (fid = 0),
            ];
          } @ 455..469 (fid = 0);
        } @ 451..469 (fid = 0) @ 451..469 (fid = 0),

        Binary {
          lhs: ident _ @ 475..476 (fid = 0);
          op: Assignment;
          rhs: FunCall {
            callee: ident some_fun @ 479..487 (fid = 0);
            args: [
              integer 1 @ 488..489 (fid = 0),

              integer 2 @ 491..492 (fid = 0),
            ];
          } @ 479..494 (fid = 0);
        } @ 475..494 (fid = 0) @ 475..494 (fid = 0),

        If {
          cond: boolean true @ 514..518 (fid = 0);
          body: [
            FunCall {
              callee: ident main @ 529..533 (fid = 0);
              args: [];
            } @ 529..535 (fid = 0) @ 529..535 (fid = 0),
          ] @ 519..542 (fid = 0);
          else_br: [
            FunCall {
              callee: ident main @ 558..562 (fid = 0);
              args: [];
            } @ 558..564 (fid = 0) @ 558..564 (fid = 0),
          ] @ 548..571 (fid = 0);
        } @ 511..571 (fid = 0) @ 511..571 (fid = 0) @ 511..571 (fid = 0),

        Binary {
          lhs: ident _ @ 597..598 (fid = 0);
          op: Assignment;
          rhs: IfThenElse {
            cond: Binary {
              lhs: integer 23 @ 604..606 (fid = 0);
              op: CompGT;
              rhs: integer 12 @ 609..611 (fid = 0);
            } @ 604..611 (fid = 0);
            true_val: boolean false @ 617..622 (fid = 0);
            false_val: boolean true @ 628..632 (fid = 0);
          } @ 601..632 (fid = 0);
        } @ 597..632 (fid = 0) @ 597..632 (fid = 0),

        Block [
          Binary {
            lhs: ident _ @ 662..663 (fid = 0);
            op: Assignment;
            rhs: integer 2 @ 666..667 (fid = 0);
          } @ 662..667 (fid = 0) @ 662..667 (fid = 0),

          Binary {
            lhs: ident _ @ 677..678 (fid = 0);
            op: Assignment;
            rhs: FunCall {
              callee: ident main @ 681..685 (fid = 0);
              args: [];
            } @ 681..687 (fid = 0);
          } @ 677..687 (fid = 0) @ 677..687 (fid = 0),
        ] @ 652..694 (fid = 0) @ 652..694 (fid = 0) @ 652..694 (fid = 0),

        PredicateLoop {
          cond: FunCall {
            callee: ident predicate @ 728..737 (fid = 0);
            args: [];
          } @ 728..739 (fid = 0);
          body: [
            FunCall {
              callee: ident println @ 750..757 (fid = 0);
              args: [
                string "Hello!" @ 758..766 (fid = 0),
              ];
            } @ 750..767 (fid = 0) @ 750..767 (fid = 0),
          ] @ 740..774 (fid = 0);
        } @ 722..774 (fid = 0) @ 722..774 (fid = 0),

        IteratorLoop {
          variable: i;
          iterator: FunCall {
            callee: ident range @ 810..815 (fid = 0);
            args: [
              integer 1 @ 816..817 (fid = 0),

              integer 12 @ 819..821 (fid = 0),
            ];
          } @ 810..822 (fid = 0);
          body: [] @ 823..846 (fid = 0);
        } @ 801..846 (fid = 0) @ 801..846 (fid = 0),

        InfiniteLoop {
          body: [
            Break {
              val: none;
            } @ 904..909 (fid = 0) @ 904..909 (fid = 0),
          ] @ 878..916 (fid = 0);
        } @ 873..916 (fid = 0) @ 873..916 (fid = 0),

        Return {
          val: Binary {
            lhs: integer 12 @ 943..945 (fid = 0);
            op: Mul;
            rhs: integer 8 @ 948..949 (fid = 0);
          } @ 943..949 (fid = 0);
        } @ 936..949 (fid = 0) @ 936..949 (fid = 0),

        Return {
          val: none;
        } @ 955..961 (fid = 0) @ 955..961 (fid = 0),

        Continue @ 984..992 (fid = 0) @ 984..992 (fid = 0),

        Binary {
          lhs: ident _ @ 1011..1012 (fid = 0);
          op: Assignment;
          rhs: Null @ 1015..1019 (fid = 0);
        } @ 1011..1019 (fid = 0) @ 1011..1019 (fid = 0),

        Binary {
          lhs: ident _ @ 1039..1040 (fid = 0);
          op: Assignment;
          rhs: Unary {
            op: Dereference;
            expr: ident some_pointer @ 1043..1055 (fid = 0);
          } @ 1043..1057 (fid = 0);
        } @ 1039..1057 (fid = 0) @ 1039..1057 (fid = 0),

        Binary {
          lhs: ident _ @ 1085..1086 (fid = 0);
          op: Assignment;
          rhs: FunCall {
            callee: MemberAccess {
              expr: string "Hello" @ 1089..1096 (fid = 0);
              member: len;
            } @ 1089..1100 (fid = 0);
            args: [];
          } @ 1089..1102 (fid = 0);
        } @ 1085..1102 (fid = 0) @ 1085..1102 (fid = 0),

        Binary {
          lhs: ident _ @ 1109..1110 (fid = 0);
          op: Assignment;
          rhs: FunCall {
            callee: MemberAccess {
              expr: MemberAccess {
                expr: Orb @ 1113..1116 (fid = 0);
                member: driver;
              } @ 1113..1123 (fid = 0);
              member: run;
            } @ 1113..1127 (fid = 0);
            args: [];
          } @ 1113..1129 (fid = 0);
        } @ 1109..1129 (fid = 0) @ 1109..1129 (fid = 0),

        Binary {
          lhs: ident _ @ 1171..1172 (fid = 0);
          op: Assignment;
          rhs: PointerType {
            mutable: false;
            typ: ident u32 @ 1176..1179 (fid = 0);
          } @ 1175..1179 (fid = 0);
        } @ 1171..1179 (fid = 0) @ 1171..1179 (fid = 0),

        Binary {
          lhs: ident _ @ 1185..1186 (fid = 0);
          op: Assignment;
          rhs: PointerType {
            mutable: true;
            typ: ident u32 @ 1194..1197 (fid = 0);
          } @ 1189..1197 (fid = 0);
        } @ 1185..1197 (fid = 0) @ 1185..1197 (fid = 0),

        Binary {
          lhs: ident _ @ 1233..1234 (fid = 0);
          op: Assignment;
          rhs: FunPtrType {
            args: [];
            ret: none;
          } @ 1237..1243 (fid = 0);
        } @ 1233..1243 (fid = 0) @ 1233..1243 (fid = 0),

        Binary {
          lhs: ident _ @ 1249..1250 (fid = 0);
          op: Assignment;
          rhs: FunPtrType {
            args: [
              ident usz @ 1258..1261 (fid = 0),

              ident bool @ 1263..1267 (fid = 0),
            ];
            ret: ident usz @ 1272..1275 (fid = 0);
          } @ 1253..1275 (fid = 0);
        } @ 1249..1275 (fid = 0) @ 1249..1275 (fid = 0),

        Binary {
          lhs: ident _ @ 1281..1282 (fid = 0);
          op: Assignment;
          rhs: FunPtrType {
            args: [
              ident usz @ 1290..1293 (fid = 0),
            ];
            ret: ident usz @ 1299..1302 (fid = 0);
          } @ 1285..1302 (fid = 0);
        } @ 1281..1302 (fid = 0) @ 1281..1302 (fid = 0),
      ] @ 25..1305 (fid = 0);
    } @ 19..1305 (fid = 0);
  } @ 11..1305 (fid = 0),
]"#,
        expected_test_out: "",
    ),
    "parser/item": (
        expected_compiler_out: r#"ast = [
  GlobalConst {
    name: main @ 19..23 (fid = 0);
    typ: none;
    value: FunDefinition {
      args: [];
      rettype: none;
      body: [] @ 33..35 (fid = 0);
    } @ 27..35 (fid = 0);
  } @ 19..35 (fid = 0),

  GlobalConst {
    name: avogadro @ 36..44 (fid = 0);
    typ: ident f64 @ 47..50 (fid = 0);
    value: float 602199999999999960000000 @ 53..61 (fid = 0);
  } @ 36..62 (fid = 0),

  GlobalVar {
    name: hello @ 78..83 (fid = 0);
    typ: PointerType {
      mutable: false;
      typ: ident str @ 87..90 (fid = 0);
    } @ 86..90 (fid = 0);
    value: string "Hello" @ 93..100 (fid = 0);
  } @ 78..101 (fid = 0),

  GlobalVar {
    name: globFloat @ 102..111 (fid = 0);
    typ: none;
    value: float 12 @ 115..119 (fid = 0);
  } @ 102..120 (fid = 0),
]"#,
        expected_test_out: "",
    ),
    "parser/statement": (
        expected_compiler_out: "ast = [
  GlobalConst {
    name: main @ 0..4 (fid = 0);
    typ: none;
    value: FunDefinition {
      args: [];
      rettype: none;
      body: [
        VariableDef {
          name: a @ 48..49 (fid = 0);
          mutable: false;
          typ: none;
          value: integer 12 @ 52..54 (fid = 0);
        } @ 44..54 (fid = 0),

        VariableDef {
          name: b @ 68..69 (fid = 0);
          mutable: true;
          typ: none;
          value: integer 34 @ 72..74 (fid = 0);
        } @ 60..74 (fid = 0),

        VariableDef {
          name: c @ 107..108 (fid = 0);
          mutable: false;
          typ: none;
          value: integer 56 @ 112..114 (fid = 0);
        } @ 107..114 (fid = 0),

        VariableDef {
          name: d @ 120..121 (fid = 0);
          mutable: true;
          typ: none;
          value: integer 78 @ 125..127 (fid = 0);
        } @ 120..127 (fid = 0),

        Defer {
          expr: Block [] @ 163..165 (fid = 0) @ 163..165 (fid = 0);
        } @ 157..165 (fid = 0),

        FunCall {
          callee: ident hello_world @ 199..210 (fid = 0);
          args: [];
        } @ 199..212 (fid = 0) @ 199..212 (fid = 0),
      ] @ 14..215 (fid = 0);
    } @ 8..215 (fid = 0);
  } @ 0..215 (fid = 0),
]",
        expected_test_out: "",
    ),
}
