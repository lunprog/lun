{
    "desugaring/forward_use": (
        expected_compiler_out: "dsir = [
  GlobalDef {
    name: main @ 79..83 (fid = 0);
    mutable: false;
    typexpr: none;
    value: FunDefinition {
      args: [];
      rettypexpr: none;
      body: Block [
        VariableDef {
          name: res @ 99..102 (fid = 0);
          mutable: false;
          typexpr: none;
          value: FunCall {
            callee: Symbol {
              kind: function;
              name: add @ 133..136 (fid = 0);
              which: 0;
              path: orb.add;
              typ: unknown;
              typeness: explicit;
              value: none;
            } @ 106..109 (fid = 0);
            args: [
              integer 1 @ 110..111 (fid = 0),

              integer 2 @ 113..114 (fid = 0),
            ];
          } @ 106..115 (fid = 0);
          sym: Symbol {
            kind: local;
            name: res @ 99..102 (fid = 0);
            which: 0;
            path: res;
            typ: unknown;
            typeness: implicit;
            value: none;
          };
        } @ 99..115 (fid = 0),

        Binary {
          lhs: Underscore @ 121..122 (fid = 0);
          op: Assignment;
          rhs: Symbol {
            kind: local;
            name: res @ 99..102 (fid = 0);
            which: 0;
            path: res;
            typ: unknown;
            typeness: implicit;
            value: none;
          } @ 125..128 (fid = 0);
        } @ 121..128 (fid = 0) @ 121..128 (fid = 0),

        @last_expr: none,
      ] @ 93..131 (fid = 0);
    } @ 87..131 (fid = 0);
    sym: Symbol {
      kind: function;
      name: main @ 79..83 (fid = 0);
      which: 0;
      path: orb.main;
      typ: unknown;
      typeness: explicit;
      value: none;
    };
  } @ 79..131 (fid = 0),

  GlobalDef {
    name: add @ 133..136 (fid = 0);
    mutable: false;
    typexpr: none;
    value: FunDefinition {
      args: [
        Arg {
          name: a @ 144..145 (fid = 0);
          typexpr: Symbol {
            kind: global;
            name: isz @ none;
            which: 0;
            path: ∅;
            typ: type;
            typeness: explicit;
            value: Type {
              type: isz;
            };
          } @ 147..150 (fid = 0);
          sym: Symbol {
            kind: argument;
            name: a @ 144..145 (fid = 0);
            which: 0;
            path: a;
            typ: unknown;
            typeness: explicit;
            value: none;
          };
        } @ 144..150 (fid = 0),

        Arg {
          name: b @ 152..153 (fid = 0);
          typexpr: Symbol {
            kind: global;
            name: isz @ none;
            which: 0;
            path: ∅;
            typ: type;
            typeness: explicit;
            value: Type {
              type: isz;
            };
          } @ 155..158 (fid = 0);
          sym: Symbol {
            kind: argument;
            name: b @ 152..153 (fid = 0);
            which: 0;
            path: b;
            typ: unknown;
            typeness: explicit;
            value: none;
          };
        } @ 152..158 (fid = 0),
      ];
      rettypexpr: Symbol {
        kind: global;
        name: isz @ none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: isz;
        };
      } @ 163..166 (fid = 0);
      body: Block [
        @last_expr: Binary {
          lhs: Symbol {
            kind: argument;
            name: a @ 144..145 (fid = 0);
            which: 0;
            path: a;
            typ: unknown;
            typeness: explicit;
            value: none;
          } @ 173..174 (fid = 0);
          op: Add;
          rhs: Symbol {
            kind: argument;
            name: b @ 152..153 (fid = 0);
            which: 0;
            path: b;
            typ: unknown;
            typeness: explicit;
            value: none;
          } @ 177..178 (fid = 0);
        } @ 173..178 (fid = 0),
      ] @ 167..180 (fid = 0);
    } @ 140..180 (fid = 0);
    sym: Symbol {
      kind: function;
      name: add @ 133..136 (fid = 0);
      which: 0;
      path: orb.add;
      typ: unknown;
      typeness: explicit;
      value: none;
    };
  } @ 133..180 (fid = 0),
]
",
        expected_test_out: "",
    ),
    "desugaring/global_def": (
        expected_compiler_out: r#"dsir = [
  GlobalDef {
    name: main @ 19..23 (fid = 0);
    mutable: false;
    typexpr: none;
    value: FunDefinition {
      args: [];
      rettypexpr: none;
      body: Block [
        @last_expr: none,
      ] @ 33..35 (fid = 0);
    } @ 27..35 (fid = 0);
    sym: Symbol {
      kind: function;
      name: main @ 19..23 (fid = 0);
      which: 0;
      path: orb.main;
      typ: unknown;
      typeness: explicit;
      value: none;
    };
  } @ 19..35 (fid = 0),

  GlobalDef {
    name: avogadro @ 36..44 (fid = 0);
    mutable: false;
    typexpr: Symbol {
      kind: global;
      name: f64 @ none;
      which: 0;
      path: ∅;
      typ: type;
      typeness: explicit;
      value: Type {
        type: f64;
      };
    } @ 47..50 (fid = 0);
    value: float 602199999999999960000000 @ 53..61 (fid = 0);
    sym: Symbol {
      kind: global;
      name: avogadro @ 36..44 (fid = 0);
      which: 0;
      path: orb.avogadro;
      typ: unknown;
      typeness: explicit;
      value: none;
    };
  } @ 36..62 (fid = 0),

  GlobalDef {
    name: hello @ 78..83 (fid = 0);
    mutable: true;
    typexpr: PointerType {
      mutable: false;
      typexpr: Symbol {
        kind: global;
        name: str @ none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: str;
        };
      } @ 87..90 (fid = 0);
    } @ 86..90 (fid = 0);
    value: string "Hello" @ 93..100 (fid = 0);
    sym: Symbol {
      kind: global;
      name: hello @ 78..83 (fid = 0);
      which: 0;
      path: orb.hello;
      typ: unknown;
      typeness: explicit;
      value: none;
    };
  } @ 78..101 (fid = 0),

  GlobalDef {
    name: globFloat @ 102..111 (fid = 0);
    mutable: true;
    typexpr: none;
    value: float 12 @ 115..119 (fid = 0);
    sym: Symbol {
      kind: global;
      name: globFloat @ 102..111 (fid = 0);
      which: 0;
      path: orb.globFloat;
      typ: unknown;
      typeness: implicit;
      value: none;
    };
  } @ 102..120 (fid = 0),

  Module {
    name: nested @ 179..191 (fid = 0);
    module: [];
    sym: Symbol {
      kind: module;
      name: nested @ 179..191 (fid = 0);
      which: 0;
      path: orb.nested;
      typ: unknown;
      typeness: explicit;
      value: none;
    };
  },
]
"#,
        expected_test_out: "",
    ),
    "desugaring/lower_expr": (
        expected_compiler_out: r#"dsir = [
  GlobalDef {
    name: main @ 11..15 (fid = 0);
    mutable: false;
    typexpr: none;
    value: FunDefinition {
      args: [];
      rettypexpr: none;
      body: Block [
        Binary {
          lhs: Underscore @ 54..55 (fid = 0);
          op: Assignment;
          rhs: integer 12 @ 58..60 (fid = 0);
        } @ 54..60 (fid = 0) @ 54..60 (fid = 0),

        Binary {
          lhs: Underscore @ 87..88 (fid = 0);
          op: Assignment;
          rhs: boolean true @ 91..95 (fid = 0);
        } @ 87..95 (fid = 0) @ 87..95 (fid = 0),

        Binary {
          lhs: Underscore @ 101..102 (fid = 0);
          op: Assignment;
          rhs: boolean false @ 105..110 (fid = 0);
        } @ 101..110 (fid = 0) @ 101..110 (fid = 0),

        Binary {
          lhs: Underscore @ 139..140 (fid = 0);
          op: Assignment;
          rhs: string "Hello world!" @ 143..157 (fid = 0);
        } @ 139..157 (fid = 0) @ 139..157 (fid = 0),

        Binary {
          lhs: Underscore @ 184..185 (fid = 0);
          op: Assignment;
          rhs: character 'C' @ 188..191 (fid = 0);
        } @ 184..191 (fid = 0) @ 184..191 (fid = 0),

        Binary {
          lhs: Underscore @ 219..220 (fid = 0);
          op: Assignment;
          rhs: float 602199999999999960000000 @ 223..231 (fid = 0);
        } @ 219..231 (fid = 0) @ 219..231 (fid = 0),

        Binary {
          lhs: Underscore @ 287..288 (fid = 0);
          op: Assignment;
          rhs: Binary {
            lhs: integer 12 @ 292..294 (fid = 0);
            op: Add;
            rhs: integer 3 @ 297..298 (fid = 0);
          } @ 292..298 (fid = 0);
        } @ 287..299 (fid = 0) @ 287..299 (fid = 0),

        Binary {
          lhs: Underscore @ 324..325 (fid = 0);
          op: Assignment;
          rhs: Symbol {
            kind: function;
            name: main @ 11..15 (fid = 0);
            which: 0;
            path: orb.main;
            typ: unknown;
            typeness: explicit;
            value: none;
          } @ 328..332 (fid = 0);
        } @ 324..332 (fid = 0) @ 324..332 (fid = 0),

        Binary {
          lhs: Underscore @ 356..357 (fid = 0);
          op: Assignment;
          rhs: Binary {
            lhs: integer 34 @ 360..362 (fid = 0);
            op: Add;
            rhs: integer 35 @ 365..367 (fid = 0);
          } @ 360..367 (fid = 0);
        } @ 356..367 (fid = 0) @ 356..367 (fid = 0),

        Binary {
          lhs: Underscore @ 390..391 (fid = 0);
          op: Assignment;
          rhs: Unary {
            op: Not;
            expr: boolean false @ 395..400 (fid = 0);
          } @ 394..400 (fid = 0);
        } @ 390..400 (fid = 0) @ 390..400 (fid = 0),

        Binary {
          lhs: Underscore @ 406..407 (fid = 0);
          op: Assignment;
          rhs: Unary {
            op: Negation;
            expr: float 12 @ 411..415 (fid = 0);
          } @ 410..415 (fid = 0);
        } @ 406..415 (fid = 0) @ 406..415 (fid = 0),

        Binary {
          lhs: Underscore @ 438..439 (fid = 0);
          op: Assignment;
          rhs: FunCall {
            callee: Symbol {
              kind: function;
              name: some_fun @ 1162..1170 (fid = 0);
              which: 0;
              path: orb.some_fun;
              typ: unknown;
              typeness: explicit;
              value: none;
            } @ 442..450 (fid = 0);
            args: [];
          } @ 442..452 (fid = 0);
        } @ 438..452 (fid = 0) @ 438..452 (fid = 0),

        Binary {
          lhs: Underscore @ 458..459 (fid = 0);
          op: Assignment;
          rhs: FunCall {
            callee: Symbol {
              kind: function;
              name: some_fun @ 1162..1170 (fid = 0);
              which: 0;
              path: orb.some_fun;
              typ: unknown;
              typeness: explicit;
              value: none;
            } @ 462..470 (fid = 0);
            args: [
              integer 1 @ 471..472 (fid = 0),
            ];
          } @ 462..473 (fid = 0);
        } @ 458..473 (fid = 0) @ 458..473 (fid = 0),

        Binary {
          lhs: Underscore @ 479..480 (fid = 0);
          op: Assignment;
          rhs: FunCall {
            callee: Symbol {
              kind: function;
              name: some_fun @ 1162..1170 (fid = 0);
              which: 0;
              path: orb.some_fun;
              typ: unknown;
              typeness: explicit;
              value: none;
            } @ 483..491 (fid = 0);
            args: [
              integer 1 @ 492..493 (fid = 0),

              integer 2 @ 495..496 (fid = 0),
            ];
          } @ 483..497 (fid = 0);
        } @ 479..497 (fid = 0) @ 479..497 (fid = 0),

        Binary {
          lhs: Underscore @ 503..504 (fid = 0);
          op: Assignment;
          rhs: FunCall {
            callee: Symbol {
              kind: function;
              name: some_fun @ 1162..1170 (fid = 0);
              which: 0;
              path: orb.some_fun;
              typ: unknown;
              typeness: explicit;
              value: none;
            } @ 507..515 (fid = 0);
            args: [
              integer 1 @ 516..517 (fid = 0),

              integer 2 @ 519..520 (fid = 0),
            ];
          } @ 507..522 (fid = 0);
        } @ 503..522 (fid = 0) @ 503..522 (fid = 0),

        If {
          cond: boolean true @ 542..546 (fid = 0);
          then_br: Block {
            label: none;
            block: Block [
              FunCall {
                callee: Symbol {
                  kind: function;
                  name: main @ 11..15 (fid = 0);
                  which: 0;
                  path: orb.main;
                  typ: unknown;
                  typeness: explicit;
                  value: none;
                } @ 557..561 (fid = 0);
                args: [];
              } @ 557..563 (fid = 0) @ 557..563 (fid = 0),

              @last_expr: none,
            ] @ 547..570 (fid = 0);
          } @ 539..599 (fid = 0);
          else_br: Block {
            label: none;
            block: Block [
              FunCall {
                callee: Symbol {
                  kind: function;
                  name: main @ 11..15 (fid = 0);
                  which: 0;
                  path: orb.main;
                  typ: unknown;
                  typeness: explicit;
                  value: none;
                } @ 586..590 (fid = 0);
                args: [];
              } @ 586..592 (fid = 0) @ 586..592 (fid = 0),

              @last_expr: none,
            ] @ 576..599 (fid = 0);
          } @ 576..599 (fid = 0);
        } @ 539..599 (fid = 0) @ 539..599 (fid = 0),

        Binary {
          lhs: Underscore @ 625..626 (fid = 0);
          op: Assignment;
          rhs: If {
            cond: Binary {
              lhs: integer 23 @ 632..634 (fid = 0);
              op: CompGT;
              rhs: integer 12 @ 637..639 (fid = 0);
            } @ 632..639 (fid = 0);
            then_br: boolean false @ 645..650 (fid = 0);
            else_br: boolean true @ 656..660 (fid = 0);
          } @ 629..660 (fid = 0);
        } @ 625..660 (fid = 0) @ 625..660 (fid = 0),

        Block {
          label: none;
          block: Block [
            Binary {
              lhs: Underscore @ 690..691 (fid = 0);
              op: Assignment;
              rhs: integer 2 @ 694..695 (fid = 0);
            } @ 690..695 (fid = 0) @ 690..695 (fid = 0),

            Binary {
              lhs: Underscore @ 705..706 (fid = 0);
              op: Assignment;
              rhs: FunCall {
                callee: Symbol {
                  kind: function;
                  name: main @ 11..15 (fid = 0);
                  which: 0;
                  path: orb.main;
                  typ: unknown;
                  typeness: explicit;
                  value: none;
                } @ 709..713 (fid = 0);
                args: [];
              } @ 709..715 (fid = 0);
            } @ 705..715 (fid = 0) @ 705..715 (fid = 0),

            @last_expr: none,
          ] @ 680..722 (fid = 0);
        } @ 680..722 (fid = 0) @ 680..722 (fid = 0),

        Loop {
          label: none;
          body: Block [
            Break {
              label: none;
              expr: none;
            } @ 780..785 (fid = 0) @ 780..785 (fid = 0),

            @last_expr: none,
          ] @ 754..792 (fid = 0);
        } @ 749..792 (fid = 0) @ 749..792 (fid = 0),

        Return {
          expr: Binary {
            lhs: integer 12 @ 819..821 (fid = 0);
            op: Mul;
            rhs: integer 8 @ 824..825 (fid = 0);
          } @ 819..825 (fid = 0);
        } @ 812..825 (fid = 0) @ 812..825 (fid = 0),

        Return {
          expr: none;
        } @ 831..837 (fid = 0) @ 831..837 (fid = 0),

        Continue @ 860..868 (fid = 0) @ 860..868 (fid = 0),

        Binary {
          lhs: Underscore @ 887..888 (fid = 0);
          op: Assignment;
          rhs: Null @ 891..895 (fid = 0);
        } @ 887..895 (fid = 0) @ 887..895 (fid = 0),

        Binary {
          lhs: Underscore @ 915..916 (fid = 0);
          op: Assignment;
          rhs: Unary {
            op: Dereference;
            expr: Symbol {
              kind: global;
              name: some_pointer @ 1183..1195 (fid = 0);
              which: 0;
              path: orb.some_pointer;
              typ: unknown;
              typeness: implicit;
              value: none;
            } @ 919..931 (fid = 0);
          } @ 919..933 (fid = 0);
        } @ 915..933 (fid = 0) @ 915..933 (fid = 0),

        Binary {
          lhs: Underscore @ 975..976 (fid = 0);
          op: Assignment;
          rhs: PointerType {
            mutable: false;
            typexpr: Symbol {
              kind: global;
              name: u32 @ none;
              which: 0;
              path: ∅;
              typ: type;
              typeness: explicit;
              value: Type {
                type: u32;
              };
            } @ 980..983 (fid = 0);
          } @ 979..983 (fid = 0);
        } @ 975..983 (fid = 0) @ 975..983 (fid = 0),

        Binary {
          lhs: Underscore @ 989..990 (fid = 0);
          op: Assignment;
          rhs: PointerType {
            mutable: true;
            typexpr: Symbol {
              kind: global;
              name: u32 @ none;
              which: 0;
              path: ∅;
              typ: type;
              typeness: explicit;
              value: Type {
                type: u32;
              };
            } @ 998..1001 (fid = 0);
          } @ 993..1001 (fid = 0);
        } @ 989..1001 (fid = 0) @ 989..1001 (fid = 0),

        Binary {
          lhs: Underscore @ 1037..1038 (fid = 0);
          op: Assignment;
          rhs: FunPtrType {
            args: [];
            ret: none;
          } @ 1041..1047 (fid = 0);
        } @ 1037..1047 (fid = 0) @ 1037..1047 (fid = 0),

        Binary {
          lhs: Underscore @ 1053..1054 (fid = 0);
          op: Assignment;
          rhs: FunPtrType {
            args: [
              Symbol {
                kind: global;
                name: usz @ none;
                which: 0;
                path: ∅;
                typ: type;
                typeness: explicit;
                value: Type {
                  type: usz;
                };
              } @ 1062..1065 (fid = 0),

              Symbol {
                kind: global;
                name: bool @ none;
                which: 0;
                path: ∅;
                typ: type;
                typeness: explicit;
                value: Type {
                  type: bool;
                };
              } @ 1067..1071 (fid = 0),
            ];
            ret: Symbol {
              kind: global;
              name: usz @ none;
              which: 0;
              path: ∅;
              typ: type;
              typeness: explicit;
              value: Type {
                type: usz;
              };
            } @ 1076..1079 (fid = 0);
          } @ 1057..1079 (fid = 0);
        } @ 1053..1079 (fid = 0) @ 1053..1079 (fid = 0),

        Binary {
          lhs: Underscore @ 1085..1086 (fid = 0);
          op: Assignment;
          rhs: FunPtrType {
            args: [
              Symbol {
                kind: global;
                name: usz @ none;
                which: 0;
                path: ∅;
                typ: type;
                typeness: explicit;
                value: Type {
                  type: usz;
                };
              } @ 1094..1097 (fid = 0),
            ];
            ret: Symbol {
              kind: global;
              name: usz @ none;
              which: 0;
              path: ∅;
              typ: type;
              typeness: explicit;
              value: Type {
                type: usz;
              };
            } @ 1103..1106 (fid = 0);
          } @ 1089..1106 (fid = 0);
        } @ 1085..1106 (fid = 0) @ 1085..1106 (fid = 0),

        @last_expr: none,
      ] @ 25..1109 (fid = 0);
    } @ 19..1109 (fid = 0);
    sym: Symbol {
      kind: function;
      name: main @ 11..15 (fid = 0);
      which: 0;
      path: orb.main;
      typ: unknown;
      typeness: explicit;
      value: none;
    };
  } @ 11..1109 (fid = 0),

  GlobalDef {
    name: some_fun @ 1162..1170 (fid = 0);
    mutable: false;
    typexpr: none;
    value: FunDefinition {
      args: [];
      rettypexpr: none;
      body: Block [
        @last_expr: none,
      ] @ 1180..1182 (fid = 0);
    } @ 1174..1182 (fid = 0);
    sym: Symbol {
      kind: function;
      name: some_fun @ 1162..1170 (fid = 0);
      which: 0;
      path: orb.some_fun;
      typ: unknown;
      typeness: explicit;
      value: none;
    };
  } @ 1162..1182 (fid = 0),

  GlobalDef {
    name: some_pointer @ 1183..1195 (fid = 0);
    mutable: false;
    typexpr: none;
    value: AddressOf {
      mutable: false;
      expr: integer 12 @ 1200..1202 (fid = 0);
    } @ 1199..1202 (fid = 0);
    sym: Symbol {
      kind: global;
      name: some_pointer @ 1183..1195 (fid = 0);
      which: 0;
      path: orb.some_pointer;
      typ: unknown;
      typeness: implicit;
      value: none;
    };
  } @ 1183..1203 (fid = 0),
]
"#,
        expected_test_out: "",
    ),
    "desugaring/my_module": (
        expected_compiler_out: r#"dsir = [
  Module {
    name: global_def @ 61..77 (fid = 0);
    module: [
      GlobalDef {
        name: main @ 19..23 (fid = 1);
        mutable: false;
        typexpr: none;
        value: FunDefinition {
          args: [];
          rettypexpr: none;
          body: Block [
            @last_expr: none,
          ] @ 33..35 (fid = 1);
        } @ 27..35 (fid = 1);
        sym: Symbol {
          kind: function;
          name: main @ 19..23 (fid = 1);
          which: 0;
          path: orb.global_def.main;
          typ: unknown;
          typeness: explicit;
          value: none;
        };
      } @ 19..35 (fid = 1),

      GlobalDef {
        name: avogadro @ 36..44 (fid = 1);
        mutable: false;
        typexpr: Symbol {
          kind: global;
          name: f64 @ none;
          which: 0;
          path: ∅;
          typ: type;
          typeness: explicit;
          value: Type {
            type: f64;
          };
        } @ 47..50 (fid = 1);
        value: float 602199999999999960000000 @ 53..61 (fid = 1);
        sym: Symbol {
          kind: global;
          name: avogadro @ 36..44 (fid = 1);
          which: 0;
          path: orb.global_def.avogadro;
          typ: unknown;
          typeness: explicit;
          value: none;
        };
      } @ 36..62 (fid = 1),

      GlobalDef {
        name: hello @ 78..83 (fid = 1);
        mutable: true;
        typexpr: PointerType {
          mutable: false;
          typexpr: Symbol {
            kind: global;
            name: str @ none;
            which: 0;
            path: ∅;
            typ: type;
            typeness: explicit;
            value: Type {
              type: str;
            };
          } @ 87..90 (fid = 1);
        } @ 86..90 (fid = 1);
        value: string "Hello" @ 93..100 (fid = 1);
        sym: Symbol {
          kind: global;
          name: hello @ 78..83 (fid = 1);
          which: 0;
          path: orb.global_def.hello;
          typ: unknown;
          typeness: explicit;
          value: none;
        };
      } @ 78..101 (fid = 1),

      GlobalDef {
        name: globFloat @ 102..111 (fid = 1);
        mutable: true;
        typexpr: none;
        value: float 12 @ 115..119 (fid = 1);
        sym: Symbol {
          kind: global;
          name: globFloat @ 102..111 (fid = 1);
          which: 0;
          path: orb.global_def.globFloat;
          typ: unknown;
          typeness: implicit;
          value: none;
        };
      } @ 102..120 (fid = 1),

      Module {
        name: nested @ 179..191 (fid = 1);
        module: [
          GlobalDef {
            name: add @ 65..68 (fid = 2);
            mutable: false;
            typexpr: none;
            value: FunDefinition {
              args: [
                Arg {
                  name: a @ 76..77 (fid = 2);
                  typexpr: Symbol {
                    kind: global;
                    name: usz @ none;
                    which: 0;
                    path: ∅;
                    typ: type;
                    typeness: explicit;
                    value: Type {
                      type: usz;
                    };
                  } @ 79..82 (fid = 2);
                  sym: Symbol {
                    kind: argument;
                    name: a @ 76..77 (fid = 2);
                    which: 0;
                    path: a;
                    typ: unknown;
                    typeness: explicit;
                    value: none;
                  };
                } @ 76..82 (fid = 2),

                Arg {
                  name: b @ 84..85 (fid = 2);
                  typexpr: Symbol {
                    kind: global;
                    name: usz @ none;
                    which: 0;
                    path: ∅;
                    typ: type;
                    typeness: explicit;
                    value: Type {
                      type: usz;
                    };
                  } @ 87..90 (fid = 2);
                  sym: Symbol {
                    kind: argument;
                    name: b @ 84..85 (fid = 2);
                    which: 0;
                    path: b;
                    typ: unknown;
                    typeness: explicit;
                    value: none;
                  };
                } @ 84..90 (fid = 2),
              ];
              rettypexpr: Symbol {
                kind: global;
                name: usz @ none;
                which: 0;
                path: ∅;
                typ: type;
                typeness: explicit;
                value: Type {
                  type: usz;
                };
              } @ 95..98 (fid = 2);
              body: Block [
                @last_expr: Binary {
                  lhs: Symbol {
                    kind: argument;
                    name: a @ 76..77 (fid = 2);
                    which: 0;
                    path: a;
                    typ: unknown;
                    typeness: explicit;
                    value: none;
                  } @ 105..106 (fid = 2);
                  op: Add;
                  rhs: Symbol {
                    kind: argument;
                    name: b @ 84..85 (fid = 2);
                    which: 0;
                    path: b;
                    typ: unknown;
                    typeness: explicit;
                    value: none;
                  } @ 109..110 (fid = 2);
                } @ 105..110 (fid = 2),
              ] @ 99..112 (fid = 2);
            } @ 72..112 (fid = 2);
            sym: Symbol {
              kind: function;
              name: add @ 65..68 (fid = 2);
              which: 0;
              path: orb.global_def.nested.add;
              typ: unknown;
              typeness: explicit;
              value: none;
            };
          } @ 65..112 (fid = 2),
        ];
        sym: Symbol {
          kind: module;
          name: nested @ 179..191 (fid = 1);
          which: 0;
          path: orb.global_def.nested;
          typ: unknown;
          typeness: explicit;
          value: none;
        };
      },
    ];
    sym: Symbol {
      kind: module;
      name: global_def @ 61..77 (fid = 0);
      which: 0;
      path: orb.global_def;
      typ: unknown;
      typeness: explicit;
      value: none;
    };
  },
]
"#,
        expected_test_out: "",
    ),
    "desugaring/nested": (
        expected_compiler_out: "dsir = []
",
        expected_test_out: "",
    ),
    "desugaring/predicate_loop": (
        expected_compiler_out: r#"dsir = [
  GlobalDef {
    name: println @ 138..145 (fid = 0);
    mutable: false;
    typexpr: none;
    value: FunDefinition {
      args: [];
      rettypexpr: none;
      body: Block [
        @last_expr: none,
      ] @ 155..157 (fid = 0);
    } @ 149..157 (fid = 0);
    sym: Symbol {
      kind: function;
      name: println @ 138..145 (fid = 0);
      which: 0;
      path: orb.println;
      typ: unknown;
      typeness: explicit;
      value: none;
    };
  } @ 138..157 (fid = 0),

  GlobalDef {
    name: main @ 159..163 (fid = 0);
    mutable: false;
    typexpr: none;
    value: FunDefinition {
      args: [];
      rettypexpr: none;
      body: Block [
        VariableDef {
          name: i @ 179..180 (fid = 0);
          mutable: true;
          typexpr: none;
          value: integer 0 @ 184..185 (fid = 0);
          sym: Symbol {
            kind: local;
            name: i @ 179..180 (fid = 0);
            which: 0;
            path: i;
            typ: unknown;
            typeness: implicit;
            value: none;
          };
        } @ 179..185 (fid = 0),

        Loop {
          label: none;
          body: Block [
            If {
              cond: Unary {
                op: Not;
                expr: Binary {
                  lhs: Symbol {
                    kind: local;
                    name: i @ 179..180 (fid = 0);
                    which: 0;
                    path: i;
                    typ: unknown;
                    typeness: implicit;
                    value: none;
                  } @ 198..199 (fid = 0);
                  op: CompLT;
                  rhs: integer 10 @ 202..204 (fid = 0);
                } @ 198..204 (fid = 0);
              } @ none;
              then_br: Break {
                label: none;
                expr: none;
              } @ none;
              else_br: none;
            } @ none @ none,

            @last_expr: Block {
              label: none;
              block: Block [
                FunCall {
                  callee: Symbol {
                    kind: function;
                    name: println @ 138..145 (fid = 0);
                    which: 0;
                    path: orb.println;
                    typ: unknown;
                    typeness: explicit;
                    value: none;
                  } @ 215..222 (fid = 0);
                  args: [
                    string "i = {}" @ 223..231 (fid = 0),

                    Symbol {
                      kind: local;
                      name: i @ 179..180 (fid = 0);
                      which: 0;
                      path: i;
                      typ: unknown;
                      typeness: implicit;
                      value: none;
                    } @ 233..234 (fid = 0),
                  ];
                } @ 215..235 (fid = 0) @ 215..235 (fid = 0),

                @last_expr: none,
              ] @ 205..242 (fid = 0);
            } @ none,
          ] @ 205..242 (fid = 0);
        } @ 192..242 (fid = 0) @ 192..242 (fid = 0),

        VariableDef {
          name: j @ 248..249 (fid = 0);
          mutable: true;
          typexpr: none;
          value: integer 3 @ 253..254 (fid = 0);
          sym: Symbol {
            kind: local;
            name: j @ 248..249 (fid = 0);
            which: 1;
            path: j;
            typ: unknown;
            typeness: implicit;
            value: none;
          };
        } @ 248..254 (fid = 0),

        @last_expr: Loop {
          label: label;
          body: Block [
            If {
              cond: Unary {
                op: Not;
                expr: Binary {
                  lhs: Binary {
                    lhs: Symbol {
                      kind: local;
                      name: j @ 248..249 (fid = 0);
                      which: 1;
                      path: j;
                      typ: unknown;
                      typeness: implicit;
                      value: none;
                    } @ 274..275 (fid = 0);
                    op: CompLT;
                    rhs: integer 10 @ 278..280 (fid = 0);
                  } @ 274..280 (fid = 0);
                  op: LogicalAnd;
                  rhs: Binary {
                    lhs: Symbol {
                      kind: local;
                      name: j @ 248..249 (fid = 0);
                      which: 1;
                      path: j;
                      typ: unknown;
                      typeness: implicit;
                      value: none;
                    } @ 285..286 (fid = 0);
                    op: CompGT;
                    rhs: integer 2 @ 289..290 (fid = 0);
                  } @ 285..290 (fid = 0);
                } @ 274..290 (fid = 0);
              } @ none;
              then_br: Break {
                label: none;
                expr: none;
              } @ none;
              else_br: none;
            } @ none @ none,

            @last_expr: Block {
              label: none;
              block: Block [
                FunCall {
                  callee: Symbol {
                    kind: function;
                    name: println @ 138..145 (fid = 0);
                    which: 0;
                    path: orb.println;
                    typ: unknown;
                    typeness: explicit;
                    value: none;
                  } @ 301..308 (fid = 0);
                  args: [
                    string "j = {}" @ 309..317 (fid = 0),

                    Symbol {
                      kind: local;
                      name: j @ 248..249 (fid = 0);
                      which: 1;
                      path: j;
                      typ: unknown;
                      typeness: implicit;
                      value: none;
                    } @ 319..320 (fid = 0),
                  ];
                } @ 301..321 (fid = 0) @ 301..321 (fid = 0),

                @last_expr: none,
              ] @ 291..328 (fid = 0);
            } @ none,
          ] @ 291..328 (fid = 0);
        } @ 261..328 (fid = 0),
      ] @ 173..330 (fid = 0);
    } @ 167..330 (fid = 0);
    sym: Symbol {
      kind: function;
      name: main @ 159..163 (fid = 0);
      which: 0;
      path: orb.main;
      typ: unknown;
      typeness: explicit;
      value: none;
    };
  } @ 159..330 (fid = 0),
]
"#,
        expected_test_out: "",
    ),
    "lexer/char_literal": (
        expected_compiler_out: r#"tokenstream = {
  {
    tt: character 'C';
    loc: 0..3 (fid = 0);
    lexeme: `'C'`;
  },
  {
    tt: character '\0';
    loc: 4..8 (fid = 0);
    lexeme: `'\0'`;
  },
  {
    tt: character '\n';
    loc: 9..13 (fid = 0);
    lexeme: `'\n'`;
  },
  {
    tt: character '\u{c}';
    loc: 14..18 (fid = 0);
    lexeme: `'\f'`;
  },
  {
    tt: character '\t';
    loc: 19..23 (fid = 0);
    lexeme: `'\t'`;
  },
  {
    tt: character '\u{b}';
    loc: 24..28 (fid = 0);
    lexeme: `'\v'`;
  },
  {
    tt: character '\u{7}';
    loc: 29..33 (fid = 0);
    lexeme: `'\a'`;
  },
  {
    tt: character '\u{8}';
    loc: 34..38 (fid = 0);
    lexeme: `'\b'`;
  },
  {
    tt: character '\u{1b}';
    loc: 39..43 (fid = 0);
    lexeme: `'\e'`;
  },
  {
    tt: character '\\';
    loc: 44..48 (fid = 0);
    lexeme: `'\\'`;
  },
  {
    tt: character '@';
    loc: 49..55 (fid = 0);
    lexeme: `'\x40'`;
  },
  {
    tt: character 'ÿ';
    loc: 56..60 (fid = 0);
    lexeme: `'ÿ'`;
  },
  {
    tt: character '🌒';
    loc: 61..67 (fid = 0);
    lexeme: `'🌒'`;
  },
  {
    tt: character '🌒';
    loc: 68..79 (fid = 0);
    lexeme: `'\u{1F312}'`;
  },
  {
    tt: end of file;
    loc: 80..81 (fid = 0);
    lexeme: N/A;
  },
}
"#,
        expected_test_out: "",
    ),
    "lexer/float_literal": (
        expected_compiler_out: "tokenstream = {
  {
    tt: float 1012.3456;
    loc: 18..31 (fid = 0);
    lexeme: `1_012.345_600`;
  },
  {
    tt: float 6.0219999999999996e23;
    loc: 32..41 (fid = 0);
    lexeme: `6.022e+23`;
  },
  {
    tt: float 1.67e-27;
    loc: 42..50 (fid = 0);
    lexeme: `1.67e-27`;
  },
  {
    tt: float 0.0;
    loc: 51..53 (fid = 0);
    lexeme: `0.`;
  },
  {
    tt: float 1.2;
    loc: 54..67 (fid = 0);
    lexeme: `0001.2000e000`;
  },
  {
    tt: float 15.6;
    loc: 68..75 (fid = 0);
    lexeme: `1_5.6_0`;
  },
  {
    tt: float 0.25;
    loc: 91..97 (fid = 0);
    lexeme: `0x1p-2`;
  },
  {
    tt: float 2048.0;
    loc: 115..122 (fid = 0);
    lexeme: `0x2.p10`;
  },
  {
    tt: float 1.9375;
    loc: 141..149 (fid = 0);
    lexeme: `0x1.Fp+0`;
  },
  {
    tt: float 0.5;
    loc: 167..174 (fid = 0);
    lexeme: `0X.8p-0`;
  },
  {
    tt: float 0.1249847412109375;
    loc: 190..201 (fid = 0);
    lexeme: `0X_1FFFP-16`;
  },
  {
    tt: end of file;
    loc: 228..229 (fid = 0);
    lexeme: N/A;
  },
}
",
        expected_test_out: "",
    ),
    "lexer/integer_literals": (
        expected_compiler_out: "tokenstream = {
  {
    tt: integer '123456789';
    loc: 0..9 (fid = 0);
    lexeme: `123456789`;
  },
  {
    tt: integer '123456789';
    loc: 10..21 (fid = 0);
    lexeme: `123_456_789`;
  },
  {
    tt: integer '123';
    loc: 41..50 (fid = 0);
    lexeme: `0b1111011`;
  },
  {
    tt: integer '123';
    loc: 51..60 (fid = 0);
    lexeme: `0B1111011`;
  },
  {
    tt: integer '123';
    loc: 61..72 (fid = 0);
    lexeme: `0b0111_1011`;
  },
  {
    tt: integer '123';
    loc: 73..84 (fid = 0);
    lexeme: `0B0111_1011`;
  },
  {
    tt: integer '123';
    loc: 103..108 (fid = 0);
    lexeme: `0o173`;
  },
  {
    tt: integer '123';
    loc: 109..114 (fid = 0);
    lexeme: `0O173`;
  },
  {
    tt: integer '123';
    loc: 115..122 (fid = 0);
    lexeme: `0o01_73`;
  },
  {
    tt: integer '123';
    loc: 123..130 (fid = 0);
    lexeme: `0O01_73`;
  },
  {
    tt: integer '123';
    loc: 155..159 (fid = 0);
    lexeme: `0x7b`;
  },
  {
    tt: integer '123';
    loc: 160..164 (fid = 0);
    lexeme: `0X7b`;
  },
  {
    tt: integer '123';
    loc: 165..169 (fid = 0);
    lexeme: `0x7B`;
  },
  {
    tt: integer '123';
    loc: 170..174 (fid = 0);
    lexeme: `0X7B`;
  },
  {
    tt: integer '3735928559';
    loc: 175..186 (fid = 0);
    lexeme: `0xDEAD_BEEF`;
  },
  {
    tt: integer '3735928559';
    loc: 187..200 (fid = 0);
    lexeme: `0Xde_ad_be_ef`;
  },
  {
    tt: end of file;
    loc: 201..202 (fid = 0);
    lexeme: N/A;
  },
}
",
        expected_test_out: "",
    ),
    "lexer/kw_idents": (
        expected_compiler_out: "tokenstream = {
  {
    tt: keyword 'and';
    loc: 19..22 (fid = 0);
    lexeme: `and`;
  },
  {
    tt: keyword 'as';
    loc: 23..25 (fid = 0);
    lexeme: `as`;
  },
  {
    tt: keyword 'break';
    loc: 26..31 (fid = 0);
    lexeme: `break`;
  },
  {
    tt: keyword 'comptime';
    loc: 32..40 (fid = 0);
    lexeme: `comptime`;
  },
  {
    tt: keyword 'continue';
    loc: 41..49 (fid = 0);
    lexeme: `continue`;
  },
  {
    tt: keyword 'defer';
    loc: 50..55 (fid = 0);
    lexeme: `defer`;
  },
  {
    tt: keyword 'else';
    loc: 56..60 (fid = 0);
    lexeme: `else`;
  },
  {
    tt: keyword 'false';
    loc: 61..66 (fid = 0);
    lexeme: `false`;
  },
  {
    tt: keyword 'for';
    loc: 67..70 (fid = 0);
    lexeme: `for`;
  },
  {
    tt: keyword 'fun';
    loc: 71..74 (fid = 0);
    lexeme: `fun`;
  },
  {
    tt: keyword 'if';
    loc: 75..77 (fid = 0);
    lexeme: `if`;
  },
  {
    tt: keyword 'impl';
    loc: 78..82 (fid = 0);
    lexeme: `impl`;
  },
  {
    tt: keyword 'in';
    loc: 83..85 (fid = 0);
    lexeme: `in`;
  },
  {
    tt: keyword 'let';
    loc: 86..89 (fid = 0);
    lexeme: `let`;
  },
  {
    tt: keyword 'loop';
    loc: 90..94 (fid = 0);
    lexeme: `loop`;
  },
  {
    tt: keyword 'mut';
    loc: 95..98 (fid = 0);
    lexeme: `mut`;
  },
  {
    tt: keyword 'null';
    loc: 99..103 (fid = 0);
    lexeme: `null`;
  },
  {
    tt: keyword 'or';
    loc: 104..106 (fid = 0);
    lexeme: `or`;
  },
  {
    tt: keyword 'orb';
    loc: 107..110 (fid = 0);
    lexeme: `orb`;
  },
  {
    tt: keyword 'pub';
    loc: 111..114 (fid = 0);
    lexeme: `pub`;
  },
  {
    tt: keyword 'return';
    loc: 115..121 (fid = 0);
    lexeme: `return`;
  },
  {
    tt: keyword 'self';
    loc: 122..126 (fid = 0);
    lexeme: `self`;
  },
  {
    tt: keyword 'then';
    loc: 127..131 (fid = 0);
    lexeme: `then`;
  },
  {
    tt: keyword 'trait';
    loc: 132..137 (fid = 0);
    lexeme: `trait`;
  },
  {
    tt: keyword 'true';
    loc: 138..142 (fid = 0);
    lexeme: `true`;
  },
  {
    tt: keyword 'while';
    loc: 143..148 (fid = 0);
    lexeme: `while`;
  },
  {
    tt: ident 'foo';
    loc: 176..179 (fid = 0);
    lexeme: `foo`;
  },
  {
    tt: ident 'bar_baz';
    loc: 180..187 (fid = 0);
    lexeme: `bar_baz`;
  },
  {
    tt: ident 'FooBarBaz';
    loc: 188..197 (fid = 0);
    lexeme: `FooBarBaz`;
  },
  {
    tt: end of file;
    loc: 198..199 (fid = 0);
    lexeme: N/A;
  },
}
",
        expected_test_out: "",
    ),
    "lexer/punctuation": (
        expected_compiler_out: "tokenstream = {
  {
    tt: punctuation LParen;
    loc: 0..1 (fid = 0);
    lexeme: `(`;
  },
  {
    tt: punctuation RParen;
    loc: 2..3 (fid = 0);
    lexeme: `)`;
  },
  {
    tt: punctuation LBracket;
    loc: 4..5 (fid = 0);
    lexeme: `[`;
  },
  {
    tt: punctuation RBracket;
    loc: 6..7 (fid = 0);
    lexeme: `]`;
  },
  {
    tt: punctuation LBrace;
    loc: 8..9 (fid = 0);
    lexeme: `{`;
  },
  {
    tt: punctuation RBrace;
    loc: 10..11 (fid = 0);
    lexeme: `}`;
  },
  {
    tt: punctuation Plus;
    loc: 12..13 (fid = 0);
    lexeme: `+`;
  },
  {
    tt: punctuation Minus;
    loc: 14..15 (fid = 0);
    lexeme: `-`;
  },
  {
    tt: punctuation Star;
    loc: 16..17 (fid = 0);
    lexeme: `*`;
  },
  {
    tt: punctuation Slash;
    loc: 18..19 (fid = 0);
    lexeme: `/`;
  },
  {
    tt: punctuation Colon;
    loc: 20..21 (fid = 0);
    lexeme: `:`;
  },
  {
    tt: punctuation Comma;
    loc: 22..23 (fid = 0);
    lexeme: `,`;
  },
  {
    tt: punctuation Equal;
    loc: 24..25 (fid = 0);
    lexeme: `=`;
  },
  {
    tt: punctuation Equal2;
    loc: 26..28 (fid = 0);
    lexeme: `==`;
  },
  {
    tt: punctuation BangEqual;
    loc: 29..31 (fid = 0);
    lexeme: `!=`;
  },
  {
    tt: punctuation Bang;
    loc: 32..33 (fid = 0);
    lexeme: `!`;
  },
  {
    tt: punctuation LtEqual;
    loc: 34..36 (fid = 0);
    lexeme: `<=`;
  },
  {
    tt: punctuation Lt;
    loc: 37..38 (fid = 0);
    lexeme: `<`;
  },
  {
    tt: punctuation Lt2;
    loc: 39..41 (fid = 0);
    lexeme: `<<`;
  },
  {
    tt: punctuation Gt;
    loc: 42..43 (fid = 0);
    lexeme: `>`;
  },
  {
    tt: punctuation Gt2;
    loc: 44..46 (fid = 0);
    lexeme: `>>`;
  },
  {
    tt: punctuation GtEqual;
    loc: 47..49 (fid = 0);
    lexeme: `>=`;
  },
  {
    tt: punctuation Semicolon;
    loc: 50..51 (fid = 0);
    lexeme: `;`;
  },
  {
    tt: punctuation MinusGt;
    loc: 52..54 (fid = 0);
    lexeme: `->`;
  },
  {
    tt: punctuation Caret;
    loc: 55..56 (fid = 0);
    lexeme: `^`;
  },
  {
    tt: punctuation Ampsand;
    loc: 57..58 (fid = 0);
    lexeme: `&`;
  },
  {
    tt: punctuation Pipe;
    loc: 59..60 (fid = 0);
    lexeme: `|`;
  },
  {
    tt: punctuation Percent;
    loc: 61..62 (fid = 0);
    lexeme: `%`;
  },
  {
    tt: punctuation Dot;
    loc: 63..64 (fid = 0);
    lexeme: `.`;
  },
  {
    tt: punctuation DotStar;
    loc: 65..67 (fid = 0);
    lexeme: `.*`;
  },
  {
    tt: end of file;
    loc: 68..69 (fid = 0);
    lexeme: N/A;
  },
}
",
        expected_test_out: "",
    ),
    "lexer/specialized_literals": (
        expected_compiler_out: r#"tokenstream = {
  {
    tt: specialized char literal;
    s12n: "a7";
    lit: 'C'
    loc: 28..33 (fid = 0);
    lexeme: `a7'C'`;
  },
  {
    tt: specialized string literal;
    s12n: "c";
    lit: "Hello, world! This string is a null terminated string"
    loc: 65..121 (fid = 0);
    lexeme: `c"Hello, world! This string is a null terminated string"`;
  },
  {
    tt: specialized string literal;
    s12n: "r";
    lit: "no escapes \\n\\r"
    loc: 169..187 (fid = 0);
    lexeme: `r"no escapes \n\r"`;
  },
  {
    tt: specialized int literal;
    s12n: "usz";
    lit: 123456
    loc: 220..231 (fid = 0);
    lexeme: `123_456'usz`;
  },
  {
    tt: specialized float literal;
    s12n: "f64";
    lit: 12345678.9
    loc: 262..280 (fid = 0);
    lexeme: `123_456.789e+2'f64`;
  },
  {
    tt: specialized char literal;
    s12n: "fun";
    lit: '\0'
    loc: 353..360 (fid = 0);
    lexeme: `fun'\0'`;
  },
  {
    tt: specialized string literal;
    s12n: "orb";
    lit: "Hello"
    loc: 409..419 (fid = 0);
    lexeme: `orb"Hello"`;
  },
  {
    tt: specialized int literal;
    s12n: "let";
    lit: 343569
    loc: 435..446 (fid = 0);
    lexeme: `3435_69'let`;
  },
  {
    tt: specialized float literal;
    s12n: "comptime";
    lit: 6.9
    loc: 469..481 (fid = 0);
    lexeme: `6.9'comptime`;
  },
  {
    tt: end of file;
    loc: 482..483 (fid = 0);
    lexeme: N/A;
  },
}
"#,
        expected_test_out: "",
    ),
    "lexer/string_literal": (
        expected_compiler_out: r#"tokenstream = {
  {
    tt: string "Hello, world\n";
    loc: 0..16 (fid = 0);
    lexeme: `"Hello, world\n"`;
  },
  {
    tt: string "\0 \n \r \u{c} \t \u{b} \u{7} \u{8} \u{1b} \\ ÿ";
    loc: 17..53 (fid = 0);
    lexeme: `"\0 \n \r \f \t \v \a \b \e \\ \xFF"`;
  },
  {
    tt: string "'we can use simple quotes inside a string'";
    loc: 54..98 (fid = 0);
    lexeme: `"'we can use simple quotes inside a string'"`;
  },
  {
    tt: string "string support UTF-8: ÿ, 🌒 etc..";
    loc: 99..137 (fid = 0);
    lexeme: `"string support UTF-8: ÿ, 🌒 etc.."`;
  },
  {
    tt: string "and supports unicode escape; Lun: 🌒";
    loc: 138..183 (fid = 0);
    lexeme: `"and supports unicode escape; Lun: \u{1f312}"`;
  },
  {
    tt: end of file;
    loc: 184..185 (fid = 0);
    lexeme: N/A;
  },
}
"#,
        expected_test_out: "",
    ),
    "multifile/lib": (
        expected_compiler_out: r#"scir = [
  Module {
    name: dbg;
    module: [
      Module {
        name: nested;
        module: [
          GlobalDef {
            name: fib @ 0..3 (fid = 2);
            mutable: false;
            typexpr: none;
            value: Expression {
              expr: FunDefinition {
                args: [
                  Arg {
                    name: n @ 11..12 (fid = 2);
                    typexpr: Expression {
                      expr: Symbol {
                        kind: global;
                        name: i32 @ none;
                        which: 0;
                        path: ∅;
                        typ: type;
                        typeness: explicit;
                        value: Type {
                          type: i32;
                        };
                      };
                      typ: type;
                    } @ 14..17 (fid = 2);
                    sym: Symbol {
                      kind: argument;
                      name: n @ 11..12 (fid = 2);
                      which: 0;
                      path: n;
                      typ: i32;
                      typeness: explicit;
                      value: none;
                    };
                  } @ 11..17 (fid = 2),
                ];
                rettypexpr: Expression {
                  expr: Symbol {
                    kind: global;
                    name: i32 @ none;
                    which: 0;
                    path: ∅;
                    typ: type;
                    typeness: explicit;
                    value: Type {
                      type: i32;
                    };
                  };
                  typ: type;
                } @ 22..25 (fid = 2);
                body: Block {
                  stmts: [];
                  last_expr: Expression {
                    expr: If {
                      cond: Expression {
                        expr: Binary {
                          lhs: Expression {
                            expr: Symbol {
                              kind: argument;
                              name: n @ 11..12 (fid = 2);
                              which: 0;
                              path: n;
                              typ: i32;
                              typeness: explicit;
                              value: none;
                            };
                            typ: i32;
                          } @ 35..36 (fid = 2);
                          op: CompLE;
                          rhs: Expression {
                            expr: integer 1;
                            typ: i32;
                          } @ 40..41 (fid = 2);
                        };
                        typ: bool;
                      } @ 35..41 (fid = 2);
                      then_br: Expression {
                        expr: Block {
                          label: none;
                          block: Block {
                            stmts: [];
                            last_expr: Expression {
                              expr: Symbol {
                                kind: argument;
                                name: n @ 11..12 (fid = 2);
                                which: 0;
                                path: n;
                                typ: i32;
                                typeness: explicit;
                                value: none;
                              };
                              typ: i32;
                            } @ 52..53 (fid = 2);
                            typ: i32;
                          } @ 42..59 (fid = 2);
                          index: 0;
                        };
                        typ: i32;
                      } @ 32..104 (fid = 2);
                      else_br: Expression {
                        expr: Block {
                          label: none;
                          block: Block {
                            stmts: [];
                            last_expr: Expression {
                              expr: Binary {
                                lhs: Expression {
                                  expr: FunCall {
                                    callee: Expression {
                                      expr: Symbol {
                                        kind: function;
                                        name: fib @ 0..3 (fid = 2);
                                        which: 0;
                                        path: orb.dbg.nested.fib;
                                        typ: *fun (i32) -> i32;
                                        typeness: explicit;
                                        value: none;
                                      };
                                      typ: *fun (i32) -> i32;
                                    } @ 75..78 (fid = 2);
                                    args: [
                                      Expression {
                                        expr: Binary {
                                          lhs: Expression {
                                            expr: Symbol {
                                              kind: argument;
                                              name: n @ 11..12 (fid = 2);
                                              which: 0;
                                              path: n;
                                              typ: i32;
                                              typeness: explicit;
                                              value: none;
                                            };
                                            typ: i32;
                                          } @ 79..80 (fid = 2);
                                          op: Sub;
                                          rhs: Expression {
                                            expr: integer 1;
                                            typ: i32;
                                          } @ 83..84 (fid = 2);
                                        };
                                        typ: i32;
                                      } @ 79..84 (fid = 2),
                                    ];
                                  };
                                  typ: i32;
                                } @ 75..85 (fid = 2);
                                op: Add;
                                rhs: Expression {
                                  expr: FunCall {
                                    callee: Expression {
                                      expr: Symbol {
                                        kind: function;
                                        name: fib @ 0..3 (fid = 2);
                                        which: 0;
                                        path: orb.dbg.nested.fib;
                                        typ: *fun (i32) -> i32;
                                        typeness: explicit;
                                        value: none;
                                      };
                                      typ: *fun (i32) -> i32;
                                    } @ 88..91 (fid = 2);
                                    args: [
                                      Expression {
                                        expr: Binary {
                                          lhs: Expression {
                                            expr: Symbol {
                                              kind: argument;
                                              name: n @ 11..12 (fid = 2);
                                              which: 0;
                                              path: n;
                                              typ: i32;
                                              typeness: explicit;
                                              value: none;
                                            };
                                            typ: i32;
                                          } @ 92..93 (fid = 2);
                                          op: Sub;
                                          rhs: Expression {
                                            expr: integer 2;
                                            typ: i32;
                                          } @ 96..97 (fid = 2);
                                        };
                                        typ: i32;
                                      } @ 92..97 (fid = 2),
                                    ];
                                  };
                                  typ: i32;
                                } @ 88..98 (fid = 2);
                              };
                              typ: i32;
                            } @ 75..98 (fid = 2);
                            typ: i32;
                          } @ 65..104 (fid = 2);
                          index: 1;
                        };
                        typ: i32;
                      } @ 65..104 (fid = 2);
                    };
                    typ: i32;
                  } @ 32..104 (fid = 2);
                  typ: i32;
                } @ 26..106 (fid = 2);
              };
              typ: *fun (i32) -> i32;
            } @ 7..106 (fid = 2);
            sym: Symbol {
              kind: function;
              name: fib @ 0..3 (fid = 2);
              which: 0;
              path: orb.dbg.nested.fib;
              typ: *fun (i32) -> i32;
              typeness: explicit;
              value: none;
            };
          } @ 0..106 (fid = 2),
        ];
        sym: Symbol {
          kind: module;
          name: nested @ 18..30 (fid = 1);
          which: 0;
          path: orb.dbg.nested;
          typ: unknown;
          typeness: explicit;
          value: none;
        };
      } @ 18..30 (fid = 1),

      GlobalDef {
        name: puts @ 55..59 (fid = 1);
        mutable: false;
        typexpr: none;
        value: Expression {
          expr: FunDefinition {
            args: [
              Arg {
                name: msg @ 67..70 (fid = 1);
                typexpr: Expression {
                  expr: PointerType {
                    mutable: false;
                    typexpr: Expression {
                      expr: Symbol {
                        kind: global;
                        name: str @ none;
                        which: 0;
                        path: ∅;
                        typ: type;
                        typeness: explicit;
                        value: Type {
                          type: str;
                        };
                      };
                      typ: type;
                    } @ 73..76 (fid = 1);
                  };
                  typ: type;
                } @ 72..76 (fid = 1);
                sym: Symbol {
                  kind: argument;
                  name: msg @ 67..70 (fid = 1);
                  which: 0;
                  path: msg;
                  typ: * str;
                  typeness: explicit;
                  value: none;
                };
              } @ 67..76 (fid = 1),
            ];
            rettypexpr: none;
            body: Block {
              stmts: [
                Expression {
                  expr: Binary {
                    lhs: Expression {
                      expr: Underscore;
                      typ: unknown;
                    } @ 84..85 (fid = 1);
                    op: Assignment;
                    rhs: Expression {
                      expr: Symbol {
                        kind: argument;
                        name: msg @ 67..70 (fid = 1);
                        which: 0;
                        path: msg;
                        typ: * str;
                        typeness: explicit;
                        value: none;
                      };
                      typ: * str;
                    } @ 88..91 (fid = 1);
                  };
                  typ: void;
                } @ 84..91 (fid = 1) @ 84..91 (fid = 1),
              ];
              last_expr: none;
              typ: void;
            } @ 78..122 (fid = 1);
          };
          typ: *fun (* str) -> void;
        } @ 63..122 (fid = 1);
        sym: Symbol {
          kind: function;
          name: puts @ 55..59 (fid = 1);
          which: 0;
          path: orb.dbg.puts;
          typ: *fun (* str) -> void;
          typeness: explicit;
          value: none;
        };
      } @ 55..122 (fid = 1),

      GlobalDef {
        name: some_other_thing @ 124..140 (fid = 1);
        mutable: false;
        typexpr: none;
        value: Expression {
          expr: FunDefinition {
            args: [];
            rettypexpr: none;
            body: Block {
              stmts: [
                VariableDef {
                  name: half @ 156..160 (fid = 1);
                  mutable: false;
                  typexpr: none;
                  value: Expression {
                    expr: FunCall {
                      callee: Expression {
                        expr: Symbol {
                          kind: function;
                          name: divide @ 160..166 (fid = 0);
                          which: 0;
                          path: orb.divide;
                          typ: *fun (f16, f16) -> f16;
                          typeness: explicit;
                          value: none;
                        };
                        typ: *fun (f16, f16) -> f16;
                      } @ 164..170 (fid = 1);
                      args: [
                        Expression {
                          expr: float 1;
                          typ: f16;
                        } @ 171..173 (fid = 1),

                        Expression {
                          expr: float 2;
                          typ: f16;
                        } @ 175..177 (fid = 1),
                      ];
                    };
                    typ: f16;
                  } @ 164..178 (fid = 1);
                  sym: Symbol {
                    kind: local;
                    name: half @ 156..160 (fid = 1);
                    which: 0;
                    path: half;
                    typ: f16;
                    typeness: implicit;
                    value: none;
                  };
                } @ 156..178 (fid = 1),
              ];
              last_expr: none;
              typ: void;
            } @ 150..181 (fid = 1);
          };
          typ: *fun () -> void;
        } @ 144..181 (fid = 1);
        sym: Symbol {
          kind: function;
          name: some_other_thing @ 124..140 (fid = 1);
          which: 0;
          path: orb.dbg.some_other_thing;
          typ: *fun () -> void;
          typeness: explicit;
          value: none;
        };
      } @ 124..181 (fid = 1),
    ];
    sym: Symbol {
      kind: module;
      name: dbg @ 24..33 (fid = 0);
      which: 0;
      path: orb.dbg;
      typ: unknown;
      typeness: explicit;
      value: none;
    };
  } @ 24..33 (fid = 0),

  GlobalDef {
    name: run @ 57..60 (fid = 0);
    mutable: false;
    typexpr: none;
    value: Expression {
      expr: FunDefinition {
        args: [];
        rettypexpr: none;
        body: Block {
          stmts: [
            Expression {
              expr: FunCall {
                callee: Expression {
                  expr: QualifiedPath {
                    path: orb.dbg.puts @ 77..89 (fid = 0);
                    sym: Symbol {
                      kind: function;
                      name: puts @ 55..59 (fid = 1);
                      which: 0;
                      path: orb.dbg.puts;
                      typ: *fun (* str) -> void;
                      typeness: explicit;
                      value: none;
                    };
                  };
                  typ: *fun (* str) -> void;
                } @ 77..89 (fid = 0);
                args: [
                  Expression {
                    expr: string "Hello world!";
                    typ: * str;
                  } @ 90..104 (fid = 0),
                ];
              };
              typ: void;
            } @ 77..105 (fid = 0) @ 77..105 (fid = 0),

            Expression {
              expr: FunCall {
                callee: Expression {
                  expr: QualifiedPath {
                    path: dbg.puts @ 111..119 (fid = 0);
                    sym: Symbol {
                      kind: function;
                      name: puts @ 55..59 (fid = 1);
                      which: 0;
                      path: orb.dbg.puts;
                      typ: *fun (* str) -> void;
                      typeness: explicit;
                      value: none;
                    };
                  };
                  typ: *fun (* str) -> void;
                } @ 111..119 (fid = 0);
                args: [
                  Expression {
                    expr: string "Hello world!";
                    typ: * str;
                  } @ 120..134 (fid = 0),
                ];
              };
              typ: void;
            } @ 111..135 (fid = 0) @ 111..135 (fid = 0),

            Expression {
              expr: FunCall {
                callee: Expression {
                  expr: QualifiedPath {
                    path: nested.fib @ 141..151 (fid = 0);
                    sym: Symbol {
                      kind: function;
                      name: fib @ 0..3 (fid = 2);
                      which: 0;
                      path: orb.dbg.nested.fib;
                      typ: *fun (i32) -> i32;
                      typeness: explicit;
                      value: none;
                    };
                  };
                  typ: *fun (i32) -> i32;
                } @ 141..151 (fid = 0);
                args: [
                  Expression {
                    expr: integer 12;
                    typ: i32;
                  } @ 152..154 (fid = 0),
                ];
              };
              typ: i32;
            } @ 141..155 (fid = 0) @ 141..155 (fid = 0),
          ];
          last_expr: none;
          typ: void;
        } @ 71..158 (fid = 0);
      };
      typ: *fun () -> void;
    } @ 64..158 (fid = 0);
    sym: Symbol {
      kind: function;
      name: run @ 57..60 (fid = 0);
      which: 0;
      path: orb.run;
      typ: *fun () -> void;
      typeness: explicit;
      value: none;
    };
  } @ 57..158 (fid = 0),

  GlobalDef {
    name: divide @ 160..166 (fid = 0);
    mutable: false;
    typexpr: none;
    value: Expression {
      expr: FunDefinition {
        args: [
          Arg {
            name: lhs @ 174..177 (fid = 0);
            typexpr: Expression {
              expr: Symbol {
                kind: global;
                name: f16 @ none;
                which: 0;
                path: ∅;
                typ: type;
                typeness: explicit;
                value: Type {
                  type: f16;
                };
              };
              typ: type;
            } @ 179..182 (fid = 0);
            sym: Symbol {
              kind: argument;
              name: lhs @ 174..177 (fid = 0);
              which: 0;
              path: lhs;
              typ: f16;
              typeness: explicit;
              value: none;
            };
          } @ 174..182 (fid = 0),

          Arg {
            name: rhs @ 184..187 (fid = 0);
            typexpr: Expression {
              expr: Symbol {
                kind: global;
                name: f16 @ none;
                which: 0;
                path: ∅;
                typ: type;
                typeness: explicit;
                value: Type {
                  type: f16;
                };
              };
              typ: type;
            } @ 189..192 (fid = 0);
            sym: Symbol {
              kind: argument;
              name: rhs @ 184..187 (fid = 0);
              which: 0;
              path: rhs;
              typ: f16;
              typeness: explicit;
              value: none;
            };
          } @ 184..192 (fid = 0),
        ];
        rettypexpr: Expression {
          expr: Symbol {
            kind: global;
            name: f16 @ none;
            which: 0;
            path: ∅;
            typ: type;
            typeness: explicit;
            value: Type {
              type: f16;
            };
          };
          typ: type;
        } @ 197..200 (fid = 0);
        body: Block {
          stmts: [];
          last_expr: Expression {
            expr: Binary {
              lhs: Expression {
                expr: Symbol {
                  kind: argument;
                  name: lhs @ 174..177 (fid = 0);
                  which: 0;
                  path: lhs;
                  typ: f16;
                  typeness: explicit;
                  value: none;
                };
                typ: f16;
              } @ 207..210 (fid = 0);
              op: Div;
              rhs: Expression {
                expr: Symbol {
                  kind: argument;
                  name: rhs @ 184..187 (fid = 0);
                  which: 0;
                  path: rhs;
                  typ: f16;
                  typeness: explicit;
                  value: none;
                };
                typ: f16;
              } @ 213..216 (fid = 0);
            };
            typ: f16;
          } @ 207..216 (fid = 0);
          typ: f16;
        } @ 201..218 (fid = 0);
      };
      typ: *fun (f16, f16) -> f16;
    } @ 170..218 (fid = 0);
    sym: Symbol {
      kind: function;
      name: divide @ 160..166 (fid = 0);
      which: 0;
      path: orb.divide;
      typ: *fun (f16, f16) -> f16;
      typeness: explicit;
      value: none;
    };
  } @ 160..218 (fid = 0),

  GlobalDef {
    name: MY_LIL_CONSTANT @ 220..235 (fid = 0);
    mutable: false;
    typexpr: none;
    value: Expression {
      expr: integer 1234;
      typ: i32;
    } @ 239..243 (fid = 0);
    sym: Symbol {
      kind: global;
      name: MY_LIL_CONSTANT @ 220..235 (fid = 0);
      which: 0;
      path: orb.MY_LIL_CONSTANT;
      typ: i32;
      typeness: implicit;
      value: I32 {
        val: 1234;
      };
    };
  } @ 220..244 (fid = 0),
]
"#,
        expected_test_out: "",
    ),
    "parser/directive": (
        expected_compiler_out: "ast = [
  Mod {
    name: module;
  } @ 20..32 (fid = 0),

  Use {
    path: orb.driver.run @ 56..70 (fid = 0);
    alias: none;
  } @ 51..71 (fid = 0),

  Use {
    path: std @ 77..80 (fid = 0);
    alias: none;
  } @ 72..81 (fid = 0),

  Use {
    path: std.rc.Rc @ 87..96 (fid = 0);
    alias: ReferenceCountedPtr;
  } @ 82..120 (fid = 0),
]
",
        expected_test_out: "",
    ),
    "parser/expression": (
        expected_compiler_out: r#"ast = [
  GlobalConst {
    name: main @ 11..15 (fid = 0);
    typexpr: none;
    value: FunDefinition {
      args: [];
      rettypexpr: none;
      body: Block [
        Binary {
          lhs: ident _ @ 54..55 (fid = 0);
          op: Assignment;
          rhs: integer 12 @ 58..60 (fid = 0);
        } @ 54..60 (fid = 0) @ 54..60 (fid = 0),

        Binary {
          lhs: ident _ @ 87..88 (fid = 0);
          op: Assignment;
          rhs: boolean true @ 91..95 (fid = 0);
        } @ 87..95 (fid = 0) @ 87..95 (fid = 0),

        Binary {
          lhs: ident _ @ 101..102 (fid = 0);
          op: Assignment;
          rhs: boolean false @ 105..110 (fid = 0);
        } @ 101..110 (fid = 0) @ 101..110 (fid = 0),

        Binary {
          lhs: ident _ @ 139..140 (fid = 0);
          op: Assignment;
          rhs: string "Hello world!" @ 143..157 (fid = 0);
        } @ 139..157 (fid = 0) @ 139..157 (fid = 0),

        Binary {
          lhs: ident _ @ 184..185 (fid = 0);
          op: Assignment;
          rhs: character 'C' @ 188..191 (fid = 0);
        } @ 184..191 (fid = 0) @ 184..191 (fid = 0),

        Binary {
          lhs: ident _ @ 219..220 (fid = 0);
          op: Assignment;
          rhs: float 602199999999999960000000 @ 223..231 (fid = 0);
        } @ 219..231 (fid = 0) @ 219..231 (fid = 0),

        Binary {
          lhs: ident _ @ 259..260 (fid = 0);
          op: Assignment;
          rhs: Grouping {
            expr: Binary {
              lhs: integer 12 @ 264..266 (fid = 0);
              op: Add;
              rhs: integer 3 @ 269..270 (fid = 0);
            } @ 264..270 (fid = 0);
          } @ 263..271 (fid = 0);
        } @ 259..271 (fid = 0) @ 259..271 (fid = 0),

        Binary {
          lhs: ident _ @ 296..297 (fid = 0);
          op: Assignment;
          rhs: ident main @ 300..304 (fid = 0);
        } @ 296..304 (fid = 0) @ 296..304 (fid = 0),

        Binary {
          lhs: ident _ @ 328..329 (fid = 0);
          op: Assignment;
          rhs: Binary {
            lhs: integer 34 @ 332..334 (fid = 0);
            op: Add;
            rhs: integer 35 @ 337..339 (fid = 0);
          } @ 332..339 (fid = 0);
        } @ 328..339 (fid = 0) @ 328..339 (fid = 0),

        Binary {
          lhs: ident _ @ 362..363 (fid = 0);
          op: Assignment;
          rhs: Unary {
            op: Not;
            expr: boolean false @ 367..372 (fid = 0);
          } @ 366..372 (fid = 0);
        } @ 362..372 (fid = 0) @ 362..372 (fid = 0),

        Binary {
          lhs: ident _ @ 378..379 (fid = 0);
          op: Assignment;
          rhs: Unary {
            op: Negation;
            expr: float 12 @ 383..387 (fid = 0);
          } @ 382..387 (fid = 0);
        } @ 378..387 (fid = 0) @ 378..387 (fid = 0),

        Binary {
          lhs: ident _ @ 410..411 (fid = 0);
          op: Assignment;
          rhs: FunCall {
            callee: ident some_fun @ 414..422 (fid = 0);
            args: [];
          } @ 414..424 (fid = 0);
        } @ 410..424 (fid = 0) @ 410..424 (fid = 0),

        Binary {
          lhs: ident _ @ 430..431 (fid = 0);
          op: Assignment;
          rhs: FunCall {
            callee: ident some_fun @ 434..442 (fid = 0);
            args: [
              integer 1 @ 443..444 (fid = 0),
            ];
          } @ 434..445 (fid = 0);
        } @ 430..445 (fid = 0) @ 430..445 (fid = 0),

        Binary {
          lhs: ident _ @ 451..452 (fid = 0);
          op: Assignment;
          rhs: FunCall {
            callee: ident some_fun @ 455..463 (fid = 0);
            args: [
              integer 1 @ 464..465 (fid = 0),

              integer 2 @ 467..468 (fid = 0),
            ];
          } @ 455..469 (fid = 0);
        } @ 451..469 (fid = 0) @ 451..469 (fid = 0),

        Binary {
          lhs: ident _ @ 475..476 (fid = 0);
          op: Assignment;
          rhs: FunCall {
            callee: ident some_fun @ 479..487 (fid = 0);
            args: [
              integer 1 @ 488..489 (fid = 0),

              integer 2 @ 491..492 (fid = 0),
            ];
          } @ 479..494 (fid = 0);
        } @ 475..494 (fid = 0) @ 475..494 (fid = 0),

        If {
          cond: boolean true @ 514..518 (fid = 0);
          body: Block [
            FunCall {
              callee: ident main @ 529..533 (fid = 0);
              args: [];
            } @ 529..535 (fid = 0) @ 529..535 (fid = 0),

            @last_expr: none,
          ] @ 519..542 (fid = 0);
          else_br: Block [
            FunCall {
              callee: ident main @ 558..562 (fid = 0);
              args: [];
            } @ 558..564 (fid = 0) @ 558..564 (fid = 0),

            @last_expr: none,
          ] @ 548..571 (fid = 0);
        } @ 511..571 (fid = 0) @ 511..571 (fid = 0) @ 511..571 (fid = 0),

        Binary {
          lhs: ident _ @ 597..598 (fid = 0);
          op: Assignment;
          rhs: IfThenElse {
            cond: Binary {
              lhs: integer 23 @ 604..606 (fid = 0);
              op: CompGT;
              rhs: integer 12 @ 609..611 (fid = 0);
            } @ 604..611 (fid = 0);
            true_val: boolean false @ 617..622 (fid = 0);
            false_val: boolean true @ 628..632 (fid = 0);
          } @ 601..632 (fid = 0);
        } @ 597..632 (fid = 0) @ 597..632 (fid = 0),

        Block Block [
          Binary {
            lhs: ident _ @ 662..663 (fid = 0);
            op: Assignment;
            rhs: integer 2 @ 666..667 (fid = 0);
          } @ 662..667 (fid = 0) @ 662..667 (fid = 0),

          Binary {
            lhs: ident _ @ 677..678 (fid = 0);
            op: Assignment;
            rhs: FunCall {
              callee: ident main @ 681..685 (fid = 0);
              args: [];
            } @ 681..687 (fid = 0);
          } @ 677..687 (fid = 0) @ 677..687 (fid = 0),

          @last_expr: none,
        ] @ 652..694 (fid = 0) @ 652..694 (fid = 0) @ 652..694 (fid = 0),

        BlockWithLabel {
          label: label_block;
          block: Block [
            Break {
              label: label_block;
              expr: none;
            } @ 723..741 (fid = 0) @ 723..741 (fid = 0),

            @last_expr: none,
          ] @ 713..748 (fid = 0);
        } @ 700..748 (fid = 0) @ 700..748 (fid = 0),

        PredicateLoop {
          label: none;
          cond: FunCall {
            callee: ident predicate @ 782..791 (fid = 0);
            args: [];
          } @ 782..793 (fid = 0);
          body: Block [
            FunCall {
              callee: ident println @ 804..811 (fid = 0);
              args: [
                string "Hello!" @ 812..820 (fid = 0),
              ];
            } @ 804..821 (fid = 0) @ 804..821 (fid = 0),

            @last_expr: none,
          ] @ 794..828 (fid = 0);
        } @ 776..828 (fid = 0) @ 776..828 (fid = 0),

        PredicateLoop {
          label: label;
          cond: ident condition @ 847..856 (fid = 0);
          body: Block [
            FunCall {
              callee: ident println @ 867..874 (fid = 0);
              args: [
                string "Hello from loop with label" @ 875..903 (fid = 0),
              ];
            } @ 867..904 (fid = 0) @ 867..904 (fid = 0),

            Continue {
              label: label;
            } @ 914..929 (fid = 0) @ 914..929 (fid = 0),

            @last_expr: none,
          ] @ 857..936 (fid = 0);
        } @ 834..936 (fid = 0) @ 834..936 (fid = 0),

        IteratorLoop {
          label: none;
          variable: i;
          iterator: FunCall {
            callee: ident range @ 972..977 (fid = 0);
            args: [
              integer 1 @ 978..979 (fid = 0),

              integer 12 @ 981..983 (fid = 0),
            ];
          } @ 972..984 (fid = 0);
          body: Block [
            @last_expr: none,
          ] @ 985..1008 (fid = 0);
        } @ 963..1008 (fid = 0) @ 963..1008 (fid = 0),

        IteratorLoop {
          label: label2;
          variable: j;
          iterator: FunCall {
            callee: ident range @ 1031..1036 (fid = 0);
            args: [
              integer 13 @ 1037..1039 (fid = 0),

              integer 16 @ 1041..1043 (fid = 0),
            ];
          } @ 1031..1044 (fid = 0);
          body: Block [
            @last_expr: none,
          ] @ 1045..1068 (fid = 0);
        } @ 1014..1068 (fid = 0) @ 1014..1068 (fid = 0),

        InfiniteLoop {
          label: none;
          body: Block [
            Break {
              label: none;
              expr: none;
            } @ 1126..1131 (fid = 0) @ 1126..1131 (fid = 0),

            @last_expr: none,
          ] @ 1100..1138 (fid = 0);
        } @ 1095..1138 (fid = 0) @ 1095..1138 (fid = 0),

        InfiniteLoop {
          label: label3;
          body: Block [
            @last_expr: none,
          ] @ 1157..1180 (fid = 0);
        } @ 1144..1180 (fid = 0) @ 1144..1180 (fid = 0),

        Return {
          expr: Binary {
            lhs: integer 12 @ 1207..1209 (fid = 0);
            op: Mul;
            rhs: integer 8 @ 1212..1213 (fid = 0);
          } @ 1207..1213 (fid = 0);
        } @ 1200..1213 (fid = 0) @ 1200..1213 (fid = 0),

        Return {
          expr: none;
        } @ 1219..1225 (fid = 0) @ 1219..1225 (fid = 0),

        Continue @ 1248..1256 (fid = 0) @ 1248..1256 (fid = 0),

        Binary {
          lhs: ident _ @ 1275..1276 (fid = 0);
          op: Assignment;
          rhs: Null @ 1279..1283 (fid = 0);
        } @ 1275..1283 (fid = 0) @ 1275..1283 (fid = 0),

        Binary {
          lhs: ident _ @ 1303..1304 (fid = 0);
          op: Assignment;
          rhs: Unary {
            op: Dereference;
            expr: ident some_pointer @ 1307..1319 (fid = 0);
          } @ 1307..1321 (fid = 0);
        } @ 1303..1321 (fid = 0) @ 1303..1321 (fid = 0),

        Binary {
          lhs: ident _ @ 1349..1350 (fid = 0);
          op: Assignment;
          rhs: FunCall {
            callee: MemberAccess {
              expr: string "Hello" @ 1353..1360 (fid = 0);
              member: len;
            } @ 1353..1364 (fid = 0);
            args: [];
          } @ 1353..1366 (fid = 0);
        } @ 1349..1366 (fid = 0) @ 1349..1366 (fid = 0),

        Binary {
          lhs: ident _ @ 1373..1374 (fid = 0);
          op: Assignment;
          rhs: FunCall {
            callee: MemberAccess {
              expr: MemberAccess {
                expr: Orb @ 1377..1380 (fid = 0);
                member: driver;
              } @ 1377..1387 (fid = 0);
              member: run;
            } @ 1377..1391 (fid = 0);
            args: [];
          } @ 1377..1393 (fid = 0);
        } @ 1373..1393 (fid = 0) @ 1373..1393 (fid = 0),

        Binary {
          lhs: ident _ @ 1435..1436 (fid = 0);
          op: Assignment;
          rhs: PointerType {
            mutable: false;
            typexpr: ident u32 @ 1440..1443 (fid = 0);
          } @ 1439..1443 (fid = 0);
        } @ 1435..1443 (fid = 0) @ 1435..1443 (fid = 0),

        Binary {
          lhs: ident _ @ 1449..1450 (fid = 0);
          op: Assignment;
          rhs: PointerType {
            mutable: true;
            typexpr: ident u32 @ 1458..1461 (fid = 0);
          } @ 1453..1461 (fid = 0);
        } @ 1449..1461 (fid = 0) @ 1449..1461 (fid = 0),

        Binary {
          lhs: ident _ @ 1497..1498 (fid = 0);
          op: Assignment;
          rhs: FunPtrType {
            args: [];
            ret: none;
          } @ 1501..1507 (fid = 0);
        } @ 1497..1507 (fid = 0) @ 1497..1507 (fid = 0),

        Binary {
          lhs: ident _ @ 1513..1514 (fid = 0);
          op: Assignment;
          rhs: FunPtrType {
            args: [
              ident usz @ 1522..1525 (fid = 0),

              ident bool @ 1527..1531 (fid = 0),
            ];
            ret: ident usz @ 1536..1539 (fid = 0);
          } @ 1517..1539 (fid = 0);
        } @ 1513..1539 (fid = 0) @ 1513..1539 (fid = 0),

        Binary {
          lhs: ident _ @ 1545..1546 (fid = 0);
          op: Assignment;
          rhs: FunPtrType {
            args: [
              ident usz @ 1554..1557 (fid = 0),
            ];
            ret: ident usz @ 1563..1566 (fid = 0);
          } @ 1549..1566 (fid = 0);
        } @ 1545..1566 (fid = 0) @ 1545..1566 (fid = 0),

        @last_expr: none,
      ] @ 25..1569 (fid = 0);
    } @ 19..1569 (fid = 0);
  } @ 11..1569 (fid = 0),
]
"#,
        expected_test_out: "",
    ),
    "parser/item": (
        expected_compiler_out: r#"ast = [
  GlobalConst {
    name: main @ 19..23 (fid = 0);
    typexpr: none;
    value: FunDefinition {
      args: [];
      rettypexpr: none;
      body: Block [
        @last_expr: none,
      ] @ 33..35 (fid = 0);
    } @ 27..35 (fid = 0);
  } @ 19..35 (fid = 0),

  GlobalConst {
    name: avogadro @ 36..44 (fid = 0);
    typexpr: ident f64 @ 47..50 (fid = 0);
    value: float 602199999999999960000000 @ 53..61 (fid = 0);
  } @ 36..62 (fid = 0),

  GlobalVar {
    name: hello @ 78..83 (fid = 0);
    typexpr: PointerType {
      mutable: false;
      typexpr: ident str @ 87..90 (fid = 0);
    } @ 86..90 (fid = 0);
    value: string "Hello" @ 93..100 (fid = 0);
  } @ 78..101 (fid = 0),

  GlobalVar {
    name: globFloat @ 102..111 (fid = 0);
    typexpr: none;
    value: float 12 @ 115..119 (fid = 0);
  } @ 102..120 (fid = 0),
]
"#,
        expected_test_out: "",
    ),
    "parser/statement": (
        expected_compiler_out: "ast = [
  GlobalConst {
    name: main @ 0..4 (fid = 0);
    typexpr: none;
    value: FunDefinition {
      args: [];
      rettypexpr: none;
      body: Block [
        VariableDef {
          name: a @ 48..49 (fid = 0);
          mutable: false;
          typexpr: none;
          value: integer 12 @ 52..54 (fid = 0);
        } @ 44..54 (fid = 0),

        VariableDef {
          name: b @ 68..69 (fid = 0);
          mutable: true;
          typexpr: none;
          value: integer 34 @ 72..74 (fid = 0);
        } @ 60..74 (fid = 0),

        VariableDef {
          name: c @ 107..108 (fid = 0);
          mutable: false;
          typexpr: none;
          value: integer 56 @ 112..114 (fid = 0);
        } @ 107..114 (fid = 0),

        VariableDef {
          name: d @ 120..121 (fid = 0);
          mutable: true;
          typexpr: none;
          value: integer 78 @ 125..127 (fid = 0);
        } @ 120..127 (fid = 0),

        Defer {
          expr: Block Block [
            @last_expr: none,
          ] @ 163..165 (fid = 0) @ 163..165 (fid = 0);
        } @ 157..165 (fid = 0),

        FunCall {
          callee: ident hello_world @ 199..210 (fid = 0);
          args: [];
        } @ 199..212 (fid = 0) @ 199..212 (fid = 0),

        @last_expr: none,
      ] @ 14..215 (fid = 0);
    } @ 8..215 (fid = 0);
  } @ 0..215 (fid = 0),
]
",
        expected_test_out: "",
    ),
    "scir/fun_ret_ty": (
        expected_compiler_out: r#"scir = [
  GlobalDef {
    name: i32_return @ 0..10 (fid = 0);
    mutable: false;
    typexpr: none;
    value: Expression {
      expr: FunDefinition {
        args: [];
        rettypexpr: Expression {
          expr: Symbol {
            kind: global;
            name: i32 @ none;
            which: 0;
            path: ∅;
            typ: type;
            typeness: explicit;
            value: Type {
              type: i32;
            };
          };
          typ: type;
        } @ 23..26 (fid = 0);
        body: Block {
          stmts: [
            Expression {
              expr: If {
                cond: Expression {
                  expr: boolean false;
                  typ: bool;
                } @ 36..41 (fid = 0);
                then_br: Expression {
                  expr: Block {
                    label: none;
                    block: Block {
                      stmts: [
                        Expression {
                          expr: Return {
                            expr: Expression {
                              expr: integer 21;
                              typ: i32;
                            } @ 59..61 (fid = 0);
                          };
                          typ: noreturn;
                        } @ 52..61 (fid = 0) @ 52..61 (fid = 0),
                      ];
                      last_expr: none;
                      typ: noreturn;
                    } @ 42..68 (fid = 0);
                    index: 0;
                  };
                  typ: noreturn;
                } @ 33..68 (fid = 0);
                else_br: none;
              };
              typ: void;
            } @ 33..68 (fid = 0) @ 33..68 (fid = 0),
          ];
          last_expr: Expression {
            expr: integer 120;
            typ: i32;
          } @ 74..77 (fid = 0);
          typ: i32;
        } @ 27..79 (fid = 0);
      };
      typ: *fun () -> i32;
    } @ 14..79 (fid = 0);
    sym: Symbol {
      kind: function;
      name: i32_return @ 0..10 (fid = 0);
      which: 0;
      path: orb.i32_return;
      typ: *fun () -> i32;
      typeness: explicit;
      value: none;
    };
  } @ 0..79 (fid = 0),

  GlobalDef {
    name: f32_return @ 81..91 (fid = 0);
    mutable: false;
    typexpr: none;
    value: Expression {
      expr: FunDefinition {
        args: [];
        rettypexpr: Expression {
          expr: Symbol {
            kind: global;
            name: f32 @ none;
            which: 0;
            path: ∅;
            typ: type;
            typeness: explicit;
            value: Type {
              type: f32;
            };
          };
          typ: type;
        } @ 104..107 (fid = 0);
        body: Block {
          stmts: [
            Expression {
              expr: If {
                cond: Expression {
                  expr: boolean false;
                  typ: bool;
                } @ 117..122 (fid = 0);
                then_br: Expression {
                  expr: Block {
                    label: none;
                    block: Block {
                      stmts: [
                        Expression {
                          expr: Return {
                            expr: Expression {
                              expr: float 2.1;
                              typ: f32;
                            } @ 140..143 (fid = 0);
                          };
                          typ: noreturn;
                        } @ 133..143 (fid = 0) @ 133..143 (fid = 0),
                      ];
                      last_expr: none;
                      typ: noreturn;
                    } @ 123..150 (fid = 0);
                    index: 0;
                  };
                  typ: noreturn;
                } @ 114..150 (fid = 0);
                else_br: none;
              };
              typ: void;
            } @ 114..150 (fid = 0) @ 114..150 (fid = 0),
          ];
          last_expr: Expression {
            expr: float 1.2;
            typ: f32;
          } @ 156..160 (fid = 0);
          typ: f32;
        } @ 108..162 (fid = 0);
      };
      typ: *fun () -> f32;
    } @ 95..162 (fid = 0);
    sym: Symbol {
      kind: function;
      name: f32_return @ 81..91 (fid = 0);
      which: 0;
      path: orb.f32_return;
      typ: *fun () -> f32;
      typeness: explicit;
      value: none;
    };
  } @ 81..162 (fid = 0),

  GlobalDef {
    name: char_return @ 164..175 (fid = 0);
    mutable: false;
    typexpr: none;
    value: Expression {
      expr: FunDefinition {
        args: [];
        rettypexpr: Expression {
          expr: Symbol {
            kind: global;
            name: char @ none;
            which: 0;
            path: ∅;
            typ: type;
            typeness: explicit;
            value: Type {
              type: char;
            };
          };
          typ: type;
        } @ 188..192 (fid = 0);
        body: Block {
          stmts: [
            Expression {
              expr: If {
                cond: Expression {
                  expr: boolean false;
                  typ: bool;
                } @ 202..207 (fid = 0);
                then_br: Expression {
                  expr: Block {
                    label: none;
                    block: Block {
                      stmts: [];
                      last_expr: Expression {
                        expr: Return {
                          expr: Expression {
                            expr: character 'B';
                            typ: char;
                          } @ 225..228 (fid = 0);
                        };
                        typ: noreturn;
                      } @ 218..228 (fid = 0);
                      typ: noreturn;
                    } @ 208..234 (fid = 0);
                    index: 0;
                  };
                  typ: noreturn;
                } @ 199..234 (fid = 0);
                else_br: none;
              };
              typ: void;
            } @ 199..234 (fid = 0) @ 199..234 (fid = 0),
          ];
          last_expr: Expression {
            expr: character 'A';
            typ: char;
          } @ 240..243 (fid = 0);
          typ: char;
        } @ 193..245 (fid = 0);
      };
      typ: *fun () -> char;
    } @ 179..245 (fid = 0);
    sym: Symbol {
      kind: function;
      name: char_return @ 164..175 (fid = 0);
      which: 0;
      path: orb.char_return;
      typ: *fun () -> char;
      typeness: explicit;
      value: none;
    };
  } @ 164..245 (fid = 0),

  GlobalDef {
    name: string_return @ 247..260 (fid = 0);
    mutable: false;
    typexpr: none;
    value: Expression {
      expr: FunDefinition {
        args: [];
        rettypexpr: Expression {
          expr: PointerType {
            mutable: false;
            typexpr: Expression {
              expr: Symbol {
                kind: global;
                name: str @ none;
                which: 0;
                path: ∅;
                typ: type;
                typeness: explicit;
                value: Type {
                  type: str;
                };
              };
              typ: type;
            } @ 274..277 (fid = 0);
          };
          typ: type;
        } @ 273..277 (fid = 0);
        body: Block {
          stmts: [
            Expression {
              expr: If {
                cond: Expression {
                  expr: boolean false;
                  typ: bool;
                } @ 287..292 (fid = 0);
                then_br: Expression {
                  expr: Block {
                    label: none;
                    block: Block {
                      stmts: [];
                      last_expr: Expression {
                        expr: Return {
                          expr: Expression {
                            expr: string "!World Hello";
                            typ: * str;
                          } @ 310..324 (fid = 0);
                        };
                        typ: noreturn;
                      } @ 303..324 (fid = 0);
                      typ: noreturn;
                    } @ 293..330 (fid = 0);
                    index: 0;
                  };
                  typ: noreturn;
                } @ 284..330 (fid = 0);
                else_br: none;
              };
              typ: void;
            } @ 284..330 (fid = 0) @ 284..330 (fid = 0),
          ];
          last_expr: Expression {
            expr: string "Hello World";
            typ: * str;
          } @ 336..349 (fid = 0);
          typ: * str;
        } @ 278..351 (fid = 0);
      };
      typ: *fun () -> * str;
    } @ 264..351 (fid = 0);
    sym: Symbol {
      kind: function;
      name: string_return @ 247..260 (fid = 0);
      which: 0;
      path: orb.string_return;
      typ: *fun () -> * str;
      typeness: explicit;
      value: none;
    };
  } @ 247..351 (fid = 0),

  GlobalDef {
    name: void_return @ 353..364 (fid = 0);
    mutable: false;
    typexpr: none;
    value: Expression {
      expr: FunDefinition {
        args: [];
        rettypexpr: none;
        body: Block {
          stmts: [
            Expression {
              expr: If {
                cond: Expression {
                  expr: boolean false;
                  typ: bool;
                } @ 383..388 (fid = 0);
                then_br: Expression {
                  expr: Block {
                    label: none;
                    block: Block {
                      stmts: [];
                      last_expr: Expression {
                        expr: Return {
                          expr: none;
                        };
                        typ: noreturn;
                      } @ 399..405 (fid = 0);
                      typ: noreturn;
                    } @ 389..411 (fid = 0);
                    index: 0;
                  };
                  typ: noreturn;
                } @ 380..411 (fid = 0);
                else_br: none;
              };
              typ: void;
            } @ 380..411 (fid = 0) @ 380..411 (fid = 0),

            Expression {
              expr: Return {
                expr: none;
              };
              typ: noreturn;
            } @ 417..423 (fid = 0) @ 417..423 (fid = 0),
          ];
          last_expr: none;
          typ: noreturn;
        } @ 374..426 (fid = 0);
      };
      typ: *fun () -> void;
    } @ 368..426 (fid = 0);
    sym: Symbol {
      kind: function;
      name: void_return @ 353..364 (fid = 0);
      which: 0;
      path: orb.void_return;
      typ: *fun () -> void;
      typeness: explicit;
      value: none;
    };
  } @ 353..426 (fid = 0),
]
"#,
        expected_test_out: "",
    ),
    "scir/label_kw_expr": (
        expected_compiler_out: "scir = [
  GlobalDef {
    name: nested_loops @ 0..12 (fid = 0);
    mutable: false;
    typexpr: none;
    value: Expression {
      expr: FunDefinition {
        args: [];
        rettypexpr: none;
        body: Block {
          stmts: [];
          last_expr: Expression {
            expr: Loop {
              label: lab;
              body: Block {
                stmts: [];
                last_expr: Expression {
                  expr: Loop {
                    label: none;
                    body: Block {
                      stmts: [
                        Expression {
                          expr: Break {
                            label: none;
                            expr: none;
                            index: 1;
                          };
                          typ: noreturn;
                        } @ 67..72 (fid = 0) @ 67..72 (fid = 0),

                        Expression {
                          expr: Break {
                            label: lab;
                            expr: none;
                            index: 0;
                          };
                          typ: noreturn;
                        } @ 86..96 (fid = 0) @ 86..96 (fid = 0),

                        Expression {
                          expr: Continue {
                            label: none;
                            index: 1;
                          };
                          typ: noreturn;
                        } @ 110..118 (fid = 0) @ 110..118 (fid = 0),

                        Expression {
                          expr: Continue {
                            label: lab;
                            index: 0;
                          };
                          typ: noreturn;
                        } @ 132..145 (fid = 0) @ 132..145 (fid = 0),
                      ];
                      last_expr: none;
                      typ: noreturn;
                    } @ 53..156 (fid = 0);
                    index: 1;
                  };
                  typ: void;
                } @ 48..156 (fid = 0);
                typ: void;
              } @ 38..162 (fid = 0);
              index: 0;
            };
            typ: void;
          } @ 28..162 (fid = 0);
          typ: void;
        } @ 22..164 (fid = 0);
      };
      typ: *fun () -> void;
    } @ 16..164 (fid = 0);
    sym: Symbol {
      kind: function;
      name: nested_loops @ 0..12 (fid = 0);
      which: 0;
      path: orb.nested_loops;
      typ: *fun () -> void;
      typeness: explicit;
      value: none;
    };
  } @ 0..164 (fid = 0),

  GlobalDef {
    name: block_label @ 166..177 (fid = 0);
    mutable: false;
    typexpr: none;
    value: Expression {
      expr: FunDefinition {
        args: [];
        rettypexpr: none;
        body: Block {
          stmts: [
            VariableDef {
              name: a @ 193..194 (fid = 0);
              mutable: false;
              typexpr: Expression {
                expr: Symbol {
                  kind: global;
                  name: i32 @ none;
                  which: 0;
                  path: ∅;
                  typ: type;
                  typeness: explicit;
                  value: Type {
                    type: i32;
                  };
                };
                typ: type;
              } @ 197..200 (fid = 0);
              value: Expression {
                expr: Block {
                  label: blk;
                  block: Block {
                    stmts: [
                      Expression {
                        expr: Break {
                          label: blk;
                          expr: Expression {
                            expr: integer 12;
                            typ: i32;
                          } @ 229..231 (fid = 0);
                          index: 0;
                        };
                        typ: noreturn;
                      } @ 218..231 (fid = 0) @ 218..231 (fid = 0),
                    ];
                    last_expr: Expression {
                      expr: integer 2;
                      typ: i32;
                    } @ 242..243 (fid = 0);
                    typ: noreturn;
                  } @ 208..249 (fid = 0);
                  index: 0;
                };
                typ: i32;
              } @ 203..249 (fid = 0);
              sym: Symbol {
                kind: local;
                name: a @ 193..194 (fid = 0);
                which: 0;
                path: a;
                typ: i32;
                typeness: explicit;
                value: none;
              };
            } @ 193..249 (fid = 0),
          ];
          last_expr: none;
          typ: void;
        } @ 187..252 (fid = 0);
      };
      typ: *fun () -> void;
    } @ 181..252 (fid = 0);
    sym: Symbol {
      kind: function;
      name: block_label @ 166..177 (fid = 0);
      which: 0;
      path: orb.block_label;
      typ: *fun () -> void;
      typeness: explicit;
      value: none;
    };
  } @ 166..252 (fid = 0),
]
warning[W002]: unreachable code
  ┌─ ./tests/scir/label_kw_expr.lun:5:13
  │
4 │             break;
  │             ----- any code following this statement is unreachable
5 │             break :lab;
  │             ^^^^^^^^^^ the unreachable code

warning[W002]: unreachable code
   ┌─ ./tests/scir/label_kw_expr.lun:16:9
   │
14 │         break :blk 12;
   │         ------------- any code following this statement is unreachable
15 │ 
16 │         2
   │         ^ the unreachable code

warning: compilation of `./tests/scir/label_kw_expr` succeeded but 2 warnings emitted.

",
        expected_test_out: "",
    ),
    "scir/noreturn_block": (
        expected_compiler_out: "scir = [
  GlobalDef {
    name: cant_reach @ 0..10 (fid = 0);
    mutable: false;
    typexpr: none;
    value: Expression {
      expr: integer 1;
      typ: i32;
    } @ 14..15 (fid = 0);
    sym: Symbol {
      kind: global;
      name: cant_reach @ 0..10 (fid = 0);
      which: 0;
      path: orb.cant_reach;
      typ: usz;
      typeness: explicit;
      value: I32 {
        val: 1;
      };
    };
  } @ 0..16 (fid = 0),

  GlobalDef {
    name: main @ 18..22 (fid = 0);
    mutable: false;
    typexpr: none;
    value: Expression {
      expr: FunDefinition {
        args: [];
        rettypexpr: Expression {
          expr: Symbol {
            kind: global;
            name: usz @ none;
            which: 0;
            path: ∅;
            typ: type;
            typeness: explicit;
            value: Type {
              type: usz;
            };
          };
          typ: type;
        } @ 35..38 (fid = 0);
        body: Block {
          stmts: [
            VariableDef {
              name: a @ 45..46 (fid = 0);
              mutable: false;
              typexpr: Expression {
                expr: Symbol {
                  kind: global;
                  name: usz @ none;
                  which: 0;
                  path: ∅;
                  typ: type;
                  typeness: explicit;
                  value: Type {
                    type: usz;
                  };
                };
                typ: type;
              } @ 49..52 (fid = 0);
              value: Expression {
                expr: Block {
                  label: blk;
                  block: Block {
                    stmts: [
                      Expression {
                        expr: Symbol {
                          kind: global;
                          name: cant_reach @ 0..10 (fid = 0);
                          which: 0;
                          path: orb.cant_reach;
                          typ: usz;
                          typeness: explicit;
                          value: I32 {
                            val: 1;
                          };
                        };
                        typ: i32;
                      } @ 128..138 (fid = 0) @ 128..138 (fid = 0),

                      Expression {
                        expr: Break {
                          label: blk;
                          expr: Expression {
                            expr: integer 12;
                            typ: usz;
                          } @ 160..162 (fid = 0);
                          index: 0;
                        };
                        typ: noreturn;
                      } @ 149..162 (fid = 0) @ 149..162 (fid = 0),
                    ];
                    last_expr: Expression {
                      expr: Symbol {
                        kind: global;
                        name: cant_reach @ 0..10 (fid = 0);
                        which: 0;
                        path: orb.cant_reach;
                        typ: usz;
                        typeness: explicit;
                        value: I32 {
                          val: 1;
                        };
                      };
                      typ: usz;
                    } @ 173..183 (fid = 0);
                    typ: noreturn;
                  } @ 60..189 (fid = 0);
                  index: 0;
                };
                typ: usz;
              } @ 55..189 (fid = 0);
              sym: Symbol {
                kind: local;
                name: a @ 45..46 (fid = 0);
                which: 0;
                path: a;
                typ: usz;
                typeness: explicit;
                value: none;
              };
            } @ 45..189 (fid = 0),

            Expression {
              expr: Return {
                expr: Expression {
                  expr: integer 12;
                  typ: usz;
                } @ 244..246 (fid = 0);
              };
              typ: noreturn;
            } @ 237..246 (fid = 0) @ 237..246 (fid = 0),

            Expression {
              expr: Symbol {
                kind: global;
                name: cant_reach @ 0..10 (fid = 0);
                which: 0;
                path: orb.cant_reach;
                typ: usz;
                typeness: explicit;
                value: I32 {
                  val: 1;
                };
              };
              typ: usz;
            } @ 252..262 (fid = 0) @ 252..262 (fid = 0),
          ];
          last_expr: none;
          typ: noreturn;
        } @ 39..265 (fid = 0);
      };
      typ: *fun () -> usz;
    } @ 26..265 (fid = 0);
    sym: Symbol {
      kind: function;
      name: main @ 18..22 (fid = 0);
      which: 0;
      path: orb.main;
      typ: *fun () -> usz;
      typeness: explicit;
      value: none;
    };
  } @ 18..265 (fid = 0),
]
warning[W002]: unreachable code
   ┌─ ./tests/scir/noreturn_block.lun:10:9
   │
 8 │         break :blk 12;
   │         ------------- any code following this statement is unreachable
 9 │ 
10 │         cant_reach
   │         ^^^^^^^^^^ the unreachable code

warning[W002]: unreachable code
   ┌─ ./tests/scir/noreturn_block.lun:15:5
   │
14 │     return 12;
   │     --------- any code following this statement is unreachable
15 │     cant_reach;
   │     ^^^^^^^^^^ the unreachable code

warning: compilation of `./tests/scir/noreturn_block` succeeded but 2 warnings emitted.

",
        expected_test_out: "",
    ),
}
