{
    "behavior/E041": (
        compiler_out: "scir = []
error[E041]: no `main` was found in a binary orb
 = Consider adding a main function to the root of your orb.

error: compilation of `E041` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "behavior/E042": (
        compiler_out: "scir = [
  FunDefinition {
    name: main @ 43..47 (fid = 0);
    typeexpr: none;
    args: [
      Arg {
        name: a @ 55..56 (fid = 0);
        typeexpr: Expression {
          expr: Symbol {
            kind: global;
            name: bool @ none;
            realname: none;
            which: 0;
            path: ∅;
            typ: type;
            typeness: explicit;
            value: Type {
              type: bool;
            };
          };
          typ: type;
        } @ 58..62 (fid = 0);
        sym: Symbol {
          kind: argument;
          name: a @ 55..56 (fid = 0);
          realname: none;
          which: 0;
          path: a;
          typ: bool;
          typeness: explicit;
          value: none;
        };
      } @ 55..62 (fid = 0),
    ];
    rettypeexpr: none;
    body: Block {
      stmts: [];
      last_expr: none;
      typ: void;
    } @ 64..66 (fid = 0);
    info: {
      defined_mut: false;
    };
    sym: Symbol {
      kind: function;
      name: main @ 43..47 (fid = 0);
      realname: none;
      which: 0;
      path: E042::main;
      typ: *fun (bool) -> void;
      typeness: explicit;
      value: none;
    };
  } @ 43..66 (fid = 0),
]
error[E042]: bad main function signature, expected `*fun () -> void`
  ┌─ ./tests/behavior/E042.lun:3:1
  │
3 │ main :: fun(a: bool) {}
  │ ^^^^ but got `*fun (bool) -> void`

error: compilation of `E042` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "behavior/logic_and": (
        compiler_out: r#"scir = [
  ExternBlock {
    abi: C;
    items: [
      FunDeclaration {
        name: puts @ 17..21 (fid = 0);
        typeexpr: none;
        args: [
          Expression {
            expr: PointerType {
              mutability: not;
              typeexpr: Expression {
                expr: Symbol {
                  kind: global;
                  name: i8 @ none;
                  realname: none;
                  which: 0;
                  path: ∅;
                  typ: type;
                  typeness: explicit;
                  value: Type {
                    type: i8;
                  };
                };
                typ: type;
              } @ 30..32 (fid = 0);
            };
            typ: type;
          } @ 29..32 (fid = 0),
        ];
        rettypeexpr: none;
        defined_mut: false;
        sym: Symbol {
          kind: function;
          name: puts @ 17..21 (fid = 0);
          realname: none;
          which: 0;
          path: logic_and::puts;
          typ: *fun (*i8) -> void;
          typeness: explicit;
          value: none;
        };
      } @ 17..34 (fid = 0),
    ];
  } @ 0..36 (fid = 0),

  FunDefinition {
    name: foo @ 38..41 (fid = 0);
    typeexpr: none;
    args: [];
    rettypeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: bool @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: bool;
        };
      };
      typ: type;
    } @ 54..58 (fid = 0);
    body: Block {
      stmts: [
        Expression {
          expr: Call {
            callee: Expression {
              expr: Symbol {
                kind: function;
                name: puts @ 17..21 (fid = 0);
                realname: none;
                which: 0;
                path: logic_and::puts;
                typ: *fun (*i8) -> void;
                typeness: explicit;
                value: none;
              };
              typ: *fun (*i8) -> void;
            } @ 65..69 (fid = 0);
            args: [
              Expression {
                expr: c_string "foo";
                typ: *i8;
              } @ 70..76 (fid = 0),
            ];
          };
          typ: void;
        } @ 65..77 (fid = 0) @ 65..77 (fid = 0),
      ];
      last_expr: Expression {
        expr: boolean false;
        typ: bool;
      } @ 83..88 (fid = 0);
      typ: bool;
    } @ 59..90 (fid = 0);
    info: {
      defined_mut: false;
    };
    sym: Symbol {
      kind: function;
      name: foo @ 38..41 (fid = 0);
      realname: none;
      which: 0;
      path: logic_and::foo;
      typ: *fun () -> bool;
      typeness: explicit;
      value: none;
    };
  } @ 38..90 (fid = 0),

  FunDefinition {
    name: bar @ 92..95 (fid = 0);
    typeexpr: none;
    args: [];
    rettypeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: bool @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: bool;
        };
      };
      typ: type;
    } @ 108..112 (fid = 0);
    body: Block {
      stmts: [
        Expression {
          expr: Call {
            callee: Expression {
              expr: Symbol {
                kind: function;
                name: puts @ 17..21 (fid = 0);
                realname: none;
                which: 0;
                path: logic_and::puts;
                typ: *fun (*i8) -> void;
                typeness: explicit;
                value: none;
              };
              typ: *fun (*i8) -> void;
            } @ 119..123 (fid = 0);
            args: [
              Expression {
                expr: c_string "bar";
                typ: *i8;
              } @ 124..130 (fid = 0),
            ];
          };
          typ: void;
        } @ 119..131 (fid = 0) @ 119..131 (fid = 0),
      ];
      last_expr: Expression {
        expr: boolean true;
        typ: bool;
      } @ 137..141 (fid = 0);
      typ: bool;
    } @ 113..143 (fid = 0);
    info: {
      defined_mut: false;
    };
    sym: Symbol {
      kind: function;
      name: bar @ 92..95 (fid = 0);
      realname: none;
      which: 0;
      path: logic_and::bar;
      typ: *fun () -> bool;
      typeness: explicit;
      value: none;
    };
  } @ 92..143 (fid = 0),

  FunDefinition {
    name: main @ 145..149 (fid = 0);
    typeexpr: none;
    args: [];
    rettypeexpr: none;
    body: Block {
      stmts: [
        Expression {
          expr: Call {
            callee: Expression {
              expr: Symbol {
                kind: function;
                name: puts @ 17..21 (fid = 0);
                realname: none;
                which: 0;
                path: logic_and::puts;
                typ: *fun (*i8) -> void;
                typeness: explicit;
                value: none;
              };
              typ: *fun (*i8) -> void;
            } @ 165..169 (fid = 0);
            args: [
              Expression {
                expr: c_string "ONLY `foo`:";
                typ: *i8;
              } @ 170..184 (fid = 0),
            ];
          };
          typ: void;
        } @ 165..185 (fid = 0) @ 165..185 (fid = 0),

        Expression {
          expr: Binary {
            lhs: Expression {
              expr: Call {
                callee: Expression {
                  expr: Symbol {
                    kind: function;
                    name: foo @ 38..41 (fid = 0);
                    realname: none;
                    which: 0;
                    path: logic_and::foo;
                    typ: *fun () -> bool;
                    typeness: explicit;
                    value: none;
                  };
                  typ: *fun () -> bool;
                } @ 191..194 (fid = 0);
                args: [];
              };
              typ: bool;
            } @ 191..196 (fid = 0);
            op: LogicalAnd;
            rhs: Expression {
              expr: Call {
                callee: Expression {
                  expr: Symbol {
                    kind: function;
                    name: bar @ 92..95 (fid = 0);
                    realname: none;
                    which: 0;
                    path: logic_and::bar;
                    typ: *fun () -> bool;
                    typeness: explicit;
                    value: none;
                  };
                  typ: *fun () -> bool;
                } @ 200..203 (fid = 0);
                args: [];
              };
              typ: bool;
            } @ 200..205 (fid = 0);
          };
          typ: bool;
        } @ 191..205 (fid = 0) @ 191..205 (fid = 0),

        Expression {
          expr: Call {
            callee: Expression {
              expr: Symbol {
                kind: function;
                name: puts @ 17..21 (fid = 0);
                realname: none;
                which: 0;
                path: logic_and::puts;
                typ: *fun (*i8) -> void;
                typeness: explicit;
                value: none;
              };
              typ: *fun (*i8) -> void;
            } @ 211..215 (fid = 0);
            args: [
              Expression {
                expr: c_string "";
                typ: *i8;
              } @ 216..219 (fid = 0),
            ];
          };
          typ: void;
        } @ 211..220 (fid = 0) @ 211..220 (fid = 0),

        Expression {
          expr: Call {
            callee: Expression {
              expr: Symbol {
                kind: function;
                name: puts @ 17..21 (fid = 0);
                realname: none;
                which: 0;
                path: logic_and::puts;
                typ: *fun (*i8) -> void;
                typeness: explicit;
                value: none;
              };
              typ: *fun (*i8) -> void;
            } @ 227..231 (fid = 0);
            args: [
              Expression {
                expr: c_string "BOTH `bar` and `foo`:";
                typ: *i8;
              } @ 232..256 (fid = 0),
            ];
          };
          typ: void;
        } @ 227..257 (fid = 0) @ 227..257 (fid = 0),

        Expression {
          expr: Binary {
            lhs: Expression {
              expr: Call {
                callee: Expression {
                  expr: Symbol {
                    kind: function;
                    name: bar @ 92..95 (fid = 0);
                    realname: none;
                    which: 0;
                    path: logic_and::bar;
                    typ: *fun () -> bool;
                    typeness: explicit;
                    value: none;
                  };
                  typ: *fun () -> bool;
                } @ 263..266 (fid = 0);
                args: [];
              };
              typ: bool;
            } @ 263..268 (fid = 0);
            op: LogicalAnd;
            rhs: Expression {
              expr: Call {
                callee: Expression {
                  expr: Symbol {
                    kind: function;
                    name: foo @ 38..41 (fid = 0);
                    realname: none;
                    which: 0;
                    path: logic_and::foo;
                    typ: *fun () -> bool;
                    typeness: explicit;
                    value: none;
                  };
                  typ: *fun () -> bool;
                } @ 272..275 (fid = 0);
                args: [];
              };
              typ: bool;
            } @ 272..277 (fid = 0);
          };
          typ: bool;
        } @ 263..277 (fid = 0) @ 263..277 (fid = 0),
      ];
      last_expr: none;
      typ: void;
    } @ 159..280 (fid = 0);
    info: {
      defined_mut: false;
    };
    sym: Symbol {
      kind: function;
      name: main @ 145..149 (fid = 0);
      realname: none;
      which: 0;
      path: logic_and::main;
      typ: *fun () -> void;
      typeness: explicit;
      value: none;
    };
  } @ 145..280 (fid = 0),
]
; SSA of orb logic_and

; declare function %puts(i64) system_v;

data %__cstr_logic_and_70_76_0 = align(8) { 102, 111, 111, 0 }

; name = "foo", realname = "_L9logic_and3foo"
function u0:1() -> i8 system_v {
    gv0 = symbol colocated userextname1
    sig0 = (i64) system_v
    fn0 = u0:0 sig0

block0:
    v0 = global_value.i64 gv0
    call fn0(v0)
    v1 = iconst.i8 0
    return v1  ; v1 = 0
}

data %__cstr_logic_and_124_130_0 = align(8) { 98, 97, 114, 0 }

; name = "bar", realname = "_L9logic_and3bar"
function u0:2() -> i8 system_v {
    gv0 = symbol colocated userextname1
    sig0 = (i64) system_v
    fn0 = u0:0 sig0

block0:
    v0 = global_value.i64 gv0
    call fn0(v0)
    v1 = iconst.i8 1
    return v1  ; v1 = 1
}

data %__cstr_logic_and_170_184_0 = align(8) { 79, 78, 76, 89, 32, 96, 102, 111, 111, 96, 58, 0 }

data %__cstr_logic_and_216_219_0 = align(8) { 0 }

data %__cstr_logic_and_232_256_0 = align(8) { 66, 79, 84, 72, 32, 96, 98, 97, 114, 96, 32, 97, 110, 100, 32, 96, 102, 111, 111, 96, 58, 0 }

; name = "main", realname = "_L9logic_and4main"
function u0:3() system_v {
    gv0 = symbol colocated userextname1
    gv1 = symbol colocated userextname4
    gv2 = symbol colocated userextname5
    sig0 = (i64) system_v
    sig1 = () -> i8 system_v
    sig2 = () -> i8 system_v
    sig3 = (i64) system_v
    sig4 = (i64) system_v
    sig5 = () -> i8 system_v
    sig6 = () -> i8 system_v
    fn0 = u0:0 sig0
    fn1 = colocated u0:1 sig1
    fn2 = colocated u0:2 sig2
    fn3 = u0:0 sig3
    fn4 = u0:0 sig4
    fn5 = colocated u0:2 sig5
    fn6 = colocated u0:1 sig6

block0:
    v0 = global_value.i64 gv0
    call fn0(v0)
    v1 = call fn1()
    v2 = iconst.i8 0
    brif v1, block1, block2(v2)  ; v2 = 0

block1:
    v3 = call fn2()
    jump block2(v3)

block2(v4: i8):
    v5 = global_value.i64 gv1
    call fn3(v5)
    v6 = global_value.i64 gv2
    call fn4(v6)
    v7 = call fn5()
    v8 = iconst.i8 0
    brif v7, block3, block4(v8)  ; v8 = 0

block3:
    v9 = call fn6()
    jump block4(v9)

block4(v10: i8):
    return
}

; name = "main"
function u0:4(i32, i64, i64) -> i32 system_v {
    sig0 = () system_v
    fn0 = colocated u0:3 sig0

block0(v0: i32, v1: i64, v2: i64):
    call fn0()
    v3 = iconst.i32 0
    return v3  ; v3 = 0
}
"#,
        compiler_code: 0,
        test_out: "ONLY `foo`:
foo

BOTH `bar` and `foo`:
bar
foo
",
        test_code: 0,
    ),
    "behavior/logic_or": (
        compiler_out: r#"scir = [
  ExternBlock {
    abi: C;
    items: [
      FunDeclaration {
        name: puts @ 17..21 (fid = 0);
        typeexpr: none;
        args: [
          Expression {
            expr: PointerType {
              mutability: not;
              typeexpr: Expression {
                expr: Symbol {
                  kind: global;
                  name: i8 @ none;
                  realname: none;
                  which: 0;
                  path: ∅;
                  typ: type;
                  typeness: explicit;
                  value: Type {
                    type: i8;
                  };
                };
                typ: type;
              } @ 30..32 (fid = 0);
            };
            typ: type;
          } @ 29..32 (fid = 0),
        ];
        rettypeexpr: none;
        defined_mut: false;
        sym: Symbol {
          kind: function;
          name: puts @ 17..21 (fid = 0);
          realname: none;
          which: 0;
          path: logic_or::puts;
          typ: *fun (*i8) -> void;
          typeness: explicit;
          value: none;
        };
      } @ 17..34 (fid = 0),
    ];
  } @ 0..36 (fid = 0),

  FunDefinition {
    name: foo @ 38..41 (fid = 0);
    typeexpr: none;
    args: [];
    rettypeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: bool @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: bool;
        };
      };
      typ: type;
    } @ 54..58 (fid = 0);
    body: Block {
      stmts: [
        Expression {
          expr: Call {
            callee: Expression {
              expr: Symbol {
                kind: function;
                name: puts @ 17..21 (fid = 0);
                realname: none;
                which: 0;
                path: logic_or::puts;
                typ: *fun (*i8) -> void;
                typeness: explicit;
                value: none;
              };
              typ: *fun (*i8) -> void;
            } @ 65..69 (fid = 0);
            args: [
              Expression {
                expr: c_string "foo";
                typ: *i8;
              } @ 70..76 (fid = 0),
            ];
          };
          typ: void;
        } @ 65..77 (fid = 0) @ 65..77 (fid = 0),
      ];
      last_expr: Expression {
        expr: boolean false;
        typ: bool;
      } @ 83..88 (fid = 0);
      typ: bool;
    } @ 59..90 (fid = 0);
    info: {
      defined_mut: false;
    };
    sym: Symbol {
      kind: function;
      name: foo @ 38..41 (fid = 0);
      realname: none;
      which: 0;
      path: logic_or::foo;
      typ: *fun () -> bool;
      typeness: explicit;
      value: none;
    };
  } @ 38..90 (fid = 0),

  FunDefinition {
    name: bar @ 92..95 (fid = 0);
    typeexpr: none;
    args: [];
    rettypeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: bool @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: bool;
        };
      };
      typ: type;
    } @ 108..112 (fid = 0);
    body: Block {
      stmts: [
        Expression {
          expr: Call {
            callee: Expression {
              expr: Symbol {
                kind: function;
                name: puts @ 17..21 (fid = 0);
                realname: none;
                which: 0;
                path: logic_or::puts;
                typ: *fun (*i8) -> void;
                typeness: explicit;
                value: none;
              };
              typ: *fun (*i8) -> void;
            } @ 119..123 (fid = 0);
            args: [
              Expression {
                expr: c_string "bar";
                typ: *i8;
              } @ 124..130 (fid = 0),
            ];
          };
          typ: void;
        } @ 119..131 (fid = 0) @ 119..131 (fid = 0),
      ];
      last_expr: Expression {
        expr: boolean true;
        typ: bool;
      } @ 137..141 (fid = 0);
      typ: bool;
    } @ 113..143 (fid = 0);
    info: {
      defined_mut: false;
    };
    sym: Symbol {
      kind: function;
      name: bar @ 92..95 (fid = 0);
      realname: none;
      which: 0;
      path: logic_or::bar;
      typ: *fun () -> bool;
      typeness: explicit;
      value: none;
    };
  } @ 92..143 (fid = 0),

  FunDefinition {
    name: main @ 145..149 (fid = 0);
    typeexpr: none;
    args: [];
    rettypeexpr: none;
    body: Block {
      stmts: [
        Expression {
          expr: Call {
            callee: Expression {
              expr: Symbol {
                kind: function;
                name: puts @ 17..21 (fid = 0);
                realname: none;
                which: 0;
                path: logic_or::puts;
                typ: *fun (*i8) -> void;
                typeness: explicit;
                value: none;
              };
              typ: *fun (*i8) -> void;
            } @ 165..169 (fid = 0);
            args: [
              Expression {
                expr: c_string "BOTH `foo` and `bar`:";
                typ: *i8;
              } @ 170..194 (fid = 0),
            ];
          };
          typ: void;
        } @ 165..195 (fid = 0) @ 165..195 (fid = 0),

        Expression {
          expr: Binary {
            lhs: Expression {
              expr: Call {
                callee: Expression {
                  expr: Symbol {
                    kind: function;
                    name: foo @ 38..41 (fid = 0);
                    realname: none;
                    which: 0;
                    path: logic_or::foo;
                    typ: *fun () -> bool;
                    typeness: explicit;
                    value: none;
                  };
                  typ: *fun () -> bool;
                } @ 201..204 (fid = 0);
                args: [];
              };
              typ: bool;
            } @ 201..206 (fid = 0);
            op: LogicalOr;
            rhs: Expression {
              expr: Call {
                callee: Expression {
                  expr: Symbol {
                    kind: function;
                    name: bar @ 92..95 (fid = 0);
                    realname: none;
                    which: 0;
                    path: logic_or::bar;
                    typ: *fun () -> bool;
                    typeness: explicit;
                    value: none;
                  };
                  typ: *fun () -> bool;
                } @ 210..213 (fid = 0);
                args: [];
              };
              typ: bool;
            } @ 210..215 (fid = 0);
          };
          typ: bool;
        } @ 201..215 (fid = 0) @ 201..215 (fid = 0),

        Expression {
          expr: Call {
            callee: Expression {
              expr: Symbol {
                kind: function;
                name: puts @ 17..21 (fid = 0);
                realname: none;
                which: 0;
                path: logic_or::puts;
                typ: *fun (*i8) -> void;
                typeness: explicit;
                value: none;
              };
              typ: *fun (*i8) -> void;
            } @ 221..225 (fid = 0);
            args: [
              Expression {
                expr: c_string "";
                typ: *i8;
              } @ 226..229 (fid = 0),
            ];
          };
          typ: void;
        } @ 221..230 (fid = 0) @ 221..230 (fid = 0),

        Expression {
          expr: Call {
            callee: Expression {
              expr: Symbol {
                kind: function;
                name: puts @ 17..21 (fid = 0);
                realname: none;
                which: 0;
                path: logic_or::puts;
                typ: *fun (*i8) -> void;
                typeness: explicit;
                value: none;
              };
              typ: *fun (*i8) -> void;
            } @ 237..241 (fid = 0);
            args: [
              Expression {
                expr: c_string "ONLY `bar`:";
                typ: *i8;
              } @ 242..256 (fid = 0),
            ];
          };
          typ: void;
        } @ 237..257 (fid = 0) @ 237..257 (fid = 0),

        Expression {
          expr: Binary {
            lhs: Expression {
              expr: Call {
                callee: Expression {
                  expr: Symbol {
                    kind: function;
                    name: bar @ 92..95 (fid = 0);
                    realname: none;
                    which: 0;
                    path: logic_or::bar;
                    typ: *fun () -> bool;
                    typeness: explicit;
                    value: none;
                  };
                  typ: *fun () -> bool;
                } @ 263..266 (fid = 0);
                args: [];
              };
              typ: bool;
            } @ 263..268 (fid = 0);
            op: LogicalOr;
            rhs: Expression {
              expr: Call {
                callee: Expression {
                  expr: Symbol {
                    kind: function;
                    name: foo @ 38..41 (fid = 0);
                    realname: none;
                    which: 0;
                    path: logic_or::foo;
                    typ: *fun () -> bool;
                    typeness: explicit;
                    value: none;
                  };
                  typ: *fun () -> bool;
                } @ 272..275 (fid = 0);
                args: [];
              };
              typ: bool;
            } @ 272..277 (fid = 0);
          };
          typ: bool;
        } @ 263..277 (fid = 0) @ 263..277 (fid = 0),
      ];
      last_expr: none;
      typ: void;
    } @ 159..280 (fid = 0);
    info: {
      defined_mut: false;
    };
    sym: Symbol {
      kind: function;
      name: main @ 145..149 (fid = 0);
      realname: none;
      which: 0;
      path: logic_or::main;
      typ: *fun () -> void;
      typeness: explicit;
      value: none;
    };
  } @ 145..280 (fid = 0),
]
; SSA of orb logic_or

; declare function %puts(i64) system_v;

data %__cstr_logic_or_70_76_0 = align(8) { 102, 111, 111, 0 }

; name = "foo", realname = "_L8logic_or3foo"
function u0:1() -> i8 system_v {
    gv0 = symbol colocated userextname1
    sig0 = (i64) system_v
    fn0 = u0:0 sig0

block0:
    v0 = global_value.i64 gv0
    call fn0(v0)
    v1 = iconst.i8 0
    return v1  ; v1 = 0
}

data %__cstr_logic_or_124_130_0 = align(8) { 98, 97, 114, 0 }

; name = "bar", realname = "_L8logic_or3bar"
function u0:2() -> i8 system_v {
    gv0 = symbol colocated userextname1
    sig0 = (i64) system_v
    fn0 = u0:0 sig0

block0:
    v0 = global_value.i64 gv0
    call fn0(v0)
    v1 = iconst.i8 1
    return v1  ; v1 = 1
}

data %__cstr_logic_or_170_194_0 = align(8) { 66, 79, 84, 72, 32, 96, 102, 111, 111, 96, 32, 97, 110, 100, 32, 96, 98, 97, 114, 96, 58, 0 }

data %__cstr_logic_or_226_229_0 = align(8) { 0 }

data %__cstr_logic_or_242_256_0 = align(8) { 79, 78, 76, 89, 32, 96, 98, 97, 114, 96, 58, 0 }

; name = "main", realname = "_L8logic_or4main"
function u0:3() system_v {
    gv0 = symbol colocated userextname1
    gv1 = symbol colocated userextname4
    gv2 = symbol colocated userextname5
    sig0 = (i64) system_v
    sig1 = () -> i8 system_v
    sig2 = () -> i8 system_v
    sig3 = (i64) system_v
    sig4 = (i64) system_v
    sig5 = () -> i8 system_v
    sig6 = () -> i8 system_v
    fn0 = u0:0 sig0
    fn1 = colocated u0:1 sig1
    fn2 = colocated u0:2 sig2
    fn3 = u0:0 sig3
    fn4 = u0:0 sig4
    fn5 = colocated u0:2 sig5
    fn6 = colocated u0:1 sig6

block0:
    v0 = global_value.i64 gv0
    call fn0(v0)
    v1 = call fn1()
    v2 = iconst.i8 1
    brif v1, block2(v2), block1  ; v2 = 1

block1:
    v3 = call fn2()
    jump block2(v3)

block2(v4: i8):
    v5 = global_value.i64 gv1
    call fn3(v5)
    v6 = global_value.i64 gv2
    call fn4(v6)
    v7 = call fn5()
    v8 = iconst.i8 1
    brif v7, block4(v8), block3  ; v8 = 1

block3:
    v9 = call fn6()
    jump block4(v9)

block4(v10: i8):
    return
}

; name = "main"
function u0:4(i32, i64, i64) -> i32 system_v {
    sig0 = () system_v
    fn0 = colocated u0:3 sig0

block0(v0: i32, v1: i64, v2: i64):
    call fn0()
    v3 = iconst.i32 0
    return v3  ; v3 = 0
}
"#,
        compiler_code: 0,
        test_out: "BOTH `foo` and `bar`:
foo
bar

ONLY `bar`:
bar
",
        test_code: 0,
    ),
    "desugaring/E010": (
        compiler_out: "dsir = [
  Directive:Import {
    path: bim::boum @ 49..58 (fid = 0);
    alias: none;
  } @ 41..59 (fid = 0),

  Module {
    name: bim @ 61..70 (fid = 0);
    module: [];
    sym: Symbol {
      kind: module;
      name: bim @ 61..70 (fid = 0);
      realname: none;
      which: 0;
      path: orb::bim;
      typ: unknown;
      typeness: explicit;
      value: none;
    };
  },

  GlobalDef {
    name: a @ 72..73 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: Block {
      label: none;
      block: Block [
        Call {
          callee: bim::boum @ 83..92 (fid = 0);
          args: [];
        } @ 83..94 (fid = 0) @ 83..94 (fid = 0),

        b @ 100..101 (fid = 0) @ 100..101 (fid = 0),

        @last_expr: none,
      ] @ 77..104 (fid = 0);
    } @ 77..104 (fid = 0);
    sym: Symbol {
      kind: global;
      name: a @ 72..73 (fid = 0);
      realname: none;
      which: 0;
      path: orb::a;
      typ: unknown;
      typeness: implicit;
      value: none;
    };
  } @ 72..104 (fid = 0),
]
error[E010]: cannot find `bim::boum` in this scope
  ┌─ ./tests/desugaring/E010.lun:2:9
  │
2 │ #import bim::boum;
  │         ^^^^^^^^^

error[E010]: cannot find `bim::boum` in this scope
  ┌─ ./tests/desugaring/E010.lun:7:5
  │
7 │     bim::boum();
  │     ^^^^^^^^^

error[E010]: cannot find `b` in this scope
  ┌─ ./tests/desugaring/E010.lun:8:5
  │
8 │     b;
  │     ^

error: compilation of `E010` failed due to 3 errors and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "desugaring/E013": (
        compiler_out: "dsir = [
  GlobalDef {
    name: _ @ 54..55 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: integer 12 @ 59..61 (fid = 0);
    sym: Symbol {
      kind: global;
      name: _ @ 54..55 (fid = 0);
      realname: none;
      which: 0;
      path: orb::_;
      typ: unknown;
      typeness: implicit;
      value: none;
    };
  } @ 54..62 (fid = 0),

  GlobalDef {
    name: _ @ 64..65 (fid = 0);
    mutability: mut;
    typeexpr: none;
    value: integer 34 @ 69..71 (fid = 0);
    sym: Symbol {
      kind: global;
      name: _ @ 64..65 (fid = 0);
      realname: none;
      which: 0;
      path: orb::_;
      typ: unknown;
      typeness: implicit;
      value: none;
    };
  } @ 64..72 (fid = 0),

  GlobalDef {
    name: a @ 74..75 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: FunDefinition {
      args: [
        Arg {
          name: _ @ 83..84 (fid = 0);
          typeexpr: Symbol {
            kind: global;
            name: i8 @ none;
            realname: none;
            which: 0;
            path: ∅;
            typ: type;
            typeness: explicit;
            value: Type {
              type: i8;
            };
          } @ 86..88 (fid = 0);
          sym: Symbol {
            kind: argument;
            name: _ @ 83..84 (fid = 0);
            realname: none;
            which: 0;
            path: _;
            typ: unknown;
            typeness: explicit;
            value: none;
          };
        } @ 83..88 (fid = 0),
      ];
      rettypeexpr: none;
      body: Block [
        @last_expr: none,
      ] @ 90..92 (fid = 0);
    } @ 79..92 (fid = 0);
    sym: Symbol {
      kind: function;
      name: a @ 74..75 (fid = 0);
      realname: none;
      which: 0;
      path: orb::a;
      typ: unknown;
      typeness: explicit;
      value: none;
    };
  } @ 74..92 (fid = 0),
]
error[E013]: `_` is a reserved identifier
  ┌─ ./tests/desugaring/E013.lun:2:1
  │
2 │ _ :: 12;
  │ ^
  │
  = you can't use `_` as a symbol name

error[E013]: `_` is a reserved identifier
  ┌─ ./tests/desugaring/E013.lun:4:1
  │
4 │ _ := 34;
  │ ^
  │
  = you can't use `_` as a symbol name

error[E013]: `_` is a reserved identifier
  ┌─ ./tests/desugaring/E013.lun:6:10
  │
6 │ a :: fun(_: i8) {}
  │          ^
  │
  = you can't use `_` as a symbol name

error: compilation of `E013` failed due to 3 errors and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "desugaring/E014": (
        compiler_out: "dsir = [
  GlobalDef {
    name: a @ 48..49 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: Block {
      label: none;
      block: Block [
        BindingDef {
          name: b @ 59..60 (fid = 0);
          mutability: not;
          typeexpr: Symbol {
            kind: global;
            name: usz @ none;
            realname: none;
            which: 0;
            path: ∅;
            typ: type;
            typeness: explicit;
            value: Type {
              type: usz;
            };
          } @ 63..66 (fid = 0);
          value: _ @ 69..70 (fid = 0);
          sym: Symbol {
            kind: local;
            name: b @ 59..60 (fid = 0);
            realname: none;
            which: 0;
            path: b;
            typ: unknown;
            typeness: explicit;
            value: none;
          };
        } @ 59..70 (fid = 0),

        @last_expr: none,
      ] @ 53..73 (fid = 0);
    } @ 53..73 (fid = 0);
    sym: Symbol {
      kind: global;
      name: a @ 48..49 (fid = 0);
      realname: none;
      which: 0;
      path: orb::a;
      typ: unknown;
      typeness: implicit;
      value: none;
    };
  } @ 48..73 (fid = 0),
]
error[E014]: `_` can only be used in left hand side of assignment not in expressions
  ┌─ ./tests/desugaring/E014.lun:3:15
  │
3 │     b : usz = _;
  │               ^

error: compilation of `E014` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "desugaring/E019": (
        compiler_out: "dsir = [
  GlobalDef {
    name: a @ 50..51 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: integer 12 @ 55..57 (fid = 0);
    sym: Symbol {
      kind: global;
      name: a @ 50..51 (fid = 0);
      realname: none;
      which: 0;
      path: orb::a;
      typ: unknown;
      typeness: implicit;
      value: none;
    };
  } @ 50..58 (fid = 0),

  GlobalDef {
    name: a @ 59..60 (fid = 0);
    mutability: mut;
    typeexpr: none;
    value: integer 34 @ 64..66 (fid = 0);
    sym: Symbol {
      kind: global;
      name: a @ 59..60 (fid = 0);
      realname: none;
      which: 0;
      path: orb::a;
      typ: unknown;
      typeness: implicit;
      value: none;
    };
  } @ 59..67 (fid = 0),
]
error[E019]: the name `a` is defined multiple times
  ┌─ ./tests/desugaring/E019.lun:3:1
  │
2 │ a :: 12;
  │ - defined here for the first time
3 │ a := 34;
  │ ^ defined `a` a second time here

error: compilation of `E019` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "desugaring/E026": (
        compiler_out: "dsir = [
  Directive:Mod {
    name: peekaboo;
  } @ 48..62 (fid = 0),
]
error[E026]: file not found for module 'peekaboo'
  ┌─ ./tests/desugaring/E026.lun:2:1
  │
2 │ #mod peekaboo;
  │ ^^^^^^^^^^^^^^
  │
  = help: to create the module 'peekaboo', create the file at path './tests/desugaring/peekaboo.lun'

error: compilation of `E026` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "desugaring/bim": (
        compiler_out: "dsir = []
",
        compiler_code: 0,
        test_out: "",
        test_code: 0,
    ),
    "desugaring/forward_use": (
        compiler_out: "dsir = [
  GlobalDef {
    name: main @ 79..83 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: FunDefinition {
      args: [];
      rettypeexpr: none;
      body: Block [
        BindingDef {
          name: res @ 99..102 (fid = 0);
          mutability: not;
          typeexpr: none;
          value: Call {
            callee: Symbol {
              kind: function;
              name: add @ 133..136 (fid = 0);
              realname: none;
              which: 0;
              path: orb::add;
              typ: unknown;
              typeness: explicit;
              value: none;
            } @ 106..109 (fid = 0);
            args: [
              integer 1 @ 110..111 (fid = 0),

              integer 2 @ 113..114 (fid = 0),
            ];
          } @ 106..115 (fid = 0);
          sym: Symbol {
            kind: local;
            name: res @ 99..102 (fid = 0);
            realname: none;
            which: 0;
            path: res;
            typ: unknown;
            typeness: implicit;
            value: none;
          };
        } @ 99..115 (fid = 0),

        Binary {
          lhs: Underscore @ 121..122 (fid = 0);
          op: Assignment;
          rhs: Symbol {
            kind: local;
            name: res @ 99..102 (fid = 0);
            realname: none;
            which: 0;
            path: res;
            typ: unknown;
            typeness: implicit;
            value: none;
          } @ 125..128 (fid = 0);
        } @ 121..128 (fid = 0) @ 121..128 (fid = 0),

        @last_expr: none,
      ] @ 93..131 (fid = 0);
    } @ 87..131 (fid = 0);
    sym: Symbol {
      kind: function;
      name: main @ 79..83 (fid = 0);
      realname: none;
      which: 0;
      path: orb::main;
      typ: unknown;
      typeness: explicit;
      value: none;
    };
  } @ 79..131 (fid = 0),

  GlobalDef {
    name: add @ 133..136 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: FunDefinition {
      args: [
        Arg {
          name: a @ 144..145 (fid = 0);
          typeexpr: Symbol {
            kind: global;
            name: isz @ none;
            realname: none;
            which: 0;
            path: ∅;
            typ: type;
            typeness: explicit;
            value: Type {
              type: isz;
            };
          } @ 147..150 (fid = 0);
          sym: Symbol {
            kind: argument;
            name: a @ 144..145 (fid = 0);
            realname: none;
            which: 0;
            path: a;
            typ: unknown;
            typeness: explicit;
            value: none;
          };
        } @ 144..150 (fid = 0),

        Arg {
          name: b @ 152..153 (fid = 0);
          typeexpr: Symbol {
            kind: global;
            name: isz @ none;
            realname: none;
            which: 0;
            path: ∅;
            typ: type;
            typeness: explicit;
            value: Type {
              type: isz;
            };
          } @ 155..158 (fid = 0);
          sym: Symbol {
            kind: argument;
            name: b @ 152..153 (fid = 0);
            realname: none;
            which: 1;
            path: b;
            typ: unknown;
            typeness: explicit;
            value: none;
          };
        } @ 152..158 (fid = 0),
      ];
      rettypeexpr: Symbol {
        kind: global;
        name: isz @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: isz;
        };
      } @ 163..166 (fid = 0);
      body: Block [
        @last_expr: Binary {
          lhs: Symbol {
            kind: argument;
            name: a @ 144..145 (fid = 0);
            realname: none;
            which: 0;
            path: a;
            typ: unknown;
            typeness: explicit;
            value: none;
          } @ 173..174 (fid = 0);
          op: Add;
          rhs: Symbol {
            kind: argument;
            name: b @ 152..153 (fid = 0);
            realname: none;
            which: 1;
            path: b;
            typ: unknown;
            typeness: explicit;
            value: none;
          } @ 177..178 (fid = 0);
        } @ 173..178 (fid = 0),
      ] @ 167..180 (fid = 0);
    } @ 140..180 (fid = 0);
    sym: Symbol {
      kind: function;
      name: add @ 133..136 (fid = 0);
      realname: none;
      which: 0;
      path: orb::add;
      typ: unknown;
      typeness: explicit;
      value: none;
    };
  } @ 133..180 (fid = 0),
]
",
        compiler_code: 0,
        test_out: "",
        test_code: 0,
    ),
    "desugaring/global_def": (
        compiler_out: r#"dsir = [
  GlobalDef {
    name: main @ 19..23 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: FunDefinition {
      args: [];
      rettypeexpr: none;
      body: Block [
        @last_expr: none,
      ] @ 33..35 (fid = 0);
    } @ 27..35 (fid = 0);
    sym: Symbol {
      kind: function;
      name: main @ 19..23 (fid = 0);
      realname: none;
      which: 0;
      path: orb::main;
      typ: unknown;
      typeness: explicit;
      value: none;
    };
  } @ 19..35 (fid = 0),

  GlobalDef {
    name: avogadro @ 36..44 (fid = 0);
    mutability: not;
    typeexpr: Symbol {
      kind: global;
      name: f64 @ none;
      realname: none;
      which: 0;
      path: ∅;
      typ: type;
      typeness: explicit;
      value: Type {
        type: f64;
      };
    } @ 47..50 (fid = 0);
    value: float 6.0219999999999996e23 @ 53..61 (fid = 0);
    sym: Symbol {
      kind: global;
      name: avogadro @ 36..44 (fid = 0);
      realname: none;
      which: 0;
      path: orb::avogadro;
      typ: unknown;
      typeness: explicit;
      value: none;
    };
  } @ 36..62 (fid = 0),

  GlobalDef {
    name: hello @ 78..83 (fid = 0);
    mutability: mut;
    typeexpr: PointerType {
      mutability: not;
      typeexpr: Symbol {
        kind: global;
        name: str @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: str;
        };
      } @ 87..90 (fid = 0);
    } @ 86..90 (fid = 0);
    value: string "Hello" @ 93..100 (fid = 0);
    sym: Symbol {
      kind: global;
      name: hello @ 78..83 (fid = 0);
      realname: none;
      which: 0;
      path: orb::hello;
      typ: unknown;
      typeness: explicit;
      value: none;
    };
  } @ 78..101 (fid = 0),

  GlobalDef {
    name: globFloat @ 102..111 (fid = 0);
    mutability: mut;
    typeexpr: none;
    value: float 12.0 @ 115..119 (fid = 0);
    sym: Symbol {
      kind: global;
      name: globFloat @ 102..111 (fid = 0);
      realname: none;
      which: 0;
      path: orb::globFloat;
      typ: unknown;
      typeness: implicit;
      value: none;
    };
  } @ 102..120 (fid = 0),

  Module {
    name: nested @ 179..191 (fid = 0);
    module: [];
    sym: Symbol {
      kind: module;
      name: nested @ 179..191 (fid = 0);
      realname: none;
      which: 0;
      path: orb::nested;
      typ: unknown;
      typeness: explicit;
      value: none;
    };
  },
]
"#,
        compiler_code: 0,
        test_out: "",
        test_code: 0,
    ),
    "desugaring/lower_expr": (
        compiler_out: r#"dsir = [
  GlobalDef {
    name: main @ 11..15 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: FunDefinition {
      args: [];
      rettypeexpr: none;
      body: Block [
        Binary {
          lhs: Underscore @ 54..55 (fid = 0);
          op: Assignment;
          rhs: integer 12 @ 58..60 (fid = 0);
        } @ 54..60 (fid = 0) @ 54..60 (fid = 0),

        Binary {
          lhs: Underscore @ 87..88 (fid = 0);
          op: Assignment;
          rhs: boolean true @ 91..95 (fid = 0);
        } @ 87..95 (fid = 0) @ 87..95 (fid = 0),

        Binary {
          lhs: Underscore @ 101..102 (fid = 0);
          op: Assignment;
          rhs: boolean false @ 105..110 (fid = 0);
        } @ 101..110 (fid = 0) @ 101..110 (fid = 0),

        Binary {
          lhs: Underscore @ 139..140 (fid = 0);
          op: Assignment;
          rhs: string "Hello world!" @ 143..157 (fid = 0);
        } @ 139..157 (fid = 0) @ 139..157 (fid = 0),

        Binary {
          lhs: Underscore @ 184..185 (fid = 0);
          op: Assignment;
          rhs: char 'C' @ 188..191 (fid = 0);
        } @ 184..191 (fid = 0) @ 184..191 (fid = 0),

        Binary {
          lhs: Underscore @ 219..220 (fid = 0);
          op: Assignment;
          rhs: float 6.0219999999999996e23 @ 223..231 (fid = 0);
        } @ 219..231 (fid = 0) @ 219..231 (fid = 0),

        Binary {
          lhs: Underscore @ 284..285 (fid = 0);
          op: Assignment;
          rhs: Binary {
            lhs: integer 12 @ 289..291 (fid = 0);
            op: Add;
            rhs: integer 3 @ 294..295 (fid = 0);
          } @ 289..295 (fid = 0);
        } @ 284..296 (fid = 0) @ 284..296 (fid = 0),

        Binary {
          lhs: Underscore @ 321..322 (fid = 0);
          op: Assignment;
          rhs: Symbol {
            kind: function;
            name: main @ 11..15 (fid = 0);
            realname: none;
            which: 0;
            path: orb::main;
            typ: unknown;
            typeness: explicit;
            value: none;
          } @ 325..329 (fid = 0);
        } @ 321..329 (fid = 0) @ 321..329 (fid = 0),

        Binary {
          lhs: Underscore @ 353..354 (fid = 0);
          op: Assignment;
          rhs: Binary {
            lhs: integer 34 @ 357..359 (fid = 0);
            op: Add;
            rhs: integer 35 @ 362..364 (fid = 0);
          } @ 357..364 (fid = 0);
        } @ 353..364 (fid = 0) @ 353..364 (fid = 0),

        Binary {
          lhs: Underscore @ 387..388 (fid = 0);
          op: Assignment;
          rhs: Unary {
            op: Not;
            expr: boolean false @ 392..397 (fid = 0);
          } @ 391..397 (fid = 0);
        } @ 387..397 (fid = 0) @ 387..397 (fid = 0),

        Binary {
          lhs: Underscore @ 403..404 (fid = 0);
          op: Assignment;
          rhs: Unary {
            op: Negation;
            expr: float 12.0 @ 408..412 (fid = 0);
          } @ 407..412 (fid = 0);
        } @ 403..412 (fid = 0) @ 403..412 (fid = 0),

        Binary {
          lhs: Underscore @ 435..436 (fid = 0);
          op: Assignment;
          rhs: Call {
            callee: Symbol {
              kind: function;
              name: some_fun @ 1159..1167 (fid = 0);
              realname: none;
              which: 0;
              path: orb::some_fun;
              typ: unknown;
              typeness: explicit;
              value: none;
            } @ 439..447 (fid = 0);
            args: [];
          } @ 439..449 (fid = 0);
        } @ 435..449 (fid = 0) @ 435..449 (fid = 0),

        Binary {
          lhs: Underscore @ 455..456 (fid = 0);
          op: Assignment;
          rhs: Call {
            callee: Symbol {
              kind: function;
              name: some_fun @ 1159..1167 (fid = 0);
              realname: none;
              which: 0;
              path: orb::some_fun;
              typ: unknown;
              typeness: explicit;
              value: none;
            } @ 459..467 (fid = 0);
            args: [
              integer 1 @ 468..469 (fid = 0),
            ];
          } @ 459..470 (fid = 0);
        } @ 455..470 (fid = 0) @ 455..470 (fid = 0),

        Binary {
          lhs: Underscore @ 476..477 (fid = 0);
          op: Assignment;
          rhs: Call {
            callee: Symbol {
              kind: function;
              name: some_fun @ 1159..1167 (fid = 0);
              realname: none;
              which: 0;
              path: orb::some_fun;
              typ: unknown;
              typeness: explicit;
              value: none;
            } @ 480..488 (fid = 0);
            args: [
              integer 1 @ 489..490 (fid = 0),

              integer 2 @ 492..493 (fid = 0),
            ];
          } @ 480..494 (fid = 0);
        } @ 476..494 (fid = 0) @ 476..494 (fid = 0),

        Binary {
          lhs: Underscore @ 500..501 (fid = 0);
          op: Assignment;
          rhs: Call {
            callee: Symbol {
              kind: function;
              name: some_fun @ 1159..1167 (fid = 0);
              realname: none;
              which: 0;
              path: orb::some_fun;
              typ: unknown;
              typeness: explicit;
              value: none;
            } @ 504..512 (fid = 0);
            args: [
              integer 1 @ 513..514 (fid = 0),

              integer 2 @ 516..517 (fid = 0),
            ];
          } @ 504..519 (fid = 0);
        } @ 500..519 (fid = 0) @ 500..519 (fid = 0),

        If {
          cond: boolean true @ 539..543 (fid = 0);
          then_br: Block {
            label: none;
            block: Block [
              Call {
                callee: Symbol {
                  kind: function;
                  name: main @ 11..15 (fid = 0);
                  realname: none;
                  which: 0;
                  path: orb::main;
                  typ: unknown;
                  typeness: explicit;
                  value: none;
                } @ 554..558 (fid = 0);
                args: [];
              } @ 554..560 (fid = 0) @ 554..560 (fid = 0),

              @last_expr: none,
            ] @ 544..567 (fid = 0);
          } @ 536..596 (fid = 0);
          else_br: Block {
            label: none;
            block: Block [
              Call {
                callee: Symbol {
                  kind: function;
                  name: main @ 11..15 (fid = 0);
                  realname: none;
                  which: 0;
                  path: orb::main;
                  typ: unknown;
                  typeness: explicit;
                  value: none;
                } @ 583..587 (fid = 0);
                args: [];
              } @ 583..589 (fid = 0) @ 583..589 (fid = 0),

              @last_expr: none,
            ] @ 573..596 (fid = 0);
          } @ 573..596 (fid = 0);
        } @ 536..596 (fid = 0) @ 536..596 (fid = 0),

        Binary {
          lhs: Underscore @ 622..623 (fid = 0);
          op: Assignment;
          rhs: If {
            cond: Binary {
              lhs: integer 23 @ 629..631 (fid = 0);
              op: CompGT;
              rhs: integer 12 @ 634..636 (fid = 0);
            } @ 629..636 (fid = 0);
            then_br: boolean false @ 642..647 (fid = 0);
            else_br: boolean true @ 653..657 (fid = 0);
          } @ 626..657 (fid = 0);
        } @ 622..657 (fid = 0) @ 622..657 (fid = 0),

        Block {
          label: none;
          block: Block [
            Binary {
              lhs: Underscore @ 687..688 (fid = 0);
              op: Assignment;
              rhs: integer 2 @ 691..692 (fid = 0);
            } @ 687..692 (fid = 0) @ 687..692 (fid = 0),

            Binary {
              lhs: Underscore @ 702..703 (fid = 0);
              op: Assignment;
              rhs: Call {
                callee: Symbol {
                  kind: function;
                  name: main @ 11..15 (fid = 0);
                  realname: none;
                  which: 0;
                  path: orb::main;
                  typ: unknown;
                  typeness: explicit;
                  value: none;
                } @ 706..710 (fid = 0);
                args: [];
              } @ 706..712 (fid = 0);
            } @ 702..712 (fid = 0) @ 702..712 (fid = 0),

            @last_expr: none,
          ] @ 677..719 (fid = 0);
        } @ 677..719 (fid = 0) @ 677..719 (fid = 0),

        Loop {
          label: none;
          body: Block [
            Break {
              label: none;
              expr: none;
            } @ 777..782 (fid = 0) @ 777..782 (fid = 0),

            @last_expr: none,
          ] @ 751..789 (fid = 0);
        } @ 746..789 (fid = 0) @ 746..789 (fid = 0),

        Return {
          expr: Binary {
            lhs: integer 12 @ 816..818 (fid = 0);
            op: Mul;
            rhs: integer 8 @ 821..822 (fid = 0);
          } @ 816..822 (fid = 0);
        } @ 809..822 (fid = 0) @ 809..822 (fid = 0),

        Return {
          expr: none;
        } @ 828..834 (fid = 0) @ 828..834 (fid = 0),

        Continue @ 857..865 (fid = 0) @ 857..865 (fid = 0),

        Binary {
          lhs: Underscore @ 884..885 (fid = 0);
          op: Assignment;
          rhs: Null @ 888..892 (fid = 0);
        } @ 884..892 (fid = 0) @ 884..892 (fid = 0),

        Binary {
          lhs: Underscore @ 912..913 (fid = 0);
          op: Assignment;
          rhs: Unary {
            op: Dereference;
            expr: Symbol {
              kind: global;
              name: some_pointer @ 1180..1192 (fid = 0);
              realname: none;
              which: 0;
              path: orb::some_pointer;
              typ: unknown;
              typeness: implicit;
              value: none;
            } @ 916..928 (fid = 0);
          } @ 916..930 (fid = 0);
        } @ 912..930 (fid = 0) @ 912..930 (fid = 0),

        Binary {
          lhs: Underscore @ 972..973 (fid = 0);
          op: Assignment;
          rhs: PointerType {
            mutability: not;
            typeexpr: Symbol {
              kind: global;
              name: u32 @ none;
              realname: none;
              which: 0;
              path: ∅;
              typ: type;
              typeness: explicit;
              value: Type {
                type: u32;
              };
            } @ 977..980 (fid = 0);
          } @ 976..980 (fid = 0);
        } @ 972..980 (fid = 0) @ 972..980 (fid = 0),

        Binary {
          lhs: Underscore @ 986..987 (fid = 0);
          op: Assignment;
          rhs: PointerType {
            mutability: mut;
            typeexpr: Symbol {
              kind: global;
              name: u32 @ none;
              realname: none;
              which: 0;
              path: ∅;
              typ: type;
              typeness: explicit;
              value: Type {
                type: u32;
              };
            } @ 995..998 (fid = 0);
          } @ 990..998 (fid = 0);
        } @ 986..998 (fid = 0) @ 986..998 (fid = 0),

        Binary {
          lhs: Underscore @ 1034..1035 (fid = 0);
          op: Assignment;
          rhs: FunPtrType {
            args: [];
            ret: none;
          } @ 1038..1044 (fid = 0);
        } @ 1034..1044 (fid = 0) @ 1034..1044 (fid = 0),

        Binary {
          lhs: Underscore @ 1050..1051 (fid = 0);
          op: Assignment;
          rhs: FunPtrType {
            args: [
              Symbol {
                kind: global;
                name: usz @ none;
                realname: none;
                which: 0;
                path: ∅;
                typ: type;
                typeness: explicit;
                value: Type {
                  type: usz;
                };
              } @ 1059..1062 (fid = 0),

              Symbol {
                kind: global;
                name: bool @ none;
                realname: none;
                which: 0;
                path: ∅;
                typ: type;
                typeness: explicit;
                value: Type {
                  type: bool;
                };
              } @ 1064..1068 (fid = 0),
            ];
            ret: Symbol {
              kind: global;
              name: usz @ none;
              realname: none;
              which: 0;
              path: ∅;
              typ: type;
              typeness: explicit;
              value: Type {
                type: usz;
              };
            } @ 1073..1076 (fid = 0);
          } @ 1054..1076 (fid = 0);
        } @ 1050..1076 (fid = 0) @ 1050..1076 (fid = 0),

        Binary {
          lhs: Underscore @ 1082..1083 (fid = 0);
          op: Assignment;
          rhs: FunPtrType {
            args: [
              Symbol {
                kind: global;
                name: usz @ none;
                realname: none;
                which: 0;
                path: ∅;
                typ: type;
                typeness: explicit;
                value: Type {
                  type: usz;
                };
              } @ 1091..1094 (fid = 0),
            ];
            ret: Symbol {
              kind: global;
              name: usz @ none;
              realname: none;
              which: 0;
              path: ∅;
              typ: type;
              typeness: explicit;
              value: Type {
                type: usz;
              };
            } @ 1100..1103 (fid = 0);
          } @ 1086..1103 (fid = 0);
        } @ 1082..1103 (fid = 0) @ 1082..1103 (fid = 0),

        @last_expr: none,
      ] @ 25..1106 (fid = 0);
    } @ 19..1106 (fid = 0);
    sym: Symbol {
      kind: function;
      name: main @ 11..15 (fid = 0);
      realname: none;
      which: 0;
      path: orb::main;
      typ: unknown;
      typeness: explicit;
      value: none;
    };
  } @ 11..1106 (fid = 0),

  GlobalDef {
    name: some_fun @ 1159..1167 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: FunDefinition {
      args: [];
      rettypeexpr: none;
      body: Block [
        @last_expr: none,
      ] @ 1177..1179 (fid = 0);
    } @ 1171..1179 (fid = 0);
    sym: Symbol {
      kind: function;
      name: some_fun @ 1159..1167 (fid = 0);
      realname: none;
      which: 0;
      path: orb::some_fun;
      typ: unknown;
      typeness: explicit;
      value: none;
    };
  } @ 1159..1179 (fid = 0),

  GlobalDef {
    name: some_pointer @ 1180..1192 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: Borrow {
      mutability: not;
      expr: integer 12 @ 1197..1199 (fid = 0);
    } @ 1196..1199 (fid = 0);
    sym: Symbol {
      kind: global;
      name: some_pointer @ 1180..1192 (fid = 0);
      realname: none;
      which: 0;
      path: orb::some_pointer;
      typ: unknown;
      typeness: implicit;
      value: none;
    };
  } @ 1180..1200 (fid = 0),
]
"#,
        compiler_code: 0,
        test_out: "",
        test_code: 0,
    ),
    "desugaring/my_module": (
        compiler_out: r#"dsir = [
  Module {
    name: global_def @ 61..77 (fid = 0);
    module: [
      GlobalDef {
        name: main @ 19..23 (fid = 1);
        mutability: not;
        typeexpr: none;
        value: FunDefinition {
          args: [];
          rettypeexpr: none;
          body: Block [
            @last_expr: none,
          ] @ 33..35 (fid = 1);
        } @ 27..35 (fid = 1);
        sym: Symbol {
          kind: function;
          name: main @ 19..23 (fid = 1);
          realname: none;
          which: 0;
          path: orb::global_def::main;
          typ: unknown;
          typeness: explicit;
          value: none;
        };
      } @ 19..35 (fid = 1),

      GlobalDef {
        name: avogadro @ 36..44 (fid = 1);
        mutability: not;
        typeexpr: Symbol {
          kind: global;
          name: f64 @ none;
          realname: none;
          which: 0;
          path: ∅;
          typ: type;
          typeness: explicit;
          value: Type {
            type: f64;
          };
        } @ 47..50 (fid = 1);
        value: float 6.0219999999999996e23 @ 53..61 (fid = 1);
        sym: Symbol {
          kind: global;
          name: avogadro @ 36..44 (fid = 1);
          realname: none;
          which: 0;
          path: orb::global_def::avogadro;
          typ: unknown;
          typeness: explicit;
          value: none;
        };
      } @ 36..62 (fid = 1),

      GlobalDef {
        name: hello @ 78..83 (fid = 1);
        mutability: mut;
        typeexpr: PointerType {
          mutability: not;
          typeexpr: Symbol {
            kind: global;
            name: str @ none;
            realname: none;
            which: 0;
            path: ∅;
            typ: type;
            typeness: explicit;
            value: Type {
              type: str;
            };
          } @ 87..90 (fid = 1);
        } @ 86..90 (fid = 1);
        value: string "Hello" @ 93..100 (fid = 1);
        sym: Symbol {
          kind: global;
          name: hello @ 78..83 (fid = 1);
          realname: none;
          which: 0;
          path: orb::global_def::hello;
          typ: unknown;
          typeness: explicit;
          value: none;
        };
      } @ 78..101 (fid = 1),

      GlobalDef {
        name: globFloat @ 102..111 (fid = 1);
        mutability: mut;
        typeexpr: none;
        value: float 12.0 @ 115..119 (fid = 1);
        sym: Symbol {
          kind: global;
          name: globFloat @ 102..111 (fid = 1);
          realname: none;
          which: 0;
          path: orb::global_def::globFloat;
          typ: unknown;
          typeness: implicit;
          value: none;
        };
      } @ 102..120 (fid = 1),

      Module {
        name: nested @ 179..191 (fid = 1);
        module: [
          GlobalDef {
            name: add @ 65..68 (fid = 2);
            mutability: not;
            typeexpr: none;
            value: FunDefinition {
              args: [
                Arg {
                  name: a @ 76..77 (fid = 2);
                  typeexpr: Symbol {
                    kind: global;
                    name: usz @ none;
                    realname: none;
                    which: 0;
                    path: ∅;
                    typ: type;
                    typeness: explicit;
                    value: Type {
                      type: usz;
                    };
                  } @ 79..82 (fid = 2);
                  sym: Symbol {
                    kind: argument;
                    name: a @ 76..77 (fid = 2);
                    realname: none;
                    which: 0;
                    path: a;
                    typ: unknown;
                    typeness: explicit;
                    value: none;
                  };
                } @ 76..82 (fid = 2),

                Arg {
                  name: b @ 84..85 (fid = 2);
                  typeexpr: Symbol {
                    kind: global;
                    name: usz @ none;
                    realname: none;
                    which: 0;
                    path: ∅;
                    typ: type;
                    typeness: explicit;
                    value: Type {
                      type: usz;
                    };
                  } @ 87..90 (fid = 2);
                  sym: Symbol {
                    kind: argument;
                    name: b @ 84..85 (fid = 2);
                    realname: none;
                    which: 1;
                    path: b;
                    typ: unknown;
                    typeness: explicit;
                    value: none;
                  };
                } @ 84..90 (fid = 2),
              ];
              rettypeexpr: Symbol {
                kind: global;
                name: usz @ none;
                realname: none;
                which: 0;
                path: ∅;
                typ: type;
                typeness: explicit;
                value: Type {
                  type: usz;
                };
              } @ 95..98 (fid = 2);
              body: Block [
                @last_expr: Binary {
                  lhs: Symbol {
                    kind: argument;
                    name: a @ 76..77 (fid = 2);
                    realname: none;
                    which: 0;
                    path: a;
                    typ: unknown;
                    typeness: explicit;
                    value: none;
                  } @ 105..106 (fid = 2);
                  op: Add;
                  rhs: Symbol {
                    kind: argument;
                    name: b @ 84..85 (fid = 2);
                    realname: none;
                    which: 1;
                    path: b;
                    typ: unknown;
                    typeness: explicit;
                    value: none;
                  } @ 109..110 (fid = 2);
                } @ 105..110 (fid = 2),
              ] @ 99..112 (fid = 2);
            } @ 72..112 (fid = 2);
            sym: Symbol {
              kind: function;
              name: add @ 65..68 (fid = 2);
              realname: none;
              which: 0;
              path: orb::global_def::nested::add;
              typ: unknown;
              typeness: explicit;
              value: none;
            };
          } @ 65..112 (fid = 2),
        ];
        sym: Symbol {
          kind: module;
          name: nested @ 179..191 (fid = 1);
          realname: none;
          which: 0;
          path: orb::global_def::nested;
          typ: unknown;
          typeness: explicit;
          value: none;
        };
      },
    ];
    sym: Symbol {
      kind: module;
      name: global_def @ 61..77 (fid = 0);
      realname: none;
      which: 0;
      path: orb::global_def;
      typ: unknown;
      typeness: explicit;
      value: none;
    };
  },
]
"#,
        compiler_code: 0,
        test_out: "",
        test_code: 0,
    ),
    "desugaring/nested": (
        compiler_out: "dsir = []
",
        compiler_code: 0,
        test_out: "",
        test_code: 0,
    ),
    "desugaring/predicate_loop": (
        compiler_out: r#"dsir = [
  GlobalDef {
    name: println @ 138..145 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: FunDefinition {
      args: [];
      rettypeexpr: none;
      body: Block [
        @last_expr: none,
      ] @ 155..157 (fid = 0);
    } @ 149..157 (fid = 0);
    sym: Symbol {
      kind: function;
      name: println @ 138..145 (fid = 0);
      realname: none;
      which: 0;
      path: orb::println;
      typ: unknown;
      typeness: explicit;
      value: none;
    };
  } @ 138..157 (fid = 0),

  GlobalDef {
    name: main @ 159..163 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: FunDefinition {
      args: [];
      rettypeexpr: none;
      body: Block [
        BindingDef {
          name: i @ 179..182 (fid = 0);
          mutability: mut;
          typeexpr: none;
          value: integer 0 @ 188..189 (fid = 0);
          sym: Symbol {
            kind: local;
            name: i @ 179..182 (fid = 0);
            realname: none;
            which: 0;
            path: i;
            typ: unknown;
            typeness: implicit;
            value: none;
          };
        } @ 179..189 (fid = 0),

        Loop {
          label: none;
          body: Block [
            If {
              cond: Unary {
                op: Not;
                expr: Binary {
                  lhs: Symbol {
                    kind: local;
                    name: i @ 179..182 (fid = 0);
                    realname: none;
                    which: 0;
                    path: i;
                    typ: unknown;
                    typeness: implicit;
                    value: none;
                  } @ 202..203 (fid = 0);
                  op: CompLT;
                  rhs: integer 10 @ 206..208 (fid = 0);
                } @ 202..208 (fid = 0);
              } @ none;
              then_br: Break {
                label: none;
                expr: none;
              } @ none;
              else_br: none;
            } @ none @ none,

            Block {
              label: none;
              block: Block [
                Call {
                  callee: Symbol {
                    kind: function;
                    name: println @ 138..145 (fid = 0);
                    realname: none;
                    which: 0;
                    path: orb::println;
                    typ: unknown;
                    typeness: explicit;
                    value: none;
                  } @ 219..226 (fid = 0);
                  args: [
                    string "i = {}" @ 227..235 (fid = 0),

                    Symbol {
                      kind: local;
                      name: i @ 179..182 (fid = 0);
                      realname: none;
                      which: 0;
                      path: i;
                      typ: unknown;
                      typeness: implicit;
                      value: none;
                    } @ 237..238 (fid = 0),
                  ];
                } @ 219..239 (fid = 0) @ 219..239 (fid = 0),

                @last_expr: none,
              ] @ 209..246 (fid = 0);
            } @ none @ none,

            @last_expr: none,
          ] @ 209..246 (fid = 0);
        } @ 196..246 (fid = 0) @ 196..246 (fid = 0),

        BindingDef {
          name: j @ 252..255 (fid = 0);
          mutability: mut;
          typeexpr: none;
          value: integer 3 @ 261..262 (fid = 0);
          sym: Symbol {
            kind: local;
            name: j @ 252..255 (fid = 0);
            realname: none;
            which: 1;
            path: j;
            typ: unknown;
            typeness: implicit;
            value: none;
          };
        } @ 252..262 (fid = 0),

        @last_expr: Loop {
          label: label @ 269..274 (fid = 0);
          body: Block [
            If {
              cond: Unary {
                op: Not;
                expr: Binary {
                  lhs: Binary {
                    lhs: Symbol {
                      kind: local;
                      name: j @ 252..255 (fid = 0);
                      realname: none;
                      which: 1;
                      path: j;
                      typ: unknown;
                      typeness: implicit;
                      value: none;
                    } @ 282..283 (fid = 0);
                    op: CompLT;
                    rhs: integer 10 @ 286..288 (fid = 0);
                  } @ 282..288 (fid = 0);
                  op: LogicalAnd;
                  rhs: Binary {
                    lhs: Symbol {
                      kind: local;
                      name: j @ 252..255 (fid = 0);
                      realname: none;
                      which: 1;
                      path: j;
                      typ: unknown;
                      typeness: implicit;
                      value: none;
                    } @ 292..293 (fid = 0);
                    op: CompGT;
                    rhs: integer 2 @ 296..297 (fid = 0);
                  } @ 292..297 (fid = 0);
                } @ 282..297 (fid = 0);
              } @ none;
              then_br: Break {
                label: label;
                expr: none;
              } @ none;
              else_br: none;
            } @ none @ none,

            Block {
              label: none;
              block: Block [
                Call {
                  callee: Symbol {
                    kind: function;
                    name: println @ 138..145 (fid = 0);
                    realname: none;
                    which: 0;
                    path: orb::println;
                    typ: unknown;
                    typeness: explicit;
                    value: none;
                  } @ 308..315 (fid = 0);
                  args: [
                    string "j = {}" @ 316..324 (fid = 0),

                    Symbol {
                      kind: local;
                      name: j @ 252..255 (fid = 0);
                      realname: none;
                      which: 1;
                      path: j;
                      typ: unknown;
                      typeness: implicit;
                      value: none;
                    } @ 326..327 (fid = 0),
                  ];
                } @ 308..328 (fid = 0) @ 308..328 (fid = 0),

                @last_expr: none,
              ] @ 298..335 (fid = 0);
            } @ none @ none,

            @last_expr: none,
          ] @ 298..335 (fid = 0);
        } @ 269..335 (fid = 0),
      ] @ 173..337 (fid = 0);
    } @ 167..337 (fid = 0);
    sym: Symbol {
      kind: function;
      name: main @ 159..163 (fid = 0);
      realname: none;
      which: 0;
      path: orb::main;
      typ: unknown;
      typeness: explicit;
      value: none;
    };
  } @ 159..337 (fid = 0),
]
"#,
        compiler_code: 0,
        test_out: "",
        test_code: 0,
    ),
    "desugaring/shadowing": (
        compiler_out: "dsir = [
  GlobalDef {
    name: a @ 0..1 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: integer 1 @ 5..6 (fid = 0);
    sym: Symbol {
      kind: global;
      name: a @ 0..1 (fid = 0);
      realname: none;
      which: 0;
      path: orb::a;
      typ: unknown;
      typeness: implicit;
      value: none;
    };
  } @ 0..7 (fid = 0),

  GlobalDef {
    name: b @ 9..10 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: FunDefinition {
      args: [
        Arg {
          name: a @ 18..19 (fid = 0);
          typeexpr: Symbol {
            kind: global;
            name: void @ none;
            realname: none;
            which: 0;
            path: ∅;
            typ: type;
            typeness: explicit;
            value: Type {
              type: void;
            };
          } @ 21..25 (fid = 0);
          sym: Symbol {
            kind: argument;
            name: a @ 18..19 (fid = 0);
            realname: none;
            which: 0;
            path: a;
            typ: unknown;
            typeness: explicit;
            value: none;
          };
        } @ 18..25 (fid = 0),
      ];
      rettypeexpr: none;
      body: Block [
        BindingDef {
          name: a @ 33..34 (fid = 0);
          mutability: not;
          typeexpr: none;
          value: Block {
            label: none;
            block: Block [
              @last_expr: none,
            ] @ 38..40 (fid = 0);
          } @ 38..40 (fid = 0);
          sym: Symbol {
            kind: local;
            name: a @ 33..34 (fid = 0);
            realname: none;
            which: 0;
            path: a;
            typ: unknown;
            typeness: implicit;
            value: none;
          };
        } @ 33..40 (fid = 0),

        @last_expr: none,
      ] @ 27..43 (fid = 0);
    } @ 14..43 (fid = 0);
    sym: Symbol {
      kind: function;
      name: b @ 9..10 (fid = 0);
      realname: none;
      which: 0;
      path: orb::b;
      typ: unknown;
      typeness: explicit;
      value: none;
    };
  } @ 9..43 (fid = 0),

  GlobalDef {
    name: c @ 45..46 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: FunDefinition {
      args: [];
      rettypeexpr: none;
      body: Block [
        BindingDef {
          name: d @ 62..63 (fid = 0);
          mutability: not;
          typeexpr: none;
          value: integer 1 @ 67..68 (fid = 0);
          sym: Symbol {
            kind: local;
            name: d @ 62..63 (fid = 0);
            realname: none;
            which: 0;
            path: d;
            typ: unknown;
            typeness: implicit;
            value: none;
          };
        } @ 62..68 (fid = 0),

        BindingDef {
          name: d @ 74..75 (fid = 0);
          mutability: not;
          typeexpr: none;
          value: integer 2 @ 79..80 (fid = 0);
          sym: Symbol {
            kind: local;
            name: d @ 74..75 (fid = 0);
            realname: none;
            which: 1;
            path: d;
            typ: unknown;
            typeness: implicit;
            value: none;
          };
        } @ 74..80 (fid = 0),

        @last_expr: none,
      ] @ 56..83 (fid = 0);
    } @ 50..83 (fid = 0);
    sym: Symbol {
      kind: function;
      name: c @ 45..46 (fid = 0);
      realname: none;
      which: 0;
      path: orb::c;
      typ: unknown;
      typeness: explicit;
      value: none;
    };
  } @ 45..83 (fid = 0),
]
",
        compiler_code: 0,
        test_out: "",
        test_code: 0,
    ),
    "lexer/E001": (
        compiler_out: "tokenstream = {
  {
    tt: end of file;
    loc: 49..50 (fid = 0);
    lexeme: N/A;
  },
}
error[E001]: unknown start of token: 🌒
  ┌─ ./tests/lexer/E001.lun:2:1
  │
2 │ 🌒
  │ ^^

error[E001]: unknown start of token: $
  ┌─ ./tests/lexer/E001.lun:3:1
  │
3 │ $
  │ ^

error[E001]: unknown start of token: @
  ┌─ ./tests/lexer/E001.lun:4:1
  │
4 │ @
  │ ^

error[E001]: unknown start of token: ?
  ┌─ ./tests/lexer/E001.lun:5:1
  │
5 │ ?
  │ ^

error: compilation of `E001` failed due to 4 errors and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "lexer/E002": (
        compiler_out: r#"tokenstream = {
  {
    tt: string "\u{13}";
    loc: 45..51 (fid = 0);
    lexeme: `"\xFZ"`;
  },
  {
    tt: end of file;
    loc: 52..53 (fid = 0);
    lexeme: N/A;
  },
}
error[E002]: invalid digit in integer literal: Z
  ┌─ ./tests/lexer/E002.lun:3:5
  │
3 │ "\xFZ"
  │    -^
  │    │ 
  │    in this integer

error: compilation of `E002` failed due to 1 error and 0 warnings

"#,
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "lexer/E003": (
        compiler_out: "tokenstream = {
  {
    tt: integer 34028236692093846346337460743176821145;
    loc: 49..100 (fid = 0);
    lexeme: `340_282_366_920_938_463_463_374_607_431_768_211_456`;
  },
  {
    tt: integer 21267647932558653966460912964485513216;
    loc: 101..136 (fid = 0);
    lexeme: `0x100000000000000000000000000000000`;
  },
  {
    tt: integer 170141183460469231731687303715884105728;
    loc: 137..268 (fid = 0);
    lexeme: `0b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000`;
  },
  {
    tt: integer 42535295865117307932921825928971026432;
    loc: 269..314 (fid = 0);
    lexeme: `0o4000000000000000000000000000000000000000000`;
  },
  {
    tt: end of file;
    loc: 315..316 (fid = 0);
    lexeme: N/A;
  },
}
error[E003]: integer literal is too large
  ┌─ ./tests/lexer/E003.lun:3:1
  │
3 │ 340_282_366_920_938_463_463_374_607_431_768_211_456
  │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  │
  = integer exceeds the limit of `340282366920938463463374607431768211455`

error[E003]: integer literal is too large
  ┌─ ./tests/lexer/E003.lun:4:1
  │
4 │ 0x100000000000000000000000000000000
  │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  │
  = integer exceeds the limit of `340282366920938463463374607431768211455`

error[E003]: integer literal is too large
  ┌─ ./tests/lexer/E003.lun:5:1
  │
5 │ 0b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  │
  = integer exceeds the limit of `340282366920938463463374607431768211455`

error[E003]: integer literal is too large
  ┌─ ./tests/lexer/E003.lun:6:1
  │
6 │ 0o4000000000000000000000000000000000000000000
  │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  │
  = integer exceeds the limit of `340282366920938463463374607431768211455`

error: compilation of `E003` failed due to 4 errors and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "lexer/E004": (
        compiler_out: r#"tokenstream = {
  {
    tt: string "starting but never finishing this string literal...\n";
    loc: 51..104 (fid = 0);
    lexeme: `"starting but never finishing this string literal...
`;
  },
  {
    tt: end of file;
    loc: 104..105 (fid = 0);
    lexeme: N/A;
  },
}
error[E004]: unterminated string literal
  ┌─ ./tests/lexer/E004.lun:2:1
  │  
2 │ ╭ "starting but never finishing this string literal...
3 │ │ 
  │ ╰^

error: compilation of `E004` failed due to 1 error and 0 warnings

"#,
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "lexer/E005": (
        compiler_out: r#"tokenstream = {
  {
    tt: char '\0';
    loc: 48..52 (fid = 0);
    lexeme: `'\z'`;
  },
  {
    tt: string "\0";
    loc: 53..57 (fid = 0);
    lexeme: `"\$"`;
  },
  {
    tt: end of file;
    loc: 58..59 (fid = 0);
    lexeme: N/A;
  },
}
error[E005]: unknown character escape: z
  ┌─ ./tests/lexer/E005.lun:2:1
  │
2 │ '\z'
  │ ^^^

error[E005]: unknown character escape: $
  ┌─ ./tests/lexer/E005.lun:3:1
  │
3 │ "\$"
  │ ^^^

error: compilation of `E005` failed due to 2 errors and 0 warnings

"#,
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "lexer/E020": (
        compiler_out: r#"tokenstream = {
  {
    tt: float 57005.745834350586;
    loc: 46..57 (fid = 0);
    lexeme: `0xDEAD.BEEF`;
  },
  {
    tt: end of file;
    loc: 58..59 (fid = 0);
    lexeme: N/A;
  },
}
error[E020]: expected exponent part of hexadecimal floating point literal, but found '\n'
  ┌─ ./tests/lexer/E020.lun:2:12
  │  
2 │   0xDEAD.BEEF
  │   -----------
  │ ╭───────────^
3 │ │ 
  │ ╰^

error: compilation of `E020` failed due to 1 error and 0 warnings

"#,
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "lexer/E021": (
        compiler_out: "tokenstream = {
  {
    tt: integer 0;
    loc: 47..49 (fid = 0);
    lexeme: `0o`;
  },
  {
    tt: integer 0;
    loc: 50..52 (fid = 0);
    lexeme: `0b`;
  },
  {
    tt: integer 0;
    loc: 53..55 (fid = 0);
    lexeme: `0x`;
  },
  {
    tt: end of file;
    loc: 56..57 (fid = 0);
    lexeme: N/A;
  },
}
error[E021]: no digits found after the base
  ┌─ ./tests/lexer/E021.lun:2:1
  │
2 │ 0o
  │ ^^

error[E021]: no digits found after the base
  ┌─ ./tests/lexer/E021.lun:3:1
  │
3 │ 0b
  │ ^^

error[E021]: no digits found after the base
  ┌─ ./tests/lexer/E021.lun:4:1
  │
4 │ 0x
  │ ^^

error: compilation of `E021` failed due to 3 errors and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "lexer/E022": (
        compiler_out: r#"tokenstream = {
  {
    tt: char 'a';
    loc: 56..60 (fid = 0);
    lexeme: `'aa'`;
  },
  {
    tt: end of file;
    loc: 61..62 (fid = 0);
    lexeme: N/A;
  },
}
error[E022]: too many characters in character literal, can only contain one codepoint
  ┌─ ./tests/lexer/E022.lun:2:1
  │
2 │ 'aa'
  │ ^^^^
  │
  = if you want to write a string literal use double quotes: "

error: compilation of `E022` failed due to 1 error and 0 warnings

"#,
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "lexer/E023": (
        compiler_out: r#"tokenstream = {
  {
    tt: char '\0';
    loc: 42..44 (fid = 0);
    lexeme: `''`;
  },
  {
    tt: end of file;
    loc: 45..46 (fid = 0);
    lexeme: N/A;
  },
}
error[E023]: empty character literal
  ┌─ ./tests/lexer/E023.lun:2:1
  │
2 │ ''
  │ ^^ expected one codepoint found zero

error: compilation of `E023` failed due to 1 error and 0 warnings

"#,
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "lexer/E024": (
        compiler_out: r#"tokenstream = {
  {
    tt: char '\0';
    loc: 44..48 (fid = 0);
    lexeme: `'\x'`;
  },
  {
    tt: string "\0";
    loc: 49..53 (fid = 0);
    lexeme: `"\x"`;
  },
  {
    tt: end of file;
    loc: 54..55 (fid = 0);
    lexeme: N/A;
  },
}
error[E024]: not enough hexadecimal digits in escape sequence
  ┌─ ./tests/lexer/E024.lun:2:1
  │
2 │ '\x'
  │ ^^^^

error[E024]: not enough hexadecimal digits in escape sequence
  ┌─ ./tests/lexer/E024.lun:3:1
  │
3 │ "\x"
  │ ^^^^

error: compilation of `E024` failed due to 2 errors and 0 warnings

"#,
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "lexer/E025": (
        compiler_out: r#"tokenstream = {
  {
    tt: char 'ÿ';
    loc: 73..80 (fid = 0);
    lexeme: `'\uFF}'`;
  },
  {
    tt: string "ÿ";
    loc: 81..88 (fid = 0);
    lexeme: `"\uFF}"`;
  },
  {
    tt: char '\0';
    loc: 107..113 (fid = 0);
    lexeme: `'\u{}'`;
  },
  {
    tt: string "\0";
    loc: 114..120 (fid = 0);
    lexeme: `"\u{}"`;
  },
  {
    tt: char '\0';
    loc: 141..180 (fid = 0);
    lexeme: `'\u{100000000000000000000000000000000}'`;
  },
  {
    tt: string "\0";
    loc: 181..220 (fid = 0);
    lexeme: `"\u{100000000000000000000000000000000}"`;
  },
  {
    tt: char '\u{f}';
    loc: 248..254 (fid = 0);
    lexeme: `'\u{F'`;
  },
  {
    tt: string "\u{f}";
    loc: 255..261 (fid = 0);
    lexeme: `"\u{F"`;
  },
  {
    tt: char '\0';
    loc: 290..300 (fid = 0);
    lexeme: `'\u{D800}'`;
  },
  {
    tt: char '\0';
    loc: 301..311 (fid = 0);
    lexeme: `'\u{D900}'`;
  },
  {
    tt: char '\0';
    loc: 312..322 (fid = 0);
    lexeme: `'\u{DFFF}'`;
  },
  {
    tt: string "\0";
    loc: 323..333 (fid = 0);
    lexeme: `"\u{D800}"`;
  },
  {
    tt: string "\0";
    loc: 334..344 (fid = 0);
    lexeme: `"\u{D8AB}"`;
  },
  {
    tt: string "\0";
    loc: 345..355 (fid = 0);
    lexeme: `"\u{DFFF}"`;
  },
  {
    tt: end of file;
    loc: 356..357 (fid = 0);
    lexeme: N/A;
  },
}
error[E025]: invalid unicode escape
  ┌─ ./tests/lexer/E025.lun:4:4
  │
4 │ '\uFF}'
  │    ^ expected '{' after '\u'

error[E025]: invalid unicode escape
  ┌─ ./tests/lexer/E025.lun:5:4
  │
5 │ "\uFF}"
  │    ^ expected '{' after '\u'

error[E025]: invalid unicode escape
  ┌─ ./tests/lexer/E025.lun:8:1
  │
8 │ '\u{}'
  │ ^^^^^ this escape must have at least one hex digit

error[E025]: invalid unicode escape
  ┌─ ./tests/lexer/E025.lun:9:1
  │
9 │ "\u{}"
  │ ^^^^^ this escape must have at least one hex digit

error[E025]: invalid unicode escape
   ┌─ ./tests/lexer/E025.lun:12:1
   │
12 │ '\u{100000000000000000000000000000000}'
   │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ this hex number doesn't fit in 32 bits

error[E025]: invalid unicode escape
   ┌─ ./tests/lexer/E025.lun:13:1
   │
13 │ "\u{100000000000000000000000000000000}"
   │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ this hex number doesn't fit in 32 bits

error[E025]: invalid unicode escape
   ┌─ ./tests/lexer/E025.lun:16:6
   │
16 │ '\u{F'
   │      ^ expected '}' at the end of the unicode escape

error[E025]: invalid unicode escape
   ┌─ ./tests/lexer/E025.lun:17:6
   │
17 │ "\u{F"
   │      ^ expected '}' at the end of the unicode escape

error[E025]: invalid unicode escape
   ┌─ ./tests/lexer/E025.lun:20:1
   │
20 │ '\u{D800}'
   │ ^^^^^^^^^ unicode escape must not be a surrogate

error[E025]: invalid unicode escape
   ┌─ ./tests/lexer/E025.lun:21:1
   │
21 │ '\u{D900}'
   │ ^^^^^^^^^ unicode escape must not be a surrogate

error[E025]: invalid unicode escape
   ┌─ ./tests/lexer/E025.lun:22:1
   │
22 │ '\u{DFFF}'
   │ ^^^^^^^^^ unicode escape must not be a surrogate

error[E025]: invalid unicode escape
   ┌─ ./tests/lexer/E025.lun:23:1
   │
23 │ "\u{D800}"
   │ ^^^^^^^^^ unicode escape must not be a surrogate

error[E025]: invalid unicode escape
   ┌─ ./tests/lexer/E025.lun:24:1
   │
24 │ "\u{D8AB}"
   │ ^^^^^^^^^ unicode escape must not be a surrogate

error[E025]: invalid unicode escape
   ┌─ ./tests/lexer/E025.lun:25:1
   │
25 │ "\u{DFFF}"
   │ ^^^^^^^^^ unicode escape must not be a surrogate

error: compilation of `E025` failed due to 14 errors and 0 warnings

"#,
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "lexer/char_literal": (
        compiler_out: r#"tokenstream = {
  {
    tt: char 'C';
    loc: 0..3 (fid = 0);
    lexeme: `'C'`;
  },
  {
    tt: char '\0';
    loc: 4..8 (fid = 0);
    lexeme: `'\0'`;
  },
  {
    tt: char '\n';
    loc: 9..13 (fid = 0);
    lexeme: `'\n'`;
  },
  {
    tt: char '\u{c}';
    loc: 14..18 (fid = 0);
    lexeme: `'\f'`;
  },
  {
    tt: char '\t';
    loc: 19..23 (fid = 0);
    lexeme: `'\t'`;
  },
  {
    tt: char '\u{b}';
    loc: 24..28 (fid = 0);
    lexeme: `'\v'`;
  },
  {
    tt: char '\u{7}';
    loc: 29..33 (fid = 0);
    lexeme: `'\a'`;
  },
  {
    tt: char '\u{8}';
    loc: 34..38 (fid = 0);
    lexeme: `'\b'`;
  },
  {
    tt: char '\u{1b}';
    loc: 39..43 (fid = 0);
    lexeme: `'\e'`;
  },
  {
    tt: char '\\';
    loc: 44..48 (fid = 0);
    lexeme: `'\\'`;
  },
  {
    tt: char '@';
    loc: 49..55 (fid = 0);
    lexeme: `'\x40'`;
  },
  {
    tt: char 'ÿ';
    loc: 56..60 (fid = 0);
    lexeme: `'ÿ'`;
  },
  {
    tt: char '🌒';
    loc: 61..67 (fid = 0);
    lexeme: `'🌒'`;
  },
  {
    tt: char '🌒';
    loc: 68..79 (fid = 0);
    lexeme: `'\u{1F312}'`;
  },
  {
    tt: end of file;
    loc: 80..81 (fid = 0);
    lexeme: N/A;
  },
}
"#,
        compiler_code: 0,
        test_out: "",
        test_code: 0,
    ),
    "lexer/float_literal": (
        compiler_out: "tokenstream = {
  {
    tt: float 1012.3456;
    loc: 18..31 (fid = 0);
    lexeme: `1_012.345_600`;
  },
  {
    tt: float 6.0219999999999996e23;
    loc: 32..41 (fid = 0);
    lexeme: `6.022e+23`;
  },
  {
    tt: float 1.67e-27;
    loc: 42..50 (fid = 0);
    lexeme: `1.67e-27`;
  },
  {
    tt: float 0.0;
    loc: 51..53 (fid = 0);
    lexeme: `0.`;
  },
  {
    tt: float 1.2;
    loc: 54..67 (fid = 0);
    lexeme: `0001.2000e000`;
  },
  {
    tt: float 15.6;
    loc: 68..75 (fid = 0);
    lexeme: `1_5.6_0`;
  },
  {
    tt: float 0.25;
    loc: 91..97 (fid = 0);
    lexeme: `0x1p-2`;
  },
  {
    tt: float 2048.0;
    loc: 115..122 (fid = 0);
    lexeme: `0x2.p10`;
  },
  {
    tt: float 1.9375;
    loc: 141..149 (fid = 0);
    lexeme: `0x1.Fp+0`;
  },
  {
    tt: float 0.5;
    loc: 167..174 (fid = 0);
    lexeme: `0X.8p-0`;
  },
  {
    tt: float 0.1249847412109375;
    loc: 190..201 (fid = 0);
    lexeme: `0X_1FFFP-16`;
  },
  {
    tt: end of file;
    loc: 228..229 (fid = 0);
    lexeme: N/A;
  },
}
",
        compiler_code: 0,
        test_out: "",
        test_code: 0,
    ),
    "lexer/integer_literals": (
        compiler_out: "tokenstream = {
  {
    tt: integer 123456789;
    loc: 0..9 (fid = 0);
    lexeme: `123456789`;
  },
  {
    tt: integer 123456789;
    loc: 10..21 (fid = 0);
    lexeme: `123_456_789`;
  },
  {
    tt: integer 123;
    loc: 41..50 (fid = 0);
    lexeme: `0b1111011`;
  },
  {
    tt: integer 123;
    loc: 51..60 (fid = 0);
    lexeme: `0B1111011`;
  },
  {
    tt: integer 123;
    loc: 61..72 (fid = 0);
    lexeme: `0b0111_1011`;
  },
  {
    tt: integer 123;
    loc: 73..84 (fid = 0);
    lexeme: `0B0111_1011`;
  },
  {
    tt: integer 123;
    loc: 103..108 (fid = 0);
    lexeme: `0o173`;
  },
  {
    tt: integer 123;
    loc: 109..114 (fid = 0);
    lexeme: `0O173`;
  },
  {
    tt: integer 123;
    loc: 115..122 (fid = 0);
    lexeme: `0o01_73`;
  },
  {
    tt: integer 123;
    loc: 123..130 (fid = 0);
    lexeme: `0O01_73`;
  },
  {
    tt: integer 123;
    loc: 155..159 (fid = 0);
    lexeme: `0x7b`;
  },
  {
    tt: integer 123;
    loc: 160..164 (fid = 0);
    lexeme: `0X7b`;
  },
  {
    tt: integer 123;
    loc: 165..169 (fid = 0);
    lexeme: `0x7B`;
  },
  {
    tt: integer 123;
    loc: 170..174 (fid = 0);
    lexeme: `0X7B`;
  },
  {
    tt: integer 3735928559;
    loc: 175..186 (fid = 0);
    lexeme: `0xDEAD_BEEF`;
  },
  {
    tt: integer 3735928559;
    loc: 187..200 (fid = 0);
    lexeme: `0Xde_ad_be_ef`;
  },
  {
    tt: end of file;
    loc: 201..202 (fid = 0);
    lexeme: N/A;
  },
}
",
        compiler_code: 0,
        test_out: "",
        test_code: 0,
    ),
    "lexer/kw_idents": (
        compiler_out: "tokenstream = {
  {
    tt: keyword 'as';
    loc: 19..21 (fid = 0);
    lexeme: `as`;
  },
  {
    tt: keyword 'break';
    loc: 22..27 (fid = 0);
    lexeme: `break`;
  },
  {
    tt: keyword 'comptime';
    loc: 28..36 (fid = 0);
    lexeme: `comptime`;
  },
  {
    tt: keyword 'continue';
    loc: 37..45 (fid = 0);
    lexeme: `continue`;
  },
  {
    tt: keyword 'defer';
    loc: 46..51 (fid = 0);
    lexeme: `defer`;
  },
  {
    tt: keyword 'else';
    loc: 52..56 (fid = 0);
    lexeme: `else`;
  },
  {
    tt: keyword 'extern';
    loc: 57..63 (fid = 0);
    lexeme: `extern`;
  },
  {
    tt: keyword 'false';
    loc: 64..69 (fid = 0);
    lexeme: `false`;
  },
  {
    tt: keyword 'for';
    loc: 70..73 (fid = 0);
    lexeme: `for`;
  },
  {
    tt: keyword 'fun';
    loc: 74..77 (fid = 0);
    lexeme: `fun`;
  },
  {
    tt: keyword 'if';
    loc: 78..80 (fid = 0);
    lexeme: `if`;
  },
  {
    tt: keyword 'impl';
    loc: 81..85 (fid = 0);
    lexeme: `impl`;
  },
  {
    tt: keyword 'in';
    loc: 86..88 (fid = 0);
    lexeme: `in`;
  },
  {
    tt: keyword 'let';
    loc: 89..92 (fid = 0);
    lexeme: `let`;
  },
  {
    tt: keyword 'loop';
    loc: 93..97 (fid = 0);
    lexeme: `loop`;
  },
  {
    tt: keyword 'mut';
    loc: 98..101 (fid = 0);
    lexeme: `mut`;
  },
  {
    tt: keyword 'null';
    loc: 102..106 (fid = 0);
    lexeme: `null`;
  },
  {
    tt: keyword 'orb';
    loc: 107..110 (fid = 0);
    lexeme: `orb`;
  },
  {
    tt: keyword 'pub';
    loc: 111..114 (fid = 0);
    lexeme: `pub`;
  },
  {
    tt: keyword 'return';
    loc: 115..121 (fid = 0);
    lexeme: `return`;
  },
  {
    tt: keyword 'self';
    loc: 122..126 (fid = 0);
    lexeme: `self`;
  },
  {
    tt: keyword 'then';
    loc: 127..131 (fid = 0);
    lexeme: `then`;
  },
  {
    tt: keyword 'trait';
    loc: 132..137 (fid = 0);
    lexeme: `trait`;
  },
  {
    tt: keyword 'true';
    loc: 138..142 (fid = 0);
    lexeme: `true`;
  },
  {
    tt: keyword 'while';
    loc: 143..148 (fid = 0);
    lexeme: `while`;
  },
  {
    tt: ident 'foo';
    loc: 176..179 (fid = 0);
    lexeme: `foo`;
  },
  {
    tt: ident 'bar_baz';
    loc: 180..187 (fid = 0);
    lexeme: `bar_baz`;
  },
  {
    tt: ident 'FooBarBaz';
    loc: 188..197 (fid = 0);
    lexeme: `FooBarBaz`;
  },
  {
    tt: end of file;
    loc: 198..199 (fid = 0);
    lexeme: N/A;
  },
}
",
        compiler_code: 0,
        test_out: "",
        test_code: 0,
    ),
    "lexer/punctuation": (
        compiler_out: "tokenstream = {
  {
    tt: punct LParen;
    loc: 0..1 (fid = 0);
    lexeme: `(`;
  },
  {
    tt: punct RParen;
    loc: 2..3 (fid = 0);
    lexeme: `)`;
  },
  {
    tt: punct LBracket;
    loc: 4..5 (fid = 0);
    lexeme: `[`;
  },
  {
    tt: punct RBracket;
    loc: 6..7 (fid = 0);
    lexeme: `]`;
  },
  {
    tt: punct LCurly;
    loc: 8..9 (fid = 0);
    lexeme: `{`;
  },
  {
    tt: punct RCurly;
    loc: 10..11 (fid = 0);
    lexeme: `}`;
  },
  {
    tt: punct Plus;
    loc: 12..13 (fid = 0);
    lexeme: `+`;
  },
  {
    tt: punct Minus;
    loc: 14..15 (fid = 0);
    lexeme: `-`;
  },
  {
    tt: punct Star;
    loc: 16..17 (fid = 0);
    lexeme: `*`;
  },
  {
    tt: punct Slash;
    loc: 18..19 (fid = 0);
    lexeme: `/`;
  },
  {
    tt: punct Colon;
    loc: 20..21 (fid = 0);
    lexeme: `:`;
  },
  {
    tt: punct ColonColon;
    loc: 22..24 (fid = 0);
    lexeme: `::`;
  },
  {
    tt: punct Comma;
    loc: 25..26 (fid = 0);
    lexeme: `,`;
  },
  {
    tt: punct Eq;
    loc: 27..28 (fid = 0);
    lexeme: `=`;
  },
  {
    tt: punct EqEq;
    loc: 29..31 (fid = 0);
    lexeme: `==`;
  },
  {
    tt: punct BangEq;
    loc: 32..34 (fid = 0);
    lexeme: `!=`;
  },
  {
    tt: punct Bang;
    loc: 35..36 (fid = 0);
    lexeme: `!`;
  },
  {
    tt: punct LtEq;
    loc: 37..39 (fid = 0);
    lexeme: `<=`;
  },
  {
    tt: punct Lt;
    loc: 40..41 (fid = 0);
    lexeme: `<`;
  },
  {
    tt: punct LtLt;
    loc: 42..44 (fid = 0);
    lexeme: `<<`;
  },
  {
    tt: punct Gt;
    loc: 45..46 (fid = 0);
    lexeme: `>`;
  },
  {
    tt: punct GtGt;
    loc: 47..49 (fid = 0);
    lexeme: `>>`;
  },
  {
    tt: punct GtEq;
    loc: 50..52 (fid = 0);
    lexeme: `>=`;
  },
  {
    tt: punct Semi;
    loc: 53..54 (fid = 0);
    lexeme: `;`;
  },
  {
    tt: punct MinusGt;
    loc: 55..57 (fid = 0);
    lexeme: `->`;
  },
  {
    tt: punct Caret;
    loc: 58..59 (fid = 0);
    lexeme: `^`;
  },
  {
    tt: punct And;
    loc: 60..61 (fid = 0);
    lexeme: `&`;
  },
  {
    tt: punct AndAnd;
    loc: 62..64 (fid = 0);
    lexeme: `&&`;
  },
  {
    tt: punct Or;
    loc: 65..66 (fid = 0);
    lexeme: `|`;
  },
  {
    tt: punct OrOr;
    loc: 67..69 (fid = 0);
    lexeme: `||`;
  },
  {
    tt: punct Percent;
    loc: 70..71 (fid = 0);
    lexeme: `%`;
  },
  {
    tt: punct Dot;
    loc: 72..73 (fid = 0);
    lexeme: `.`;
  },
  {
    tt: punct DotStar;
    loc: 74..76 (fid = 0);
    lexeme: `.*`;
  },
  {
    tt: punct Pound;
    loc: 77..78 (fid = 0);
    lexeme: `#`;
  },
  {
    tt: end of file;
    loc: 79..80 (fid = 0);
    lexeme: N/A;
  },
}
",
        compiler_code: 0,
        test_out: "",
        test_code: 0,
    ),
    "lexer/specialized_literals": (
        compiler_out: r#"tokenstream = {
  {
    tt: char 'C';
    tag: "a7";
    loc: 28..33 (fid = 0);
    lexeme: `a7'C'`;
  },
  {
    tt: c_string "Hello, world! This string is a null terminated string";
    loc: 65..121 (fid = 0);
    lexeme: `c"Hello, world! This string is a null terminated string"`;
  },
  {
    tt: string "no escapes \\n\\r";
    tag: "r";
    loc: 169..187 (fid = 0);
    lexeme: `r"no escapes \n\r"`;
  },
  {
    tt: integer 123456;
    tag: "usz";
    loc: 220..231 (fid = 0);
    lexeme: `123_456'usz`;
  },
  {
    tt: float 12345678.9;
    tag: "f64";
    loc: 262..280 (fid = 0);
    lexeme: `123_456.789e+2'f64`;
  },
  {
    tt: char '\0';
    tag: "fun";
    loc: 353..360 (fid = 0);
    lexeme: `fun'\0'`;
  },
  {
    tt: string "Hello";
    tag: "orb";
    loc: 409..419 (fid = 0);
    lexeme: `orb"Hello"`;
  },
  {
    tt: integer 343569;
    tag: "let";
    loc: 435..446 (fid = 0);
    lexeme: `3435_69'let`;
  },
  {
    tt: float 6.9;
    tag: "comptime";
    loc: 469..481 (fid = 0);
    lexeme: `6.9'comptime`;
  },
  {
    tt: end of file;
    loc: 482..483 (fid = 0);
    lexeme: N/A;
  },
}
"#,
        compiler_code: 0,
        test_out: "",
        test_code: 0,
    ),
    "lexer/string_literal": (
        compiler_out: r#"tokenstream = {
  {
    tt: string "Hello, world\n";
    loc: 0..16 (fid = 0);
    lexeme: `"Hello, world\n"`;
  },
  {
    tt: string "\0 \n \r \u{c} \t \u{b} \u{7} \u{8} \u{1b} \\ ÿ";
    loc: 17..53 (fid = 0);
    lexeme: `"\0 \n \r \f \t \v \a \b \e \\ \xFF"`;
  },
  {
    tt: string "'we can use simple quotes inside a string'";
    loc: 54..98 (fid = 0);
    lexeme: `"'we can use simple quotes inside a string'"`;
  },
  {
    tt: string "string support UTF-8: ÿ, 🌒 etc..";
    loc: 99..137 (fid = 0);
    lexeme: `"string support UTF-8: ÿ, 🌒 etc.."`;
  },
  {
    tt: string "and supports unicode escape; Lun: 🌒";
    loc: 138..183 (fid = 0);
    lexeme: `"and supports unicode escape; Lun: \u{1f312}"`;
  },
  {
    tt: end of file;
    loc: 184..185 (fid = 0);
    lexeme: N/A;
  },
}
"#,
        compiler_code: 0,
        test_out: "",
        test_code: 0,
    ),
    "multifile/lib": (
        compiler_out: r#"scir = [
  Module {
    name: dbg;
    module: [
      Module {
        name: nested;
        module: [
          FunDefinition {
            name: fib @ 0..3 (fid = 2);
            typeexpr: none;
            args: [
              Arg {
                name: n @ 11..12 (fid = 2);
                typeexpr: Expression {
                  expr: Symbol {
                    kind: global;
                    name: i32 @ none;
                    realname: none;
                    which: 0;
                    path: ∅;
                    typ: type;
                    typeness: explicit;
                    value: Type {
                      type: i32;
                    };
                  };
                  typ: type;
                } @ 14..17 (fid = 2);
                sym: Symbol {
                  kind: argument;
                  name: n @ 11..12 (fid = 2);
                  realname: none;
                  which: 0;
                  path: n;
                  typ: i32;
                  typeness: explicit;
                  value: none;
                };
              } @ 11..17 (fid = 2),
            ];
            rettypeexpr: Expression {
              expr: Symbol {
                kind: global;
                name: i32 @ none;
                realname: none;
                which: 0;
                path: ∅;
                typ: type;
                typeness: explicit;
                value: Type {
                  type: i32;
                };
              };
              typ: type;
            } @ 22..25 (fid = 2);
            body: Block {
              stmts: [];
              last_expr: Expression {
                expr: If {
                  cond: Expression {
                    expr: Binary {
                      lhs: Expression {
                        expr: Symbol {
                          kind: argument;
                          name: n @ 11..12 (fid = 2);
                          realname: none;
                          which: 0;
                          path: n;
                          typ: i32;
                          typeness: explicit;
                          value: none;
                        };
                        typ: i32;
                      } @ 35..36 (fid = 2);
                      op: CompLE;
                      rhs: Expression {
                        expr: integer 1;
                        typ: i32;
                      } @ 40..41 (fid = 2);
                    };
                    typ: bool;
                  } @ 35..41 (fid = 2);
                  then_br: Expression {
                    expr: Block {
                      label: none;
                      block: Block {
                        stmts: [];
                        last_expr: Expression {
                          expr: Symbol {
                            kind: argument;
                            name: n @ 11..12 (fid = 2);
                            realname: none;
                            which: 0;
                            path: n;
                            typ: i32;
                            typeness: explicit;
                            value: none;
                          };
                          typ: i32;
                        } @ 52..53 (fid = 2);
                        typ: i32;
                      } @ 42..59 (fid = 2);
                      index: none;
                    };
                    typ: i32;
                  } @ 32..104 (fid = 2);
                  else_br: Expression {
                    expr: Block {
                      label: none;
                      block: Block {
                        stmts: [];
                        last_expr: Expression {
                          expr: Binary {
                            lhs: Expression {
                              expr: Call {
                                callee: Expression {
                                  expr: Symbol {
                                    kind: function;
                                    name: fib @ 0..3 (fid = 2);
                                    realname: none;
                                    which: 0;
                                    path: multifile::dbg::nested::fib;
                                    typ: *fun (i32) -> i32;
                                    typeness: explicit;
                                    value: none;
                                  };
                                  typ: *fun (i32) -> i32;
                                } @ 75..78 (fid = 2);
                                args: [
                                  Expression {
                                    expr: Binary {
                                      lhs: Expression {
                                        expr: Symbol {
                                          kind: argument;
                                          name: n @ 11..12 (fid = 2);
                                          realname: none;
                                          which: 0;
                                          path: n;
                                          typ: i32;
                                          typeness: explicit;
                                          value: none;
                                        };
                                        typ: i32;
                                      } @ 79..80 (fid = 2);
                                      op: Sub;
                                      rhs: Expression {
                                        expr: integer 1;
                                        typ: i32;
                                      } @ 83..84 (fid = 2);
                                    };
                                    typ: i32;
                                  } @ 79..84 (fid = 2),
                                ];
                              };
                              typ: i32;
                            } @ 75..85 (fid = 2);
                            op: Add;
                            rhs: Expression {
                              expr: Call {
                                callee: Expression {
                                  expr: Symbol {
                                    kind: function;
                                    name: fib @ 0..3 (fid = 2);
                                    realname: none;
                                    which: 0;
                                    path: multifile::dbg::nested::fib;
                                    typ: *fun (i32) -> i32;
                                    typeness: explicit;
                                    value: none;
                                  };
                                  typ: *fun (i32) -> i32;
                                } @ 88..91 (fid = 2);
                                args: [
                                  Expression {
                                    expr: Binary {
                                      lhs: Expression {
                                        expr: Symbol {
                                          kind: argument;
                                          name: n @ 11..12 (fid = 2);
                                          realname: none;
                                          which: 0;
                                          path: n;
                                          typ: i32;
                                          typeness: explicit;
                                          value: none;
                                        };
                                        typ: i32;
                                      } @ 92..93 (fid = 2);
                                      op: Sub;
                                      rhs: Expression {
                                        expr: integer 2;
                                        typ: i32;
                                      } @ 96..97 (fid = 2);
                                    };
                                    typ: i32;
                                  } @ 92..97 (fid = 2),
                                ];
                              };
                              typ: i32;
                            } @ 88..98 (fid = 2);
                          };
                          typ: i32;
                        } @ 75..98 (fid = 2);
                        typ: i32;
                      } @ 65..104 (fid = 2);
                      index: none;
                    };
                    typ: i32;
                  } @ 65..104 (fid = 2);
                };
                typ: i32;
              } @ 32..104 (fid = 2);
              typ: i32;
            } @ 26..106 (fid = 2);
            info: {
              defined_mut: false;
            };
            sym: Symbol {
              kind: function;
              name: fib @ 0..3 (fid = 2);
              realname: none;
              which: 0;
              path: multifile::dbg::nested::fib;
              typ: *fun (i32) -> i32;
              typeness: explicit;
              value: none;
            };
          } @ 0..106 (fid = 2),
        ];
        sym: Symbol {
          kind: module;
          name: nested @ 22..34 (fid = 1);
          realname: none;
          which: 0;
          path: multifile::dbg::nested;
          typ: unknown;
          typeness: explicit;
          value: none;
        };
      } @ 22..34 (fid = 1),

      FunDefinition {
        name: puts @ 59..63 (fid = 1);
        typeexpr: none;
        args: [
          Arg {
            name: msg @ 71..74 (fid = 1);
            typeexpr: Expression {
              expr: PointerType {
                mutability: not;
                typeexpr: Expression {
                  expr: Symbol {
                    kind: global;
                    name: str @ none;
                    realname: none;
                    which: 0;
                    path: ∅;
                    typ: type;
                    typeness: explicit;
                    value: Type {
                      type: str;
                    };
                  };
                  typ: type;
                } @ 77..80 (fid = 1);
              };
              typ: type;
            } @ 76..80 (fid = 1);
            sym: Symbol {
              kind: argument;
              name: msg @ 71..74 (fid = 1);
              realname: none;
              which: 0;
              path: msg;
              typ: *str;
              typeness: explicit;
              value: none;
            };
          } @ 71..80 (fid = 1),
        ];
        rettypeexpr: none;
        body: Block {
          stmts: [
            Expression {
              expr: Binary {
                lhs: Expression {
                  expr: Underscore;
                  typ: unknown;
                } @ 88..89 (fid = 1);
                op: Assignment;
                rhs: Expression {
                  expr: Symbol {
                    kind: argument;
                    name: msg @ 71..74 (fid = 1);
                    realname: none;
                    which: 0;
                    path: msg;
                    typ: *str;
                    typeness: explicit;
                    value: none;
                  };
                  typ: *str;
                } @ 92..95 (fid = 1);
              };
              typ: void;
            } @ 88..95 (fid = 1) @ 88..95 (fid = 1),
          ];
          last_expr: none;
          typ: void;
        } @ 82..126 (fid = 1);
        info: {
          defined_mut: false;
        };
        sym: Symbol {
          kind: function;
          name: puts @ 59..63 (fid = 1);
          realname: none;
          which: 0;
          path: multifile::dbg::puts;
          typ: *fun (*str) -> void;
          typeness: explicit;
          value: none;
        };
      } @ 59..126 (fid = 1),

      FunDefinition {
        name: some_other_thing @ 128..144 (fid = 1);
        typeexpr: none;
        args: [];
        rettypeexpr: none;
        body: Block {
          stmts: [
            BindingDef {
              name: half @ 160..164 (fid = 1);
              mutability: not;
              typeexpr: none;
              value: Expression {
                expr: Call {
                  callee: Expression {
                    expr: Symbol {
                      kind: function;
                      name: divide @ 182..188 (fid = 0);
                      realname: none;
                      which: 0;
                      path: multifile::divide;
                      typ: *fun (f32, f32) -> f32;
                      typeness: explicit;
                      value: none;
                    };
                    typ: *fun (f32, f32) -> f32;
                  } @ 168..174 (fid = 1);
                  args: [
                    Expression {
                      expr: float 1.0;
                      typ: f32;
                    } @ 175..177 (fid = 1),

                    Expression {
                      expr: float 2.0;
                      typ: f32;
                    } @ 179..181 (fid = 1),
                  ];
                };
                typ: f32;
              } @ 168..182 (fid = 1);
              sym: Symbol {
                kind: local;
                name: half @ 160..164 (fid = 1);
                realname: none;
                which: 0;
                path: half;
                typ: f32;
                typeness: implicit;
                value: none;
              };
            } @ 160..182 (fid = 1),
          ];
          last_expr: none;
          typ: void;
        } @ 154..185 (fid = 1);
        info: {
          defined_mut: false;
        };
        sym: Symbol {
          kind: function;
          name: some_other_thing @ 128..144 (fid = 1);
          realname: none;
          which: 0;
          path: multifile::dbg::some_other_thing;
          typ: *fun () -> void;
          typeness: explicit;
          value: none;
        };
      } @ 128..185 (fid = 1),
    ];
    sym: Symbol {
      kind: module;
      name: dbg @ 24..33 (fid = 0);
      realname: none;
      which: 0;
      path: multifile::dbg;
      typ: unknown;
      typeness: explicit;
      value: none;
    };
  } @ 24..33 (fid = 0),

  FunDefinition {
    name: main @ 73..77 (fid = 0);
    typeexpr: none;
    args: [];
    rettypeexpr: none;
    body: Block {
      stmts: [
        Expression {
          expr: Call {
            callee: Expression {
              expr: Symbol {
                kind: function;
                name: puts @ 59..63 (fid = 1);
                realname: none;
                which: 0;
                path: multifile::dbg::puts;
                typ: *fun (*str) -> void;
                typeness: explicit;
                value: none;
              };
              typ: *fun (*str) -> void;
            } @ 94..108 (fid = 0);
            args: [
              Expression {
                expr: string "Hello world!";
                typ: *str;
              } @ 109..123 (fid = 0),
            ];
          };
          typ: void;
        } @ 94..124 (fid = 0) @ 94..124 (fid = 0),

        Expression {
          expr: Call {
            callee: Expression {
              expr: Symbol {
                kind: function;
                name: puts @ 59..63 (fid = 1);
                realname: none;
                which: 0;
                path: multifile::dbg::puts;
                typ: *fun (*str) -> void;
                typeness: explicit;
                value: none;
              };
              typ: *fun (*str) -> void;
            } @ 130..139 (fid = 0);
            args: [
              Expression {
                expr: string "Hello world!";
                typ: *str;
              } @ 140..154 (fid = 0),
            ];
          };
          typ: void;
        } @ 130..155 (fid = 0) @ 130..155 (fid = 0),

        Expression {
          expr: Call {
            callee: Expression {
              expr: Symbol {
                kind: function;
                name: fib @ 0..3 (fid = 2);
                realname: none;
                which: 0;
                path: multifile::dbg::nested::fib;
                typ: *fun (i32) -> i32;
                typeness: explicit;
                value: none;
              };
              typ: *fun (i32) -> i32;
            } @ 161..173 (fid = 0);
            args: [
              Expression {
                expr: integer 12;
                typ: i32;
              } @ 174..176 (fid = 0),
            ];
          };
          typ: i32;
        } @ 161..177 (fid = 0) @ 161..177 (fid = 0),
      ];
      last_expr: none;
      typ: void;
    } @ 88..180 (fid = 0);
    info: {
      defined_mut: false;
    };
    sym: Symbol {
      kind: function;
      name: main @ 73..77 (fid = 0);
      realname: none;
      which: 0;
      path: multifile::main;
      typ: *fun () -> void;
      typeness: explicit;
      value: none;
    };
  } @ 73..180 (fid = 0),

  FunDefinition {
    name: divide @ 182..188 (fid = 0);
    typeexpr: none;
    args: [
      Arg {
        name: lhs @ 196..199 (fid = 0);
        typeexpr: Expression {
          expr: Symbol {
            kind: global;
            name: f32 @ none;
            realname: none;
            which: 0;
            path: ∅;
            typ: type;
            typeness: explicit;
            value: Type {
              type: f32;
            };
          };
          typ: type;
        } @ 201..204 (fid = 0);
        sym: Symbol {
          kind: argument;
          name: lhs @ 196..199 (fid = 0);
          realname: none;
          which: 0;
          path: lhs;
          typ: f32;
          typeness: explicit;
          value: none;
        };
      } @ 196..204 (fid = 0),

      Arg {
        name: rhs @ 206..209 (fid = 0);
        typeexpr: Expression {
          expr: Symbol {
            kind: global;
            name: f32 @ none;
            realname: none;
            which: 0;
            path: ∅;
            typ: type;
            typeness: explicit;
            value: Type {
              type: f32;
            };
          };
          typ: type;
        } @ 211..214 (fid = 0);
        sym: Symbol {
          kind: argument;
          name: rhs @ 206..209 (fid = 0);
          realname: none;
          which: 1;
          path: rhs;
          typ: f32;
          typeness: explicit;
          value: none;
        };
      } @ 206..214 (fid = 0),
    ];
    rettypeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: f32 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: f32;
        };
      };
      typ: type;
    } @ 219..222 (fid = 0);
    body: Block {
      stmts: [];
      last_expr: Expression {
        expr: Binary {
          lhs: Expression {
            expr: Symbol {
              kind: argument;
              name: lhs @ 196..199 (fid = 0);
              realname: none;
              which: 0;
              path: lhs;
              typ: f32;
              typeness: explicit;
              value: none;
            };
            typ: f32;
          } @ 229..232 (fid = 0);
          op: Div;
          rhs: Expression {
            expr: Symbol {
              kind: argument;
              name: rhs @ 206..209 (fid = 0);
              realname: none;
              which: 1;
              path: rhs;
              typ: f32;
              typeness: explicit;
              value: none;
            };
            typ: f32;
          } @ 235..238 (fid = 0);
        };
        typ: f32;
      } @ 229..238 (fid = 0);
      typ: f32;
    } @ 223..240 (fid = 0);
    info: {
      defined_mut: false;
    };
    sym: Symbol {
      kind: function;
      name: divide @ 182..188 (fid = 0);
      realname: none;
      which: 0;
      path: multifile::divide;
      typ: *fun (f32, f32) -> f32;
      typeness: explicit;
      value: none;
    };
  } @ 182..240 (fid = 0),

  GlobalDef {
    name: MY_LIL_CONSTANT @ 242..257 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: Expression {
      expr: integer 1234;
      typ: i32;
    } @ 261..265 (fid = 0);
    sym: Symbol {
      kind: global;
      name: MY_LIL_CONSTANT @ 242..257 (fid = 0);
      realname: none;
      which: 0;
      path: multifile::MY_LIL_CONSTANT;
      typ: i32;
      typeness: implicit;
      value: I32 {
        val: 1234;
      };
    };
  } @ 242..266 (fid = 0),
]
"#,
        compiler_code: 0,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_binop_expr_resilience_1": (
        compiler_out: "ast = [
  GlobalDef {
    name: a @ 51..52 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: FunDefinition {
      args: [];
      rettypeexpr: none;
      body: Block [
        BindingDef {
          name: b @ 72..73 (fid = 0);
          mutability: not;
          typeexpr: none;
          value: Binary {
            lhs: integer 1 @ 76..77 (fid = 0);
            op: Add;
            rhs: Null @ 0..0 (fid = 0);
          } @ 76..0 (fid = 0);
        } @ 68..0 (fid = 0),

        @last_expr: none,
      ] @ 62..86 (fid = 0);
    } @ 56..86 (fid = 0);
  } @ 51..86 (fid = 0),
]
error[E006]: expected `(`, found `;`
  ┌─ ./tests/parser/E006_binop_expr_resilience_1.lun:4:20
  │
4 │     let b = 1 + fun;
  │                    ^

error: compilation of `E006_binop_expr_resilience_1` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_block_1": (
        compiler_out: "ast = [
  GlobalDef {
    name: a @ 39..40 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: PredicateLoop {
      label: none;
      cond: boolean true @ 50..54 (fid = 0);
      body: Block [
        @last_expr: none,
      ] @ 0..0 (fid = 0);
    } @ 44..0 (fid = 0);
  } @ 39..0 (fid = 0),
]
error[E006]: expected `{`, found identifier
  ┌─ ./tests/parser/E006_block_1.lun:2:17
  │
2 │ a :: while true b;
  │                 ^

error: compilation of `E006_block_1` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_block_2": (
        compiler_out: "ast = [
  GlobalDef {
    name: a @ 39..40 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: Block [
      BindingDef {
        name: a @ 50..51 (fid = 0);
        mutability: not;
        typeexpr: none;
        value: integer 12 @ 55..57 (fid = 0);
      } @ 50..57 (fid = 0),

      @last_expr: none,
    ] @ 44..59 (fid = 0) @ 44..59 (fid = 0);
  } @ 39..59 (fid = 0),
]
error[E006]: expected `;`, found `}`
  ┌─ ./tests/parser/E006_block_2.lun:4:1
  │
3 │     a := 12
  │          -- help: add `;` after this token
4 │ };
  │ ^ unexpected `}`

error: compilation of `E006_block_2` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_block_3": (
        compiler_out: "ast = []
error[E006]: expected `;`, found identifier
  ┌─ ./tests/parser/E006_block_3.lun:4:5
  │
3 │     a
  │     - help: add `;` after this token
4 │     b
  │     ^ unexpected identifier

error: compilation of `E006_block_3` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_block_4": (
        compiler_out: "ast = [
  GlobalDef {
    name: a @ 39..40 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: Block [
      Defer {
        expr: path a @ 56..57 (fid = 0);
      } @ 50..57 (fid = 0),

      @last_expr: path b @ 62..63 (fid = 0),
    ] @ 44..65 (fid = 0) @ 44..65 (fid = 0);
  } @ 39..65 (fid = 0),
]
error[E006]: expected `;`, found identifier
  ┌─ ./tests/parser/E006_block_4.lun:4:5
  │
3 │     defer a
  │           - help: add `;` after this token
4 │     b
  │     ^ unexpected identifier

error: compilation of `E006_block_4` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_block_5": (
        compiler_out: "ast = []
error[E006]: expected `}`, found end of file
  ┌─ ./tests/parser/E006_block_5.lun:3:1
  │
3 │ 
  │ ^

error: compilation of `E006_block_5` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_block_resilience_1": (
        compiler_out: "ast = [
  GlobalDef {
    name: a @ 51..52 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: Block [
      BindingDef {
        name: a @ 62..63 (fid = 0);
        mutability: not;
        typeexpr: none;
        value: integer 12 @ 67..69 (fid = 0);
      } @ 62..69 (fid = 0),

      BindingDef {
        name: a @ 74..75 (fid = 0);
        mutability: not;
        typeexpr: none;
        value: integer 12 @ 79..81 (fid = 0);
      } @ 74..81 (fid = 0),

      Binary {
        lhs: path f @ 87..88 (fid = 0);
        op: Add;
        rhs: Null @ 0..0 (fid = 0);
      } @ 87..0 (fid = 0) @ 87..0 (fid = 0),

      @last_expr: none,
    ] @ 56..94 (fid = 0) @ 56..94 (fid = 0);
  } @ 51..94 (fid = 0),
]
error[E006]: expected `;`, found identifier
  ┌─ ./tests/parser/E006_block_resilience_1.lun:5:5
  │
4 │     a := 12
  │          -- help: add `;` after this token
5 │     a := 12;
  │     ^ unexpected identifier

error[E006]: expected expression, found `+`
  ┌─ ./tests/parser/E006_block_resilience_1.lun:6:8
  │
6 │     f ++;
  │        ^

error: compilation of `E006_block_resilience_1` failed due to 2 errors and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_borrow_expr_resilience_1": (
        compiler_out: "ast = [
  GlobalDef {
    name: a @ 51..52 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: Block [
      BindingDef {
        name: b @ 66..67 (fid = 0);
        mutability: not;
        typeexpr: none;
        value: Borrow {
          mutability: not;
          expr: Null @ 0..0 (fid = 0);
        } @ 70..0 (fid = 0);
      } @ 62..0 (fid = 0),

      @last_expr: none,
    ] @ 56..77 (fid = 0) @ 56..77 (fid = 0);
  } @ 51..77 (fid = 0),
]
error[E006]: expected `(`, found `;`
  ┌─ ./tests/parser/E006_borrow_expr_resilience_1.lun:4:17
  │
4 │     let b = &fun;
  │                 ^

error: compilation of `E006_borrow_expr_resilience_1` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_break": (
        compiler_out: "ast = [
  GlobalDef {
    name: a @ 39..40 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: Break {
      label: �;
      expr: none;
    } @ 44..0 (fid = 0);
  } @ 39..54 (fid = 0),
]
error[E006]: expected identifier, found integer literal
  ┌─ ./tests/parser/E006_break.lun:2:13
  │
2 │ a :: break :12;
  │             ^^

error: compilation of `E006_break` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_break_expr_resilience_1": (
        compiler_out: "ast = [
  GlobalDef {
    name: a @ 51..52 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: Block [
      Break {
        label: �;
        expr: integer 2 @ 71..72 (fid = 0);
      } @ 62..72 (fid = 0) @ 62..72 (fid = 0),

      @last_expr: none,
    ] @ 56..75 (fid = 0) @ 56..75 (fid = 0);
  } @ 51..75 (fid = 0),
]
error[E006]: expected identifier, found integer literal
  ┌─ ./tests/parser/E006_break_expr_resilience_1.lun:4:12
  │
4 │     break :1 2;
  │            ^

error: compilation of `E006_break_expr_resilience_1` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_break_expr_resilience_2": (
        compiler_out: "ast = [
  GlobalDef {
    name: a @ 51..52 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: Block [
      Break {
        label: a;
        expr: Null @ 0..0 (fid = 0);
      } @ 62..0 (fid = 0) @ 62..0 (fid = 0),

      @last_expr: none,
    ] @ 56..77 (fid = 0) @ 56..77 (fid = 0);
  } @ 51..77 (fid = 0),
]
error[E006]: expected `(`, found `;`
  ┌─ ./tests/parser/E006_break_expr_resilience_2.lun:4:17
  │
4 │     break :a fun;
  │                 ^

error: compilation of `E006_break_expr_resilience_2` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_call_expr_resilience_1": (
        compiler_out: "ast = [
  GlobalDef {
    name: a @ 51..52 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: FunDefinition {
      args: [];
      rettypeexpr: none;
      body: Block [
        BindingDef {
          name: b @ 72..73 (fid = 0);
          mutability: not;
          typeexpr: none;
          value: Call {
            callee: path a @ 76..77 (fid = 0);
            args: [];
          } @ 76..91 (fid = 0);
        } @ 68..91 (fid = 0),

        @last_expr: none,
      ] @ 62..94 (fid = 0);
    } @ 56..94 (fid = 0);
  } @ 51..94 (fid = 0),
]
error[E006]: expected `(`, found identifier
  ┌─ ./tests/parser/E006_call_expr_resilience_1.lun:4:19
  │
4 │     let b = a(fun mod, fun);
  │                   ^^^

error[E006]: expected `(`, found `)`
  ┌─ ./tests/parser/E006_call_expr_resilience_1.lun:4:27
  │
4 │     let b = a(fun mod, fun);
  │                           ^

error: compilation of `E006_call_expr_resilience_1` failed due to 2 errors and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_call_expr_resilience_2": (
        compiler_out: "ast = [
  GlobalDef {
    name: a @ 51..52 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: FunDefinition {
      args: [];
      rettypeexpr: none;
      body: Block [
        BindingDef {
          name: b @ 72..73 (fid = 0);
          mutability: not;
          typeexpr: none;
          value: Call {
            callee: path a @ 76..77 (fid = 0);
            args: [
              integer 1 @ 78..79 (fid = 0),
            ];
          } @ 76..84 (fid = 0);
        } @ 68..84 (fid = 0),

        @last_expr: none,
      ] @ 62..87 (fid = 0);
    } @ 56..87 (fid = 0);
  } @ 51..87 (fid = 0),
]
error[E006]: expected `)` or `,`, found identifier
  ┌─ ./tests/parser/E006_call_expr_resilience_2.lun:4:17
  │
4 │     let b = a(1 b 2);
  │                 ^

error: compilation of `E006_call_expr_resilience_2` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_continue": (
        compiler_out: r#"ast = [
  GlobalDef {
    name: a @ 39..40 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: Continue {
      label: �;
    } @ 44..0 (fid = 0);
  } @ 39..57 (fid = 0),
]
error[E006]: expected identifier, found string literal
  ┌─ ./tests/parser/E006_continue.lun:2:16
  │
2 │ a :: continue :"";
  │                ^^

error: compilation of `E006_continue` failed due to 1 error and 0 warnings

"#,
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_continue_expr_resilience_1": (
        compiler_out: "ast = [
  GlobalDef {
    name: a @ 51..52 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: Block [
      Continue {
        label: �;
      } @ 62..0 (fid = 0) @ 62..0 (fid = 0),

      @last_expr: none,
    ] @ 56..76 (fid = 0) @ 56..76 (fid = 0);
  } @ 51..76 (fid = 0),
]
error[E006]: expected identifier, found integer literal
  ┌─ ./tests/parser/E006_continue_expr_resilience_1.lun:4:15
  │
4 │     continue :1;
  │               ^

error: compilation of `E006_continue_expr_resilience_1` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_expr_1": (
        compiler_out: "ast = []
error[E006]: expected expression, found keyword `defer`
  ┌─ ./tests/parser/E006_expr_1.lun:2:6
  │
2 │ a :: defer;
  │      ^^^^^

error: compilation of `E006_expr_1` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_extern_block_1": (
        compiler_out: "ast = []
error[E006]: expected string literal, found integer literal
  ┌─ ./tests/parser/E006_extern_block_1.lun:2:8
  │
2 │ extern 12
  │        ^^

error: compilation of `E006_extern_block_1` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_extern_block_2": (
        compiler_out: r#"ast = [
  ExternBlock {
    abi: C;
    items: [];
  } @ 39..53 (fid = 0),
]
error[E006]: expected `{`, found identifier
  ┌─ ./tests/parser/E006_extern_block_2.lun:2:12
  │
2 │ extern "C" a
  │            ^

error[E006]: expected `}`, found end of file
  ┌─ ./tests/parser/E006_extern_block_2.lun:3:1
  │
3 │ 
  │ ^

error: compilation of `E006_extern_block_2` failed due to 2 errors and 0 warnings

"#,
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_extern_block_3": (
        compiler_out: "ast = [
  ExternBlock {
    abi: C;
    items: [];
  } @ 39..53 (fid = 0),
]
error[E006]: expected `}`, found end of file
  ┌─ ./tests/parser/E006_extern_block_3.lun:3:1
  │
3 │ 
  │ ^

error: compilation of `E006_extern_block_3` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_extern_block_resilience_1": (
        compiler_out: "ast = [
  ExternBlock {
    abi: C;
    items: [
      GlobalDef {
        name: a @ 68..69 (fid = 0);
        mutability: not;
        typeexpr: none;
        value: integer 12 @ 73..75 (fid = 0);
      } @ 68..75 (fid = 0),

      GlobalDef {
        name: b @ 81..82 (fid = 0);
        mutability: not;
        typeexpr: none;
        value: path imfine @ 86..92 (fid = 0);
      } @ 81..93 (fid = 0),
    ];
  } @ 51..95 (fid = 0),
]
error[E006]: expected `;`, found identifier
  ┌─ ./tests/parser/E006_extern_block_resilience_1.lun:6:5
  │
4 │     a :: 12
  │          -- help: add `;` after this token
5 │ 
6 │     b :: imfine;
  │     ^ unexpected identifier

error: compilation of `E006_extern_block_resilience_1` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_extern_block_resilience_2": (
        compiler_out: r#"ast = [
  ExternBlock {
    abi: C;
    items: [
      GlobalDef {
        name: b @ 65..66 (fid = 0);
        mutability: not;
        typeexpr: none;
        value: path imfine @ 70..76 (fid = 0);
      } @ 65..77 (fid = 0),
    ];
  } @ 51..79 (fid = 0),
]
error[E006]: expected `{`, found identifier
  ┌─ ./tests/parser/E006_extern_block_resilience_2.lun:3:12
  │
3 │ extern "C" a
  │            ^

error[E006]: expected `}`, found end of file
  ┌─ ./tests/parser/E006_extern_block_resilience_2.lun:6:1
  │
6 │ 
  │ ^

error: compilation of `E006_extern_block_resilience_2` failed due to 2 errors and 0 warnings

"#,
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_extern_block_resilience_3": (
        compiler_out: "ast = [
  GlobalDef {
    name: b @ 79..80 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: path imfine @ 84..90 (fid = 0);
  } @ 79..91 (fid = 0),
]
error[E006]: expected string literal, found integer literal
  ┌─ ./tests/parser/E006_extern_block_resilience_3.lun:3:8
  │
3 │ extern 1
  │        ^

error: compilation of `E006_extern_block_resilience_3` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_field_expr_resilience_1": (
        compiler_out: "ast = [
  GlobalDef {
    name: a @ 51..52 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: Block [
      BindingDef {
        name: b @ 66..67 (fid = 0);
        mutability: not;
        typeexpr: none;
        value: Field {
          expr: path field @ 70..75 (fid = 0);
          member: �;
        } @ 70..77 (fid = 0);
      } @ 62..77 (fid = 0),

      @last_expr: none,
    ] @ 56..80 (fid = 0) @ 56..80 (fid = 0);
  } @ 51..80 (fid = 0),
]
error[E006]: expected identifier, found integer literal
  ┌─ ./tests/parser/E006_field_expr_resilience_1.lun:4:19
  │
4 │     let b = field.1;
  │                   ^

error: compilation of `E006_field_expr_resilience_1` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_for_expr_resilience_1": (
        compiler_out: "ast = [
  GlobalDef {
    name: a @ 51..52 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: Block [
      @last_expr: IteratorLoop {
        label: none;
        variable: �;
        iterator: integer 2 @ 71..72 (fid = 0);
        body: Block [
          @last_expr: none,
        ] @ 73..75 (fid = 0);
      } @ 62..75 (fid = 0),
    ] @ 56..77 (fid = 0) @ 56..77 (fid = 0);
  } @ 51..77 (fid = 0),
]
error[E006]: expected identifier, found integer literal
  ┌─ ./tests/parser/E006_for_expr_resilience_1.lun:4:9
  │
4 │     for 1 in 2 {}
  │         ^

error: compilation of `E006_for_expr_resilience_1` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_for_expr_resilience_2": (
        compiler_out: "ast = [
  GlobalDef {
    name: a @ 51..52 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: Block [
      @last_expr: IteratorLoop {
        label: none;
        variable: a;
        iterator: integer 2 @ 72..73 (fid = 0);
        body: Block [
          @last_expr: none,
        ] @ 74..76 (fid = 0);
      } @ 62..76 (fid = 0),
    ] @ 56..78 (fid = 0) @ 56..78 (fid = 0);
  } @ 51..78 (fid = 0),
]
error[E006]: expected keyword `in`, found identifier
  ┌─ ./tests/parser/E006_for_expr_resilience_2.lun:4:11
  │
4 │     for a i_n 2 {}
  │           ^^^

error: compilation of `E006_for_expr_resilience_2` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_for_expr_resilience_3": (
        compiler_out: "ast = [
  GlobalDef {
    name: a @ 51..52 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: Block [
      @last_expr: IteratorLoop {
        label: none;
        variable: a;
        iterator: Null @ 0..0 (fid = 0);
        body: Block [
          @last_expr: none,
        ] @ 75..77 (fid = 0);
      } @ 62..77 (fid = 0),
    ] @ 56..79 (fid = 0) @ 56..79 (fid = 0);
  } @ 51..79 (fid = 0),
]
error[E006]: expected `(`, found `{`
  ┌─ ./tests/parser/E006_for_expr_resilience_3.lun:4:18
  │
4 │     for a in fun {}
  │                  ^

error: compilation of `E006_for_expr_resilience_3` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_for_expr_resilience_4": (
        compiler_out: "ast = [
  GlobalDef {
    name: a @ 51..52 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: Block [
      @last_expr: IteratorLoop {
        label: none;
        variable: a;
        iterator: path b @ 71..72 (fid = 0);
        body: Block [
          @last_expr: none,
        ] @ 0..0 (fid = 0);
      } @ 62..0 (fid = 0),
    ] @ 56..76 (fid = 0) @ 56..76 (fid = 0);
  } @ 51..76 (fid = 0),
]
error[E006]: expected `{`, found `}`
  ┌─ ./tests/parser/E006_for_expr_resilience_4.lun:4:16
  │
4 │     for a in b }
  │                ^

error: compilation of `E006_for_expr_resilience_4` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_funcall_expr": (
        compiler_out: "ast = [
  GlobalDef {
    name: a @ 39..40 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: Call {
      callee: path call @ 44..48 (fid = 0);
      args: [
        integer 12 @ 49..51 (fid = 0),
      ];
    } @ 44..55 (fid = 0);
  } @ 39..56 (fid = 0),
]
error[E006]: expected `)` or `,`, found integer literal
  ┌─ ./tests/parser/E006_funcall_expr.lun:2:14
  │
2 │ a :: call(12 12);
  │              ^^

error: compilation of `E006_funcall_expr` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_fundecl_expr_resilience_1": (
        compiler_out: "ast = [
  GlobalDef {
    name: a @ 51..52 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: FunDeclaration {
      args: [];
      rettypeexpr: none;
    } @ 56..61 (fid = 0);
  } @ 51..67 (fid = 0),
]
error[E006]: expected expression, found `.`
  ┌─ ./tests/parser/E006_fundecl_expr_resilience_1.lun:3:15
  │
3 │ a :: fun() -> .;
  │               ^

error: compilation of `E006_fundecl_expr_resilience_1` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_fundecl_expr_resilience_2": (
        compiler_out: "ast = [
  GlobalDef {
    name: a @ 51..52 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: FunDeclaration {
      args: [
        path u32 @ 60..63 (fid = 0),

        PointerType {
          mutability: mut;
          typeexpr: path void @ 75..79 (fid = 0);
        } @ 70..79 (fid = 0),
      ];
      rettypeexpr: none;
    } @ 56..81 (fid = 0);
  } @ 51..81 (fid = 0),
]
error[E006]: expected expression, found `.`
  ┌─ ./tests/parser/E006_fundecl_expr_resilience_2.lun:3:15
  │
3 │ a :: fun(u32, . ., *mut void);
  │               ^

error: compilation of `E006_fundecl_expr_resilience_2` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_fundecl_expr_resilience_3": (
        compiler_out: "ast = [
  GlobalDef {
    name: a @ 51..52 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: FunDeclaration {
      args: [
        path u32 @ 60..63 (fid = 0),
      ];
      rettypeexpr: none;
    } @ 56..67 (fid = 0);
  } @ 51..70 (fid = 0),
]
error[E006]: expected expression, found `.`
  ┌─ ./tests/parser/E006_fundecl_expr_resilience_3.lun:3:18
  │
3 │ a :: fun(u32) -> .;
  │                  ^

error: compilation of `E006_fundecl_expr_resilience_3` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_fundef_expr_resilience_1": (
        compiler_out: "ast = [
  GlobalDef {
    name: a @ 51..52 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: FunDefinition {
      args: [
        Arg {
          name: a @ 60..61 (fid = 0);
          typeexpr: path u8 @ 63..65 (fid = 0);
        } @ 60..65 (fid = 0),

        Arg {
          name: � @ 65..66 (fid = 0);
          typeexpr: Binary {
            lhs: integer 1 @ 67..68 (fid = 0);
            op: BitwiseXor;
            rhs: path d @ 69..70 (fid = 0);
          } @ 67..70 (fid = 0);
        } @ 65..70 (fid = 0),

        Arg {
          name: c @ 72..73 (fid = 0);
          typeexpr: path u16 @ 75..78 (fid = 0);
        } @ 72..78 (fid = 0),
      ];
      rettypeexpr: none;
      body: Block [
        @last_expr: none,
      ] @ 80..82 (fid = 0);
    } @ 56..82 (fid = 0);
  } @ 51..82 (fid = 0),
]
error[E006]: expected `)` or identifier, found integer literal
  ┌─ ./tests/parser/E006_fundef_expr_resilience_1.lun:3:17
  │
3 │ a :: fun(a: u8, 1^d, c: u16) {};
  │                 ^

error[E006]: expected `:`, found integer literal
  ┌─ ./tests/parser/E006_fundef_expr_resilience_1.lun:3:17
  │
3 │ a :: fun(a: u8, 1^d, c: u16) {};
  │                 ^

error: compilation of `E006_fundef_expr_resilience_1` failed due to 2 errors and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_fundef_expr_resilience_2": (
        compiler_out: "ast = [
  GlobalDef {
    name: a @ 51..52 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: FunDefinition {
      args: [
        Arg {
          name: a @ 60..61 (fid = 0);
          typeexpr: path u8 @ 63..65 (fid = 0);
        } @ 60..65 (fid = 0),
      ];
      rettypeexpr: none;
      body: Block [
        @last_expr: none,
      ] @ 0..0 (fid = 0);
    } @ 56..0 (fid = 0);
  } @ 51..0 (fid = 0),
]
error[E006]: expected `{`, found `}`
  ┌─ ./tests/parser/E006_fundef_expr_resilience_2.lun:3:17
  │
3 │ a :: fun(a: u8) };
  │                 ^

error: compilation of `E006_fundef_expr_resilience_2` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_fundef_expr_resilience_3": (
        compiler_out: "ast = [
  GlobalDef {
    name: a @ 51..52 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: FunDefinition {
      args: [
        Arg {
          name: a @ 60..61 (fid = 0);
          typeexpr: path u32 @ 63..66 (fid = 0);
        } @ 60..66 (fid = 0),
      ];
      rettypeexpr: none;
      body: Block [
        @last_expr: none,
      ] @ 73..75 (fid = 0);
    } @ 56..75 (fid = 0);
  } @ 51..75 (fid = 0),
]
error[E006]: expected expression, found `.`
  ┌─ ./tests/parser/E006_fundef_expr_resilience_3.lun:3:21
  │
3 │ a :: fun(a: u32) -> . {};
  │                     ^

error: compilation of `E006_fundef_expr_resilience_3` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_fundef_expr_resilience_4": (
        compiler_out: "ast = [
  GlobalDef {
    name: a @ 51..52 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: FunDefinition {
      args: [];
      rettypeexpr: none;
      body: Block [
        @last_expr: none,
      ] @ 0..0 (fid = 0);
    } @ 56..0 (fid = 0);
  } @ 51..0 (fid = 0),
]
error[E006]: expected `{`, found identifier
  ┌─ ./tests/parser/E006_fundef_expr_resilience_4.lun:3:12
  │
3 │ a :: fun() d }
  │            ^

error[E006]: expected item, found `}`
  ┌─ ./tests/parser/E006_fundef_expr_resilience_4.lun:3:14
  │
3 │ a :: fun() d }
  │              ^

error: compilation of `E006_fundef_expr_resilience_4` failed due to 2 errors and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_funkw_expr_1": (
        compiler_out: "ast = []
error[E006]: expected `(`, found integer literal
  ┌─ ./tests/parser/E006_funkw_expr_1.lun:2:10
  │
2 │ a :: fun 12;
  │          ^^

error: compilation of `E006_funkw_expr_1` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_funkw_expr_2": (
        compiler_out: "ast = []
error[E006]: expected `)` or `,`, found identifier
  ┌─ ./tests/parser/E006_funkw_expr_2.lun:2:16
  │
2 │ a :: fun (a: b c);
  │                ^

error: compilation of `E006_funkw_expr_2` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_funkw_expr_3": (
        compiler_out: "ast = []
error[E006]: expected `)` or `,`, found `;`
  ┌─ ./tests/parser/E006_funkw_expr_3.lun:2:15
  │
2 │ a :: fun (a: b;
  │               ^

error: compilation of `E006_funkw_expr_3` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_funkw_expr_4": (
        compiler_out: "ast = []
error[E006]: expected `)` or `,`, found identifier
  ┌─ ./tests/parser/E006_funkw_expr_4.lun:2:13
  │
2 │ a :: fun (b b);
  │             ^

error: compilation of `E006_funkw_expr_4` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_funkw_expr_5": (
        compiler_out: "error[E006]: expected `,`, found `;`
  ┌─ ./tests/parser/E006_funkw_expr_5.lun:2:12
  │
2 │ a :: fun (b;
  │            ^

error: compilation of `./tests/parser/E006_funkw_expr_5` failed due to 1 error and 0 warnings

",
        compiler_code: 101,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_funptr_1": (
        compiler_out: "ast = []
error[E006]: expected `(`, found identifier
  ┌─ ./tests/parser/E006_funptr_1.lun:2:11
  │
2 │ a :: *fun b;
  │           ^

error[E006]: expected `)` or `,`, found `;`
  ┌─ ./tests/parser/E006_funptr_1.lun:2:12
  │
2 │ a :: *fun b;
  │            ^

error: compilation of `E006_funptr_1` failed due to 2 errors and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_funptr_2": (
        compiler_out: "ast = []
error[E006]: expected `)` or `,`, found identifier
  ┌─ ./tests/parser/E006_funptr_2.lun:2:14
  │
2 │ a :: *fun (a a;
  │              ^

error: compilation of `E006_funptr_2` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_funptr_expr_resilience_1": (
        compiler_out: "ast = [
  GlobalDef {
    name: a @ 51..52 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: Block [
      BindingDef {
        name: b @ 66..67 (fid = 0);
        mutability: not;
        typeexpr: none;
        value: FunPtrType {
          args: [
            path u8 @ 75..77 (fid = 0),
          ];
          ret: path u32 @ 82..85 (fid = 0);
        } @ 70..85 (fid = 0);
      } @ 62..85 (fid = 0),

      @last_expr: none,
    ] @ 56..88 (fid = 0) @ 56..88 (fid = 0);
  } @ 51..88 (fid = 0),
]
error[E006]: expected `(`, found identifier
  ┌─ ./tests/parser/E006_funptr_expr_resilience_1.lun:4:18
  │
4 │     let b = *fun u8) -> u32;
  │                  ^^

error: compilation of `E006_funptr_expr_resilience_1` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_funptr_expr_resilience_2": (
        compiler_out: "ast = [
  GlobalDef {
    name: a @ 51..52 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: Block [
      BindingDef {
        name: b @ 66..67 (fid = 0);
        mutability: not;
        typeexpr: none;
        value: FunPtrType {
          args: [
            path u8 @ 78..80 (fid = 0),
          ];
          ret: path u32 @ 85..88 (fid = 0);
        } @ 70..88 (fid = 0);
      } @ 62..88 (fid = 0),

      @last_expr: none,
    ] @ 56..91 (fid = 0) @ 56..91 (fid = 0);
  } @ 51..91 (fid = 0),
]
error[E006]: expected expression, found `.`
  ┌─ ./tests/parser/E006_funptr_expr_resilience_2.lun:4:18
  │
4 │     let b = *fun(., u8) -> u32;
  │                  ^

error: compilation of `E006_funptr_expr_resilience_2` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_funptr_expr_resilience_3": (
        compiler_out: "ast = [
  GlobalDef {
    name: a @ 51..52 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: Block [
      BindingDef {
        name: b @ 66..67 (fid = 0);
        mutability: not;
        typeexpr: none;
        value: FunPtrType {
          args: [
            path u8 @ 75..77 (fid = 0),
          ];
          ret: none;
        } @ 70..78 (fid = 0);
      } @ 62..78 (fid = 0),

      @last_expr: none,
    ] @ 56..88 (fid = 0) @ 56..88 (fid = 0);
  } @ 51..88 (fid = 0),
]
error[E006]: expected `(`, found `;`
  ┌─ ./tests/parser/E006_funptr_expr_resilience_3.lun:4:28
  │
4 │     let b = *fun(u8) -> fun;
  │                            ^

error: compilation of `E006_funptr_expr_resilience_3` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_global_def_1": (
        compiler_out: "ast = []
error[E006]: expected `:`, found `;`
  ┌─ ./tests/parser/E006_global_def_1.lun:2:2
  │
2 │ a;
  │  ^

error[E006]: expected expression, found end of file
  ┌─ ./tests/parser/E006_global_def_1.lun:3:1
  │
3 │ 
  │ ^

error: compilation of `E006_global_def_1` failed due to 2 errors and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_global_def_2": (
        compiler_out: "ast = []
error[E006]: expected `:`, `=` or `;`, found end of file
  ┌─ ./tests/parser/E006_global_def_2.lun:3:1
  │
2 │ a : u8
  │     -- help: add `;` after this token
3 │ 
  │ ^ unexpected end of file

error: compilation of `E006_global_def_2` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_global_def_3": (
        compiler_out: "ast = [
  GlobalDef {
    name: a @ 39..40 (fid = 0);
    mutability: mut;
    typeexpr: none;
    value: integer 12 @ 44..46 (fid = 0);
  } @ 39..46 (fid = 0),
]
error[E006]: expected `;`, found end of file
  ┌─ ./tests/parser/E006_global_def_3.lun:3:1
  │
2 │ a := 12
  │      -- help: add `;` after this token
3 │ 
  │ ^ unexpected end of file

error: compilation of `E006_global_def_3` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_if_else_1": (
        compiler_out: "ast = []
error[E006]: expected keyword `else`, found identifier
  ┌─ ./tests/parser/E006_if_else_1.lun:2:18
  │
2 │ a :: if a then b c;
  │                  ^

error: compilation of `E006_if_else_1` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_if_else_2": (
        compiler_out: "ast = []
error[E006]: expected `{` or keyword `if`, found identifier
  ┌─ ./tests/parser/E006_if_else_2.lun:2:19
  │
2 │ a :: if b {} else a;
  │                   ^

error: compilation of `E006_if_else_2` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_if_else_3": (
        compiler_out: "ast = []
error[E006]: expected `{`, found identifier
  ┌─ ./tests/parser/E006_if_else_3.lun:2:24
  │
2 │ a :: if b {} else if c d;
  │                        ^

error: compilation of `E006_if_else_3` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_if_else_expr_resilience_1": (
        compiler_out: "ast = [
  GlobalDef {
    name: a @ 51..52 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: Block [
      If {
        cond: Null @ 0..0 (fid = 0);
        body: Block [
          @last_expr: none,
        ] @ 69..71 (fid = 0);
        else_br: none;
      } @ 62..71 (fid = 0) @ 62..71 (fid = 0) @ 62..71 (fid = 0),

      @last_expr: none,
    ] @ 56..74 (fid = 0) @ 56..74 (fid = 0);
  } @ 51..74 (fid = 0),
]
error[E006]: expected `(`, found `{`
  ┌─ ./tests/parser/E006_if_else_expr_resilience_1.lun:4:12
  │
4 │     if fun {};
  │            ^

error: compilation of `E006_if_else_expr_resilience_1` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_import_directive_1": (
        compiler_out: "ast = [
  GlobalDef {
    name: b @ 57..58 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: path imfine @ 62..68 (fid = 0);
  } @ 57..69 (fid = 0),
]
error[E006]: expected identifier, found integer literal
  ┌─ ./tests/parser/E006_import_directive_1.lun:2:14
  │
2 │ #import a as 12;
  │              ^^

error: compilation of `E006_import_directive_1` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_import_directive_2": (
        compiler_out: "ast = [
  Import {
    path: a @ 47..48 (fid = 0);
    alias: b;
  } @ 39..53 (fid = 0),
]
error[E006]: expected `;`, found end of file
  ┌─ ./tests/parser/E006_import_directive_2.lun:3:1
  │
2 │ #import a as b
  │              - help: add `;` after this token
3 │ 
  │ ^ unexpected end of file

error: compilation of `E006_import_directive_2` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_import_directive_resilience_1": (
        compiler_out: "ast = [
  GlobalDef {
    name: b @ 72..73 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: path imfine @ 77..83 (fid = 0);
  } @ 72..84 (fid = 0),
]
error[E006]: expected identifier, found `;`
  ┌─ ./tests/parser/E006_import_directive_resilience_1.lun:3:19
  │
3 │ #import a::b::c as;
  │                   ^

error: compilation of `E006_import_directive_resilience_1` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_item_1": (
        compiler_out: "ast = []
error[E006]: expected item, found keyword `break`
  ┌─ ./tests/parser/E006_item_1.lun:2:1
  │
2 │ break
  │ ^^^^^

error: compilation of `E006_item_1` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_item_2": (
        compiler_out: "ast = []
error[E006]: expected identifier, found keyword `break`
  ┌─ ./tests/parser/E006_item_2.lun:2:2
  │
2 │ #break
  │  ^^^^^

error[E006]: expected identifier, found integer literal
  ┌─ ./tests/parser/E006_item_2.lun:3:2
  │
3 │ #2
  │  ^

error: compilation of `E006_item_2` failed due to 2 errors and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_iterator_loop": (
        compiler_out: "error[E006]: expected keyword `in`, found identifier
  ┌─ ./tests/parser/E006_iterator_loop.lun:2:12
  │
2 │ a :: for i a;
  │            ^

error: compilation of `./tests/parser/E006_iterator_loop` failed due to 1 error and 0 warnings

",
        compiler_code: 101,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_iterator_loop_1": (
        compiler_out: "ast = [
  GlobalDef {
    name: a @ 39..40 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: IteratorLoop {
      label: none;
      variable: �;
      iterator: Null @ 0..0 (fid = 0);
      body: Block [
        @last_expr: none,
      ] @ 0..0 (fid = 0);
    } @ 44..0 (fid = 0);
  } @ 39..0 (fid = 0),
]
error[E006]: expected identifier, found integer literal
  ┌─ ./tests/parser/E006_iterator_loop_1.lun:2:10
  │
2 │ a :: for 12;
  │          ^^

error[E006]: expected keyword `in`, found `;`
  ┌─ ./tests/parser/E006_iterator_loop_1.lun:2:12
  │
2 │ a :: for 12;
  │            ^

error[E006]: expected expression, found end of file
  ┌─ ./tests/parser/E006_iterator_loop_1.lun:3:1
  │
3 │ 
  │ ^

error[E006]: expected `{`, found end of file
  ┌─ ./tests/parser/E006_iterator_loop_1.lun:3:1
  │
3 │ 
  │ ^

error: compilation of `E006_iterator_loop_1` failed due to 4 errors and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_iterator_loop_2": (
        compiler_out: "ast = [
  GlobalDef {
    name: a @ 39..40 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: IteratorLoop {
      label: none;
      variable: i;
      iterator: Null @ 0..0 (fid = 0);
      body: Block [
        @last_expr: none,
      ] @ 0..0 (fid = 0);
    } @ 44..0 (fid = 0);
  } @ 39..0 (fid = 0),
]
error[E006]: expected keyword `in`, found identifier
  ┌─ ./tests/parser/E006_iterator_loop_2.lun:2:12
  │
2 │ a :: for i a;
  │            ^

error[E006]: expected expression, found `;`
  ┌─ ./tests/parser/E006_iterator_loop_2.lun:2:13
  │
2 │ a :: for i a;
  │             ^

error[E006]: expected `{`, found end of file
  ┌─ ./tests/parser/E006_iterator_loop_2.lun:3:1
  │
3 │ 
  │ ^

error: compilation of `E006_iterator_loop_2` failed due to 3 errors and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_let_stmt_1": (
        compiler_out: "ast = [
  GlobalDef {
    name: a @ 39..40 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: Block [
      BindingDef {
        name: � @ 0..0 (fid = 0);
        mutability: not;
        typeexpr: none;
        value: integer 2 @ 59..60 (fid = 0);
      } @ 50..60 (fid = 0),

      @last_expr: none,
    ] @ 44..63 (fid = 0) @ 44..63 (fid = 0);
  } @ 39..63 (fid = 0),
]
error[E006]: expected identifier, found integer literal
  ┌─ ./tests/parser/E006_let_stmt_1.lun:3:9
  │
3 │     let 12 = 2;
  │         ^^

error: compilation of `E006_let_stmt_1` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_let_stmt_2": (
        compiler_out: "ast = [
  GlobalDef {
    name: a @ 39..40 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: Block [
      BindingDef {
        name: a @ 54..55 (fid = 0);
        mutability: not;
        typeexpr: none;
        value: path b @ 58..59 (fid = 0);
      } @ 50..59 (fid = 0),

      @last_expr: none,
    ] @ 44..62 (fid = 0) @ 44..62 (fid = 0);
  } @ 39..62 (fid = 0),
]
error[E006]: expected `=`, found `-`
  ┌─ ./tests/parser/E006_let_stmt_2.lun:3:11
  │
3 │     let a - b;
  │           ^

error: compilation of `E006_let_stmt_2` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_loop_expr_resilience_1": (
        compiler_out: "ast = [
  GlobalDef {
    name: a @ 51..52 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: Block [
      InfiniteLoop {
        label: none;
        body: Block [
          @last_expr: none,
        ] @ 0..0 (fid = 0);
      } @ 62..0 (fid = 0) @ 62..0 (fid = 0),

      @last_expr: none,
    ] @ 56..71 (fid = 0) @ 56..71 (fid = 0);
  } @ 51..71 (fid = 0),
]
error[E006]: expected `{`, found `}`
  ┌─ ./tests/parser/E006_loop_expr_resilience_1.lun:4:10
  │
4 │     loop };
  │          ^

error: compilation of `E006_loop_expr_resilience_1` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_member_access_1": (
        compiler_out: "ast = [
  GlobalDef {
    name: a @ 39..40 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: Field {
      expr: path b @ 44..45 (fid = 0);
      member: �;
    } @ 44..48 (fid = 0);
  } @ 39..49 (fid = 0),
]
error[E006]: expected identifier, found integer literal
  ┌─ ./tests/parser/E006_member_access_1.lun:2:8
  │
2 │ a :: b.12;
  │        ^^

error: compilation of `E006_member_access_1` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_mod_directive_1": (
        compiler_out: "ast = []
error[E006]: expected identifier, found integer literal
  ┌─ ./tests/parser/E006_mod_directive_1.lun:2:6
  │
2 │ #mod 12;
  │      ^^

error: compilation of `E006_mod_directive_1` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_mod_directive_2": (
        compiler_out: "ast = []
error[E006]: expected `;`, found end of file
  ┌─ ./tests/parser/E006_mod_directive_2.lun:3:1
  │
2 │ #mod a
  │      - help: add `;` after this token
3 │ 
  │ ^ unexpected end of file

error: compilation of `E006_mod_directive_2` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_mod_directive_resilience_1": (
        compiler_out: "ast = [
  GlobalDef {
    name: b @ 58..59 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: path imfine @ 63..69 (fid = 0);
  } @ 58..70 (fid = 0),
]
error[E006]: expected identifier, found `;`
  ┌─ ./tests/parser/E006_mod_directive_resilience_1.lun:3:5
  │
3 │ #mod;
  │     ^

error: compilation of `E006_mod_directive_resilience_1` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_mod_directive_resilience_2": (
        compiler_out: "ast = [
  GlobalDef {
    name: b @ 59..60 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: path imfine @ 64..70 (fid = 0);
  } @ 59..71 (fid = 0),
]
error[E006]: expected `;`, found identifier
  ┌─ ./tests/parser/E006_mod_directive_resilience_2.lun:5:1
  │
3 │ #mod a
  │      - help: add `;` after this token
4 │ 
5 │ b :: imfine;
  │ ^ unexpected identifier

error: compilation of `E006_mod_directive_resilience_2` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_paren_expr": (
        compiler_out: "ast = [
  GlobalDef {
    name: a @ 39..40 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: Paren {
      expr: integer 12 @ 45..47 (fid = 0);
    } @ 44..47 (fid = 0);
  } @ 39..48 (fid = 0),
]
error[E006]: expected `)`, found `;`
  ┌─ ./tests/parser/E006_paren_expr.lun:2:9
  │
2 │ a :: (12;
  │         ^

error: compilation of `E006_paren_expr` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_paren_expr_resilience_1": (
        compiler_out: "ast = [
  GlobalDef {
    name: a @ 51..52 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: FunDefinition {
      args: [];
      rettypeexpr: none;
      body: Block [
        BindingDef {
          name: b @ 72..73 (fid = 0);
          mutability: not;
          typeexpr: none;
          value: Paren {
            expr: Null @ 0..0 (fid = 0);
          } @ 76..83 (fid = 0);
        } @ 68..83 (fid = 0),

        @last_expr: none,
      ] @ 62..86 (fid = 0);
    } @ 56..86 (fid = 0);
  } @ 51..86 (fid = 0),
]
error[E006]: expected `(`, found `)`
  ┌─ ./tests/parser/E006_paren_expr_resilience_1.lun:4:19
  │
4 │     let b = ( fun );
  │                   ^

error: compilation of `E006_paren_expr_resilience_1` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_paren_expr_resilience_2": (
        compiler_out: "ast = [
  GlobalDef {
    name: a @ 51..52 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: FunDefinition {
      args: [];
      rettypeexpr: none;
      body: Block [
        BindingDef {
          name: b @ 72..73 (fid = 0);
          mutability: not;
          typeexpr: none;
          value: Paren {
            expr: integer 1 @ 77..78 (fid = 0);
          } @ 76..78 (fid = 0);
        } @ 68..78 (fid = 0),

        @last_expr: none,
      ] @ 62..81 (fid = 0);
    } @ 56..81 (fid = 0);
  } @ 51..81 (fid = 0),
]
error[E006]: expected `)`, found `;`
  ┌─ ./tests/parser/E006_paren_expr_resilience_2.lun:4:15
  │
4 │     let b = (1;
  │               ^

error: compilation of `E006_paren_expr_resilience_2` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_path_expr_1": (
        compiler_out: "ast = [
  GlobalDef {
    name: a @ 39..40 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: Block [
      path b::� @ 50..54 (fid = 0) @ 50..54 (fid = 0),

      @last_expr: none,
    ] @ 44..57 (fid = 0) @ 44..57 (fid = 0);
  } @ 39..57 (fid = 0),
]
error[E006]: expected identifier, found integer literal
  ┌─ ./tests/parser/E006_path_expr_1.lun:3:8
  │
3 │     b::1;
  │        ^

error: compilation of `E006_path_expr_1` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_path_expr_2": (
        compiler_out: "ast = [
  GlobalDef {
    name: a @ 39..40 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: Block [
      path b::~orb @ 50..56 (fid = 0) @ 50..56 (fid = 0),

      @last_expr: none,
    ] @ 44..59 (fid = 0) @ 44..59 (fid = 0);
  } @ 39..59 (fid = 0),
]
error[E006]: expected identifier, found keyword `orb`
  ┌─ ./tests/parser/E006_path_expr_2.lun:3:8
  │
3 │     b::orb;
  │        ^^^
  │
  = 'orb' can only be at the start of a path

error: compilation of `E006_path_expr_2` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_path_resilience_1": (
        compiler_out: "ast = [
  Import {
    path: a::�::� @ 59..0 (fid = 0);
    alias: none;
  } @ 51..67 (fid = 0),

  GlobalDef {
    name: b @ 69..70 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: path imfine @ 74..80 (fid = 0);
  } @ 69..81 (fid = 0),
]
error[E006]: expected identifier, found `#`
  ┌─ ./tests/parser/E006_path_resilience_1.lun:3:12
  │
3 │ #import a::#::#;
  │            ^

error[E006]: expected identifier, found `#`
  ┌─ ./tests/parser/E006_path_resilience_1.lun:3:15
  │
3 │ #import a::#::#;
  │               ^

error: compilation of `E006_path_resilience_1` failed due to 2 errors and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_qualified_path_1": (
        compiler_out: "ast = [
  Import {
    path: ∅ @ 0..0 (fid = 0);
    alias: none;
  } @ 39..49 (fid = 0),
]
error[E006]: expected keyword `orb` or identifier, found integer literal
  ┌─ ./tests/parser/E006_qualified_path_1.lun:2:9
  │
2 │ #import 1;
  │         ^

error: compilation of `E006_qualified_path_1` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_qualified_path_2": (
        compiler_out: "ast = [
  Import {
    path: a::� @ 47..0 (fid = 0);
    alias: none;
  } @ 39..52 (fid = 0),
]
error[E006]: expected identifier, found integer literal
  ┌─ ./tests/parser/E006_qualified_path_2.lun:2:12
  │
2 │ #import a::1;
  │            ^

error: compilation of `E006_qualified_path_2` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_return_expr_resilience_1": (
        compiler_out: "ast = [
  GlobalDef {
    name: a @ 51..52 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: Block [
      Return {
        expr: Null @ 0..0 (fid = 0);
      } @ 62..0 (fid = 0) @ 62..0 (fid = 0),

      @last_expr: none,
    ] @ 56..75 (fid = 0) @ 56..75 (fid = 0);
  } @ 51..75 (fid = 0),
]
error[E006]: expected `(`, found `;`
  ┌─ ./tests/parser/E006_return_expr_resilience_1.lun:4:15
  │
4 │     return fun;
  │               ^

error: compilation of `E006_return_expr_resilience_1` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_short_binding_def_stmt_1": (
        compiler_out: "ast = [
  GlobalDef {
    name: a @ 39..40 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: Block [
      BindingDef {
        name: � @ 50..53 (fid = 0);
        mutability: mut;
        typeexpr: none;
        value: integer 2 @ 59..60 (fid = 0);
      } @ 50..60 (fid = 0),

      @last_expr: none,
    ] @ 44..63 (fid = 0) @ 44..63 (fid = 0);
  } @ 39..63 (fid = 0),
]
error[E006]: expected identifier, found integer literal
  ┌─ ./tests/parser/E006_short_binding_def_stmt_1.lun:3:9
  │
3 │     mut 1 := 2;
  │         ^

error: compilation of `E006_short_binding_def_stmt_1` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_short_binding_def_stmt_2": (
        compiler_out: "ast = [
  GlobalDef {
    name: a @ 39..40 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: Block [
      @last_expr: none,
    ] @ 44..63 (fid = 0) @ 44..63 (fid = 0);
  } @ 39..63 (fid = 0),
]
error[E006]: expected `:`, found identifier
  ┌─ ./tests/parser/E006_short_binding_def_stmt_2.lun:3:11
  │
3 │     mut a d= 2;
  │           ^

error: compilation of `E006_short_binding_def_stmt_2` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_short_binding_def_stmt_3": (
        compiler_out: "ast = [
  GlobalDef {
    name: a @ 39..40 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: Block [
      @last_expr: none,
    ] @ 44..62 (fid = 0) @ 44..62 (fid = 0);
  } @ 39..62 (fid = 0),
]
error[E006]: expected `=`, found `:`
  ┌─ ./tests/parser/E006_short_binding_def_stmt_3.lun:3:11
  │
3 │     b : a : 2;
  │           ^

error: compilation of `E006_short_binding_def_stmt_3` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_while_expr_resilience_1": (
        compiler_out: "ast = [
  GlobalDef {
    name: a @ 51..52 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: Block [
      PredicateLoop {
        label: none;
        cond: Null @ 0..0 (fid = 0);
        body: Block [
          @last_expr: none,
        ] @ 72..74 (fid = 0);
      } @ 62..74 (fid = 0) @ 62..74 (fid = 0),

      @last_expr: none,
    ] @ 56..77 (fid = 0) @ 56..77 (fid = 0);
  } @ 51..77 (fid = 0),
]
error[E006]: expected `(`, found `{`
  ┌─ ./tests/parser/E006_while_expr_resilience_1.lun:4:15
  │
4 │     while fun {};
  │               ^

error: compilation of `E006_while_expr_resilience_1` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E006_while_expr_resilience_2": (
        compiler_out: "ast = [
  GlobalDef {
    name: a @ 51..52 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: Block [
      PredicateLoop {
        label: none;
        cond: boolean true @ 68..72 (fid = 0);
        body: Block [
          @last_expr: none,
        ] @ 0..0 (fid = 0);
      } @ 62..0 (fid = 0) @ 62..0 (fid = 0),

      @last_expr: none,
    ] @ 56..77 (fid = 0) @ 56..77 (fid = 0);
  } @ 51..77 (fid = 0),
]
error[E006]: expected `{`, found `}`
  ┌─ ./tests/parser/E006_while_expr_resilience_2.lun:4:16
  │
4 │     while true };
  │                ^

error: compilation of `E006_while_expr_resilience_2` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E035_1": (
        compiler_out: "ast = []
error[E035]: unknown directive 'mot'
  ┌─ ./tests/parser/E035_1.lun:2:2
  │
2 │ #mot
  │  ^^^
  │
  = did you mean 'mod'?

error: compilation of `E035_1` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E035_2": (
        compiler_out: "ast = []
error[E035]: unknown directive 'inport'
  ┌─ ./tests/parser/E035_2.lun:2:2
  │
2 │ #inport
  │  ^^^^^^
  │
  = did you mean 'import'?

error: compilation of `E035_2` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E035_3": (
        compiler_out: "ast = []
error[E035]: unknown directive 'abracadabra'
  ┌─ ./tests/parser/E035_3.lun:2:2
  │
2 │ #abracadabra
  │  ^^^^^^^^^^^

error: compilation of `E035_3` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/E038": (
        compiler_out: r#"ast = [
  ExternBlock {
    abi: C;
    items: [];
  } @ 36..52 (fid = 0),
]
error[E038]: ABI 'boum' isn't known
  ┌─ ./tests/parser/E038.lun:2:8
  │
2 │ extern "boum" {}
  │        ^^^^^^

error: compilation of `E038` failed due to 1 error and 0 warnings

"#,
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "parser/directive": (
        compiler_out: "ast = [
  Mod {
    name: module;
  } @ 20..32 (fid = 0),

  Import {
    path: orb::driver::run @ 62..78 (fid = 0);
    alias: none;
  } @ 54..79 (fid = 0),

  Import {
    path: std @ 88..91 (fid = 0);
    alias: none;
  } @ 80..92 (fid = 0),

  Import {
    path: std::rc::Rc @ 101..112 (fid = 0);
    alias: ReferenceCountedPtr;
  } @ 93..136 (fid = 0),
]
",
        compiler_code: 0,
        test_out: "",
        test_code: 0,
    ),
    "parser/expression": (
        compiler_out: r#"ast = [
  GlobalDef {
    name: main @ 11..15 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: FunDefinition {
      args: [];
      rettypeexpr: none;
      body: Block [
        Binary {
          lhs: path _ @ 54..55 (fid = 0);
          op: Assignment;
          rhs: integer 12 @ 58..60 (fid = 0);
        } @ 54..60 (fid = 0) @ 54..60 (fid = 0),

        Binary {
          lhs: path _ @ 87..88 (fid = 0);
          op: Assignment;
          rhs: boolean true @ 91..95 (fid = 0);
        } @ 87..95 (fid = 0) @ 87..95 (fid = 0),

        Binary {
          lhs: path _ @ 101..102 (fid = 0);
          op: Assignment;
          rhs: boolean false @ 105..110 (fid = 0);
        } @ 101..110 (fid = 0) @ 101..110 (fid = 0),

        Binary {
          lhs: path _ @ 139..140 (fid = 0);
          op: Assignment;
          rhs: string "Hello world!" @ 143..157 (fid = 0);
        } @ 139..157 (fid = 0) @ 139..157 (fid = 0),

        Binary {
          lhs: path _ @ 184..185 (fid = 0);
          op: Assignment;
          rhs: char 'C' @ 188..191 (fid = 0);
        } @ 184..191 (fid = 0) @ 184..191 (fid = 0),

        Binary {
          lhs: path _ @ 219..220 (fid = 0);
          op: Assignment;
          rhs: float 6.0219999999999996e23 @ 223..231 (fid = 0);
        } @ 219..231 (fid = 0) @ 219..231 (fid = 0),

        Binary {
          lhs: path _ @ 256..257 (fid = 0);
          op: Assignment;
          rhs: Paren {
            expr: Binary {
              lhs: integer 12 @ 261..263 (fid = 0);
              op: Add;
              rhs: integer 3 @ 266..267 (fid = 0);
            } @ 261..267 (fid = 0);
          } @ 260..268 (fid = 0);
        } @ 256..268 (fid = 0) @ 256..268 (fid = 0),

        Binary {
          lhs: path _ @ 293..294 (fid = 0);
          op: Assignment;
          rhs: path main @ 297..301 (fid = 0);
        } @ 293..301 (fid = 0) @ 293..301 (fid = 0),

        Binary {
          lhs: path _ @ 325..326 (fid = 0);
          op: Assignment;
          rhs: Binary {
            lhs: integer 34 @ 329..331 (fid = 0);
            op: Add;
            rhs: integer 35 @ 334..336 (fid = 0);
          } @ 329..336 (fid = 0);
        } @ 325..336 (fid = 0) @ 325..336 (fid = 0),

        Binary {
          lhs: path _ @ 359..360 (fid = 0);
          op: Assignment;
          rhs: Unary {
            op: Not;
            expr: boolean false @ 364..369 (fid = 0);
          } @ 363..369 (fid = 0);
        } @ 359..369 (fid = 0) @ 359..369 (fid = 0),

        Binary {
          lhs: path _ @ 375..376 (fid = 0);
          op: Assignment;
          rhs: Unary {
            op: Negation;
            expr: float 12.0 @ 380..384 (fid = 0);
          } @ 379..384 (fid = 0);
        } @ 375..384 (fid = 0) @ 375..384 (fid = 0),

        Binary {
          lhs: path _ @ 407..408 (fid = 0);
          op: Assignment;
          rhs: Call {
            callee: path some_fun @ 411..419 (fid = 0);
            args: [];
          } @ 411..421 (fid = 0);
        } @ 407..421 (fid = 0) @ 407..421 (fid = 0),

        Binary {
          lhs: path _ @ 427..428 (fid = 0);
          op: Assignment;
          rhs: Call {
            callee: path some_fun @ 431..439 (fid = 0);
            args: [
              integer 1 @ 440..441 (fid = 0),
            ];
          } @ 431..442 (fid = 0);
        } @ 427..442 (fid = 0) @ 427..442 (fid = 0),

        Binary {
          lhs: path _ @ 448..449 (fid = 0);
          op: Assignment;
          rhs: Call {
            callee: path some_fun @ 452..460 (fid = 0);
            args: [
              integer 1 @ 461..462 (fid = 0),

              integer 2 @ 464..465 (fid = 0),
            ];
          } @ 452..466 (fid = 0);
        } @ 448..466 (fid = 0) @ 448..466 (fid = 0),

        Binary {
          lhs: path _ @ 472..473 (fid = 0);
          op: Assignment;
          rhs: Call {
            callee: path some_fun @ 476..484 (fid = 0);
            args: [
              integer 1 @ 485..486 (fid = 0),

              integer 2 @ 488..489 (fid = 0),
            ];
          } @ 476..491 (fid = 0);
        } @ 472..491 (fid = 0) @ 472..491 (fid = 0),

        If {
          cond: boolean true @ 511..515 (fid = 0);
          body: Block [
            Call {
              callee: path main @ 526..530 (fid = 0);
              args: [];
            } @ 526..532 (fid = 0) @ 526..532 (fid = 0),

            @last_expr: none,
          ] @ 516..539 (fid = 0);
          else_br: Block [
            Call {
              callee: path main @ 555..559 (fid = 0);
              args: [];
            } @ 555..561 (fid = 0) @ 555..561 (fid = 0),

            @last_expr: none,
          ] @ 545..568 (fid = 0);
        } @ 508..568 (fid = 0) @ 508..568 (fid = 0) @ 508..568 (fid = 0),

        Binary {
          lhs: path _ @ 594..595 (fid = 0);
          op: Assignment;
          rhs: IfThenElse {
            cond: Binary {
              lhs: integer 23 @ 601..603 (fid = 0);
              op: CompGT;
              rhs: integer 12 @ 606..608 (fid = 0);
            } @ 601..608 (fid = 0);
            true_val: boolean false @ 614..619 (fid = 0);
            false_val: boolean true @ 625..629 (fid = 0);
          } @ 598..629 (fid = 0);
        } @ 594..629 (fid = 0) @ 594..629 (fid = 0),

        Block [
          Binary {
            lhs: path _ @ 659..660 (fid = 0);
            op: Assignment;
            rhs: integer 2 @ 663..664 (fid = 0);
          } @ 659..664 (fid = 0) @ 659..664 (fid = 0),

          Binary {
            lhs: path _ @ 674..675 (fid = 0);
            op: Assignment;
            rhs: Call {
              callee: path main @ 678..682 (fid = 0);
              args: [];
            } @ 678..684 (fid = 0);
          } @ 674..684 (fid = 0) @ 674..684 (fid = 0),

          @last_expr: none,
        ] @ 649..691 (fid = 0) @ 649..691 (fid = 0) @ 649..691 (fid = 0),

        BlockWithLabel {
          label: label_block @ 697..708 (fid = 0);
          block: Block [
            Break {
              label: label_block;
              expr: none;
            } @ 720..738 (fid = 0) @ 720..738 (fid = 0),

            @last_expr: none,
          ] @ 710..745 (fid = 0);
        } @ 697..745 (fid = 0) @ 697..745 (fid = 0),

        PredicateLoop {
          label: none;
          cond: Call {
            callee: path predicate @ 779..788 (fid = 0);
            args: [];
          } @ 779..790 (fid = 0);
          body: Block [
            Call {
              callee: path println @ 801..808 (fid = 0);
              args: [
                string "Hello!" @ 809..817 (fid = 0),
              ];
            } @ 801..818 (fid = 0) @ 801..818 (fid = 0),

            @last_expr: none,
          ] @ 791..825 (fid = 0);
        } @ 773..825 (fid = 0) @ 773..825 (fid = 0),

        PredicateLoop {
          label: label @ 831..836 (fid = 0);
          cond: path condition @ 844..853 (fid = 0);
          body: Block [
            Call {
              callee: path println @ 864..871 (fid = 0);
              args: [
                string "Hello from loop with label" @ 872..900 (fid = 0),
              ];
            } @ 864..901 (fid = 0) @ 864..901 (fid = 0),

            Continue {
              label: label;
            } @ 911..926 (fid = 0) @ 911..926 (fid = 0),

            @last_expr: none,
          ] @ 854..933 (fid = 0);
        } @ 831..933 (fid = 0) @ 831..933 (fid = 0),

        IteratorLoop {
          label: none;
          variable: i;
          iterator: Call {
            callee: path range @ 969..974 (fid = 0);
            args: [
              integer 1 @ 975..976 (fid = 0),

              integer 12 @ 978..980 (fid = 0),
            ];
          } @ 969..981 (fid = 0);
          body: Block [
            @last_expr: none,
          ] @ 982..1005 (fid = 0);
        } @ 960..1005 (fid = 0) @ 960..1005 (fid = 0),

        IteratorLoop {
          label: label2 @ 1011..1017 (fid = 0);
          variable: j;
          iterator: Call {
            callee: path range @ 1028..1033 (fid = 0);
            args: [
              integer 13 @ 1034..1036 (fid = 0),

              integer 16 @ 1038..1040 (fid = 0),
            ];
          } @ 1028..1041 (fid = 0);
          body: Block [
            @last_expr: none,
          ] @ 1042..1065 (fid = 0);
        } @ 1011..1065 (fid = 0) @ 1011..1065 (fid = 0),

        InfiniteLoop {
          label: none;
          body: Block [
            Break {
              label: none;
              expr: none;
            } @ 1123..1128 (fid = 0) @ 1123..1128 (fid = 0),

            @last_expr: none,
          ] @ 1097..1135 (fid = 0);
        } @ 1092..1135 (fid = 0) @ 1092..1135 (fid = 0),

        InfiniteLoop {
          label: label3 @ 1141..1147 (fid = 0);
          body: Block [
            @last_expr: none,
          ] @ 1154..1177 (fid = 0);
        } @ 1141..1177 (fid = 0) @ 1141..1177 (fid = 0),

        Return {
          expr: Binary {
            lhs: integer 12 @ 1204..1206 (fid = 0);
            op: Mul;
            rhs: integer 8 @ 1209..1210 (fid = 0);
          } @ 1204..1210 (fid = 0);
        } @ 1197..1210 (fid = 0) @ 1197..1210 (fid = 0),

        Return {
          expr: none;
        } @ 1216..1222 (fid = 0) @ 1216..1222 (fid = 0),

        Continue @ 1245..1253 (fid = 0) @ 1245..1253 (fid = 0),

        Binary {
          lhs: path _ @ 1272..1273 (fid = 0);
          op: Assignment;
          rhs: Null @ 1276..1280 (fid = 0);
        } @ 1272..1280 (fid = 0) @ 1272..1280 (fid = 0),

        Binary {
          lhs: path _ @ 1300..1301 (fid = 0);
          op: Assignment;
          rhs: Unary {
            op: Dereference;
            expr: path some_pointer @ 1304..1316 (fid = 0);
          } @ 1304..1318 (fid = 0);
        } @ 1300..1318 (fid = 0) @ 1300..1318 (fid = 0),

        Binary {
          lhs: path _ @ 1346..1347 (fid = 0);
          op: Assignment;
          rhs: Call {
            callee: Field {
              expr: string "Hello" @ 1350..1357 (fid = 0);
              member: len;
            } @ 1350..1361 (fid = 0);
            args: [];
          } @ 1350..1363 (fid = 0);
        } @ 1346..1363 (fid = 0) @ 1346..1363 (fid = 0),

        Binary {
          lhs: path _ @ 1370..1371 (fid = 0);
          op: Assignment;
          rhs: Call {
            callee: Field {
              expr: Field {
                expr: path orb @ 1374..1377 (fid = 0);
                member: driver;
              } @ 1374..1384 (fid = 0);
              member: run;
            } @ 1374..1388 (fid = 0);
            args: [];
          } @ 1374..1390 (fid = 0);
        } @ 1370..1390 (fid = 0) @ 1370..1390 (fid = 0),

        Binary {
          lhs: path _ @ 1432..1433 (fid = 0);
          op: Assignment;
          rhs: PointerType {
            mutability: not;
            typeexpr: path u32 @ 1437..1440 (fid = 0);
          } @ 1436..1440 (fid = 0);
        } @ 1432..1440 (fid = 0) @ 1432..1440 (fid = 0),

        Binary {
          lhs: path _ @ 1446..1447 (fid = 0);
          op: Assignment;
          rhs: PointerType {
            mutability: mut;
            typeexpr: path u32 @ 1455..1458 (fid = 0);
          } @ 1450..1458 (fid = 0);
        } @ 1446..1458 (fid = 0) @ 1446..1458 (fid = 0),

        Binary {
          lhs: path _ @ 1494..1495 (fid = 0);
          op: Assignment;
          rhs: FunPtrType {
            args: [];
            ret: none;
          } @ 1498..1504 (fid = 0);
        } @ 1494..1504 (fid = 0) @ 1494..1504 (fid = 0),

        Binary {
          lhs: path _ @ 1510..1511 (fid = 0);
          op: Assignment;
          rhs: FunPtrType {
            args: [
              path usz @ 1519..1522 (fid = 0),

              path bool @ 1524..1528 (fid = 0),
            ];
            ret: path usz @ 1533..1536 (fid = 0);
          } @ 1514..1536 (fid = 0);
        } @ 1510..1536 (fid = 0) @ 1510..1536 (fid = 0),

        Binary {
          lhs: path _ @ 1542..1543 (fid = 0);
          op: Assignment;
          rhs: FunPtrType {
            args: [
              path usz @ 1551..1554 (fid = 0),
            ];
            ret: path usz @ 1560..1563 (fid = 0);
          } @ 1546..1563 (fid = 0);
        } @ 1542..1563 (fid = 0) @ 1542..1563 (fid = 0),

        @last_expr: none,
      ] @ 25..1566 (fid = 0);
    } @ 19..1566 (fid = 0);
  } @ 11..1566 (fid = 0),
]
"#,
        compiler_code: 0,
        test_out: "",
        test_code: 0,
    ),
    "parser/item": (
        compiler_out: r#"ast = [
  GlobalDef {
    name: main @ 19..23 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: FunDefinition {
      args: [];
      rettypeexpr: none;
      body: Block [
        @last_expr: none,
      ] @ 33..35 (fid = 0);
    } @ 27..35 (fid = 0);
  } @ 19..35 (fid = 0),

  GlobalDef {
    name: avogadro @ 36..44 (fid = 0);
    mutability: not;
    typeexpr: path f64 @ 47..50 (fid = 0);
    value: float 6.0219999999999996e23 @ 53..61 (fid = 0);
  } @ 36..62 (fid = 0),

  GlobalDef {
    name: hello @ 78..83 (fid = 0);
    mutability: mut;
    typeexpr: PointerType {
      mutability: not;
      typeexpr: path str @ 87..90 (fid = 0);
    } @ 86..90 (fid = 0);
    value: string "Hello" @ 93..100 (fid = 0);
  } @ 78..101 (fid = 0),

  GlobalDef {
    name: globFloat @ 102..111 (fid = 0);
    mutability: mut;
    typeexpr: none;
    value: float 12.0 @ 115..119 (fid = 0);
  } @ 102..120 (fid = 0),

  ExternBlock {
    abi: C;
    items: [
      GlobalDef {
        name: hello @ 155..160 (fid = 0);
        mutability: not;
        typeexpr: none;
        value: FunDeclaration {
          args: [];
          rettypeexpr: none;
        } @ 164..169 (fid = 0);
      } @ 155..170 (fid = 0),

      GlobalUninit {
        name: some_static @ 175..186 (fid = 0);
        typeexpr: PointerType {
          mutability: not;
          typeexpr: path str @ 190..193 (fid = 0);
        } @ 189..193 (fid = 0);
      } @ 175..194 (fid = 0),
    ];
  } @ 138..196 (fid = 0),
]
"#,
        compiler_code: 0,
        test_out: "",
        test_code: 0,
    ),
    "parser/statement": (
        compiler_out: "ast = [
  GlobalDef {
    name: main @ 0..4 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: FunDefinition {
      args: [];
      rettypeexpr: none;
      body: Block [
        BindingDef {
          name: a @ 47..48 (fid = 0);
          mutability: not;
          typeexpr: none;
          value: integer 12 @ 51..53 (fid = 0);
        } @ 43..53 (fid = 0),

        BindingDef {
          name: b @ 67..68 (fid = 0);
          mutability: mut;
          typeexpr: none;
          value: integer 34 @ 71..73 (fid = 0);
        } @ 59..73 (fid = 0),

        BindingDef {
          name: c @ 105..106 (fid = 0);
          mutability: not;
          typeexpr: none;
          value: integer 56 @ 110..112 (fid = 0);
        } @ 105..112 (fid = 0),

        BindingDef {
          name: d @ 118..121 (fid = 0);
          mutability: mut;
          typeexpr: none;
          value: integer 78 @ 127..129 (fid = 0);
        } @ 118..129 (fid = 0),

        Defer {
          expr: Block [
            @last_expr: none,
          ] @ 165..167 (fid = 0) @ 165..167 (fid = 0);
        } @ 159..167 (fid = 0),

        Call {
          callee: path hello_world @ 201..212 (fid = 0);
          args: [];
        } @ 201..214 (fid = 0) @ 201..214 (fid = 0),

        @last_expr: none,
      ] @ 14..217 (fid = 0);
    } @ 8..217 (fid = 0);
  } @ 0..217 (fid = 0),
]
",
        compiler_code: 0,
        test_out: "",
        test_code: 0,
    ),
    "parser/typeexpr_rests_block": (
        compiler_out: "ast = [
  GlobalDef {
    name: e @ 21..22 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: FunDefinition {
      args: [
        Arg {
          name: e @ 30..31 (fid = 0);
          typeexpr: Block [
            @last_expr: Binary {
              lhs: path a @ 34..35 (fid = 0);
              op: Assignment;
              rhs: integer 32 @ 38..40 (fid = 0);
            } @ 34..40 (fid = 0),
          ] @ 33..41 (fid = 0) @ 33..41 (fid = 0);
        } @ 30..41 (fid = 0),
      ];
      rettypeexpr: none;
      body: Block [
        @last_expr: none,
      ] @ 43..45 (fid = 0);
    } @ 26..45 (fid = 0);
  } @ 21..45 (fid = 0),

  GlobalDef {
    name: f @ 46..47 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: FunDefinition {
      args: [
        Arg {
          name: f @ 55..56 (fid = 0);
          typeexpr: Block [
            @last_expr: InfiniteLoop {
              label: a @ 60..61 (fid = 0);
              body: Block [
                @last_expr: none,
              ] @ 68..70 (fid = 0);
            } @ 60..70 (fid = 0),
          ] @ 58..72 (fid = 0) @ 58..72 (fid = 0);
        } @ 55..72 (fid = 0),
      ];
      rettypeexpr: none;
      body: Block [
        @last_expr: none,
      ] @ 74..76 (fid = 0);
    } @ 51..76 (fid = 0);
  } @ 46..76 (fid = 0),
]
",
        compiler_code: 0,
        test_out: "",
        test_code: 0,
    ),
    "parser/typeexpr_rests_call": (
        compiler_out: "ast = [
  GlobalDef {
    name: a @ 0..1 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: Block [
      BindingDef {
        name: j @ 35..36 (fid = 0);
        mutability: not;
        typeexpr: Call {
          callee: path j @ 39..40 (fid = 0);
          args: [
            Binary {
              lhs: path a @ 41..42 (fid = 0);
              op: Assignment;
              rhs: path u32 @ 45..48 (fid = 0);
            } @ 41..48 (fid = 0),
          ];
        } @ 39..49 (fid = 0);
        value: integer 1 @ 52..53 (fid = 0);
      } @ 35..53 (fid = 0),

      @last_expr: none,
    ] @ 5..56 (fid = 0) @ 5..56 (fid = 0);
  } @ 0..56 (fid = 0),
]
",
        compiler_code: 0,
        test_out: "",
        test_code: 0,
    ),
    "parser/typeexpr_rests_for": (
        compiler_out: "ast = [
  GlobalDef {
    name: a @ 0..1 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: Block [
      BindingDef {
        name: l @ 44..45 (fid = 0);
        mutability: not;
        typeexpr: none;
        value: FunDefinition {
          args: [
            Arg {
              name: l @ 53..54 (fid = 0);
              typeexpr: IteratorLoop {
                label: none;
                variable: _;
                iterator: InfiniteLoop {
                  label: a @ 65..66 (fid = 0);
                  body: Block [
                    @last_expr: none,
                  ] @ 73..75 (fid = 0);
                } @ 65..75 (fid = 0);
                body: Block [
                  @last_expr: none,
                ] @ 76..78 (fid = 0);
              } @ 56..78 (fid = 0);
            } @ 53..78 (fid = 0),
          ];
          rettypeexpr: none;
          body: Block [
            @last_expr: none,
          ] @ 80..82 (fid = 0);
        } @ 49..82 (fid = 0);
      } @ 44..82 (fid = 0),

      BindingDef {
        name: m @ 88..89 (fid = 0);
        mutability: not;
        typeexpr: none;
        value: FunDefinition {
          args: [
            Arg {
              name: m @ 97..98 (fid = 0);
              typeexpr: IteratorLoop {
                label: none;
                variable: _;
                iterator: path _ @ 109..110 (fid = 0);
                body: Block [
                  @last_expr: InfiniteLoop {
                    label: a @ 112..113 (fid = 0);
                    body: Block [
                      @last_expr: none,
                    ] @ 120..122 (fid = 0);
                  } @ 112..122 (fid = 0),
                ] @ 111..124 (fid = 0);
              } @ 100..124 (fid = 0);
            } @ 97..124 (fid = 0),
          ];
          rettypeexpr: none;
          body: Block [
            @last_expr: none,
          ] @ 126..128 (fid = 0);
        } @ 93..128 (fid = 0);
      } @ 88..128 (fid = 0),

      @last_expr: none,
    ] @ 5..131 (fid = 0) @ 5..131 (fid = 0);
  } @ 0..131 (fid = 0),
]
",
        compiler_code: 0,
        test_out: "",
        test_code: 0,
    ),
    "parser/typeexpr_rests_fundef": (
        compiler_out: "ast = [
  GlobalDef {
    name: a @ 0..1 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: Block [
      BindingDef {
        name: o @ 37..38 (fid = 0);
        mutability: not;
        typeexpr: none;
        value: FunDefinition {
          args: [
            Arg {
              name: o @ 46..47 (fid = 0);
              typeexpr: FunDefinition {
                args: [];
                rettypeexpr: none;
                body: Block [
                  @last_expr: InfiniteLoop {
                    label: a @ 77..78 (fid = 0);
                    body: Block [
                      @last_expr: none,
                    ] @ 85..87 (fid = 0);
                  } @ 77..87 (fid = 0),
                ] @ 63..97 (fid = 0);
              } @ 57..97 (fid = 0);
            } @ 46..97 (fid = 0),
          ];
          rettypeexpr: none;
          body: Block [
            @last_expr: none,
          ] @ 104..106 (fid = 0);
        } @ 42..106 (fid = 0);
      } @ 37..106 (fid = 0),

      @last_expr: none,
    ] @ 5..109 (fid = 0) @ 5..109 (fid = 0);
  } @ 0..109 (fid = 0),
]
",
        compiler_code: 0,
        test_out: "",
        test_code: 0,
    ),
    "parser/typeexpr_rests_if": (
        compiler_out: "ast = [
  GlobalDef {
    name: a @ 0..1 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: Block [
      BindingDef {
        name: h @ 33..34 (fid = 0);
        mutability: not;
        typeexpr: If {
          cond: InfiniteLoop {
            label: a @ 40..41 (fid = 0);
            body: Block [
              @last_expr: none,
            ] @ 48..50 (fid = 0);
          } @ 40..50 (fid = 0);
          body: Block [
            @last_expr: none,
          ] @ 51..53 (fid = 0);
          else_br: Block [
            @last_expr: none,
          ] @ 59..61 (fid = 0);
        } @ 37..61 (fid = 0) @ 37..61 (fid = 0);
        value: integer 1 @ 64..65 (fid = 0);
      } @ 33..65 (fid = 0),

      BindingDef {
        name: i @ 72..73 (fid = 0);
        mutability: not;
        typeexpr: none;
        value: FunDefinition {
          args: [
            Arg {
              name: i @ 81..82 (fid = 0);
              typeexpr: If {
                cond: boolean false @ 87..92 (fid = 0);
                body: Block [
                  @last_expr: BlockWithLabel {
                    label: a @ 103..104 (fid = 0);
                    block: Block [
                      @last_expr: none,
                    ] @ 106..108 (fid = 0);
                  } @ 103..108 (fid = 0),
                ] @ 93..114 (fid = 0);
                else_br: Block [
                  @last_expr: none,
                ] @ 120..122 (fid = 0);
              } @ 84..122 (fid = 0) @ 84..122 (fid = 0);
            } @ 81..122 (fid = 0),
          ];
          rettypeexpr: none;
          body: Block [
            @last_expr: none,
          ] @ 124..126 (fid = 0);
        } @ 77..126 (fid = 0);
      } @ 72..126 (fid = 0),

      @last_expr: none,
    ] @ 5..129 (fid = 0) @ 5..129 (fid = 0);
  } @ 0..129 (fid = 0),
]
",
        compiler_code: 0,
        test_out: "",
        test_code: 0,
    ),
    "parser/typeexpr_rests_let": (
        compiler_out: "ast = [
  GlobalDef {
    name: g @ 24..25 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: FunDefinition {
      args: [
        Arg {
          name: g @ 33..34 (fid = 0);
          typeexpr: Block [
            BindingDef {
              name: a @ 46..47 (fid = 0);
              mutability: not;
              typeexpr: none;
              value: InfiniteLoop {
                label: a @ 50..51 (fid = 0);
                body: Block [
                  @last_expr: none,
                ] @ 58..60 (fid = 0);
              } @ 50..60 (fid = 0);
            } @ 42..60 (fid = 0),

            @last_expr: none,
          ] @ 36..63 (fid = 0) @ 36..63 (fid = 0);
        } @ 33..63 (fid = 0),
      ];
      rettypeexpr: none;
      body: Block [
        @last_expr: none,
      ] @ 65..67 (fid = 0);
    } @ 29..67 (fid = 0);
  } @ 24..67 (fid = 0),
]
",
        compiler_code: 0,
        test_out: "",
        test_code: 0,
    ),
    "parser/typeexpr_rests_loop": (
        compiler_out: "ast = [
  GlobalDef {
    name: a @ 0..1 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: Block [
      BindingDef {
        name: n @ 44..45 (fid = 0);
        mutability: not;
        typeexpr: none;
        value: FunDefinition {
          args: [
            Arg {
              name: n @ 53..54 (fid = 0);
              typeexpr: InfiniteLoop {
                label: none;
                body: Block [
                  @last_expr: InfiniteLoop {
                    label: a @ 63..64 (fid = 0);
                    body: Block [
                      @last_expr: none,
                    ] @ 71..73 (fid = 0);
                  } @ 63..73 (fid = 0),
                ] @ 61..75 (fid = 0);
              } @ 56..75 (fid = 0);
            } @ 53..75 (fid = 0),
          ];
          rettypeexpr: none;
          body: Block [
            @last_expr: none,
          ] @ 77..79 (fid = 0);
        } @ 49..79 (fid = 0);
      } @ 44..79 (fid = 0),

      @last_expr: none,
    ] @ 5..82 (fid = 0) @ 5..82 (fid = 0);
  } @ 0..82 (fid = 0),
]
",
        compiler_code: 0,
        test_out: "",
        test_code: 0,
    ),
    "parser/typeexpr_rests_paren": (
        compiler_out: "ast = [
  GlobalDef {
    name: a @ 0..1 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: Block [
      BindingDef {
        name: b @ 42..45 (fid = 0);
        mutability: mut;
        typeexpr: Paren {
          expr: Binary {
            lhs: path a @ 51..52 (fid = 0);
            op: Assignment;
            rhs: path u32 @ 55..58 (fid = 0);
          } @ 51..58 (fid = 0);
        } @ 50..59 (fid = 0);
        value: integer 12 @ 62..64 (fid = 0);
      } @ 42..64 (fid = 0),

      BindingDef {
        name: c @ 70..71 (fid = 0);
        mutability: not;
        typeexpr: Paren {
          expr: InfiniteLoop {
            label: a @ 75..76 (fid = 0);
            body: Block [
              @last_expr: none,
            ] @ 83..85 (fid = 0);
          } @ 75..85 (fid = 0);
        } @ 74..86 (fid = 0);
        value: integer 12 @ 89..91 (fid = 0);
      } @ 70..91 (fid = 0),

      @last_expr: none,
    ] @ 5..94 (fid = 0) @ 5..94 (fid = 0);
  } @ 0..94 (fid = 0),
]
",
        compiler_code: 0,
        test_out: "",
        test_code: 0,
    ),
    "parser/typeexpr_rests_while": (
        compiler_out: "ast = [
  GlobalDef {
    name: k @ 26..27 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: FunDefinition {
      args: [
        Arg {
          name: k @ 35..36 (fid = 0);
          typeexpr: PredicateLoop {
            label: none;
            cond: boolean true @ 44..48 (fid = 0);
            body: Block [
              @last_expr: InfiniteLoop {
                label: a @ 55..56 (fid = 0);
                body: Block [
                  @last_expr: none,
                ] @ 63..65 (fid = 0);
              } @ 55..65 (fid = 0),
            ] @ 49..67 (fid = 0);
          } @ 38..67 (fid = 0);
        } @ 35..67 (fid = 0),
      ];
      rettypeexpr: none;
      body: Block [
        @last_expr: none,
      ] @ 69..71 (fid = 0);
    } @ 31..71 (fid = 0);
  } @ 26..71 (fid = 0),
]
",
        compiler_code: 0,
        test_out: "",
        test_code: 0,
    ),
    "parser/typexpr_restrictions": (
        compiler_out: "ast = [
  GlobalDef {
    name: a @ 0..1 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: FunDefinition {
      args: [];
      rettypeexpr: none;
      body: Block [
        BindingDef {
          name: a @ 17..18 (fid = 0);
          mutability: not;
          typeexpr: path u32 @ 21..24 (fid = 0);
          value: InfiniteLoop {
            label: none;
            body: Block [
              @last_expr: none,
            ] @ 32..34 (fid = 0);
          } @ 27..34 (fid = 0);
        } @ 17..34 (fid = 0),

        BindingDef {
          name: b @ 40..43 (fid = 0);
          mutability: mut;
          typeexpr: path u32 @ 48..51 (fid = 0);
          value: integer 12 @ 54..56 (fid = 0);
        } @ 40..56 (fid = 0),

        @last_expr: none,
      ] @ 11..59 (fid = 0);
    } @ 5..59 (fid = 0);
  } @ 0..59 (fid = 0),
]
",
        compiler_code: 0,
        test_out: "",
        test_code: 0,
    ),
    "scir/E008": (
        compiler_out: "scir = [
  FunDefinition {
    name: a @ 41..42 (fid = 0);
    typeexpr: none;
    args: [];
    rettypeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: u8 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: u8;
        };
      };
      typ: type;
    } @ 55..57 (fid = 0);
    body: Block {
      stmts: [];
      last_expr: none;
      typ: void;
    } @ 58..60 (fid = 0);
    info: {
      defined_mut: false;
    };
    sym: Symbol {
      kind: function;
      name: a @ 41..42 (fid = 0);
      realname: none;
      which: 0;
      path: E008::a;
      typ: *fun () -> u8;
      typeness: explicit;
      value: none;
    };
  } @ 41..60 (fid = 0),

  GlobalDef {
    name: b @ 62..63 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: u128 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: u128;
        };
      };
      typ: type;
    } @ 66..70 (fid = 0);
    value: Expression {
      expr: boolean true;
      typ: bool;
    } @ 73..77 (fid = 0);
    sym: Symbol {
      kind: global;
      name: b @ 62..63 (fid = 0);
      realname: none;
      which: 0;
      path: E008::b;
      typ: u128;
      typeness: explicit;
      value: Boolean {
        val: true;
      };
    };
  } @ 62..78 (fid = 0),

  FunDefinition {
    name: c @ 80..81 (fid = 0);
    typeexpr: none;
    args: [];
    rettypeexpr: none;
    body: Block {
      stmts: [
        BindingDef {
          name: d @ 97..98 (fid = 0);
          mutability: not;
          typeexpr: Expression {
            expr: Symbol {
              kind: global;
              name: u8 @ none;
              realname: none;
              which: 0;
              path: ∅;
              typ: type;
              typeness: explicit;
              value: Type {
                type: u8;
              };
            };
            typ: type;
          } @ 101..103 (fid = 0);
          value: Expression {
            expr: integer 12;
            typ: u8;
          } @ 106..108 (fid = 0);
          sym: Symbol {
            kind: local;
            name: d @ 97..98 (fid = 0);
            realname: none;
            which: 0;
            path: d;
            typ: u8;
            typeness: explicit;
            value: none;
          };
        } @ 97..108 (fid = 0),

        BindingDef {
          name: e @ 114..115 (fid = 0);
          mutability: not;
          typeexpr: none;
          value: Expression {
            expr: Unary {
              op: Negation;
              expr: Expression {
                expr: Symbol {
                  kind: local;
                  name: d @ 97..98 (fid = 0);
                  realname: none;
                  which: 0;
                  path: d;
                  typ: u8;
                  typeness: explicit;
                  value: none;
                };
                typ: u8;
              } @ 120..121 (fid = 0);
            };
            typ: u8;
          } @ 119..121 (fid = 0);
          sym: Symbol {
            kind: local;
            name: e @ 114..115 (fid = 0);
            realname: none;
            which: 1;
            path: e;
            typ: u8;
            typeness: implicit;
            value: none;
          };
        } @ 114..121 (fid = 0),

        BindingDef {
          name: f @ 127..128 (fid = 0);
          mutability: not;
          typeexpr: none;
          value: Expression {
            expr: Unary {
              op: Negation;
              expr: Expression {
                expr: boolean true;
                typ: bool;
              } @ 133..137 (fid = 0);
            };
            typ: bool;
          } @ 132..137 (fid = 0);
          sym: Symbol {
            kind: local;
            name: f @ 127..128 (fid = 0);
            realname: none;
            which: 2;
            path: f;
            typ: bool;
            typeness: implicit;
            value: none;
          };
        } @ 127..137 (fid = 0),

        BindingDef {
          name: g @ 144..145 (fid = 0);
          mutability: not;
          typeexpr: none;
          value: Expression {
            expr: Unary {
              op: Dereference;
              expr: Expression {
                expr: boolean true;
                typ: bool;
              } @ 149..153 (fid = 0);
            };
            typ: void;
          } @ 149..155 (fid = 0);
          sym: Symbol {
            kind: local;
            name: g @ 144..145 (fid = 0);
            realname: none;
            which: 3;
            path: g;
            typ: void;
            typeness: implicit;
            value: none;
          };
        } @ 144..155 (fid = 0),
      ];
      last_expr: none;
      typ: void;
    } @ 91..158 (fid = 0);
    info: {
      defined_mut: false;
    };
    sym: Symbol {
      kind: function;
      name: c @ 80..81 (fid = 0);
      realname: none;
      which: 0;
      path: E008::c;
      typ: *fun () -> void;
      typeness: explicit;
      value: none;
    };
  } @ 80..158 (fid = 0),

  FunDefinition {
    name: i @ 160..161 (fid = 0);
    typeexpr: none;
    args: [];
    rettypeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: bool @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: bool;
        };
      };
      typ: type;
    } @ 174..178 (fid = 0);
    body: Block {
      stmts: [
        Expression {
          expr: Return {
            expr: none;
          };
          typ: never;
        } @ 185..191 (fid = 0) @ 185..191 (fid = 0),
      ];
      last_expr: none;
      typ: never;
    } @ 179..194 (fid = 0);
    info: {
      defined_mut: false;
    };
    sym: Symbol {
      kind: function;
      name: i @ 160..161 (fid = 0);
      realname: none;
      which: 0;
      path: E008::i;
      typ: *fun () -> bool;
      typeness: explicit;
      value: none;
    };
  } @ 160..194 (fid = 0),

  FunDefinition {
    name: j @ 196..197 (fid = 0);
    typeexpr: none;
    args: [];
    rettypeexpr: none;
    body: Block {
      stmts: [
        BindingDef {
          name: k @ 213..214 (fid = 0);
          mutability: not;
          typeexpr: none;
          value: Expression {
            expr: Loop {
              label: none;
              body: Block {
                stmts: [
                  Expression {
                    expr: If {
                      cond: Expression {
                        expr: boolean false;
                        typ: bool;
                      } @ 236..241 (fid = 0);
                      then_br: Expression {
                        expr: Block {
                          label: none;
                          block: Block {
                            stmts: [
                              Expression {
                                expr: Break {
                                  label: none;
                                  expr: Expression {
                                    expr: integer 12;
                                    typ: i32;
                                  } @ 262..264 (fid = 0);
                                  index: 0;
                                };
                                typ: never;
                              } @ 256..264 (fid = 0) @ 256..264 (fid = 0),
                            ];
                            last_expr: none;
                            typ: never;
                          } @ 242..275 (fid = 0);
                          index: none;
                        };
                        typ: never;
                      } @ 233..275 (fid = 0);
                      else_br: none;
                    };
                    typ: void;
                  } @ 233..275 (fid = 0) @ 233..275 (fid = 0),

                  Expression {
                    expr: Break {
                      label: none;
                      expr: none;
                      index: 0;
                    };
                    typ: never;
                  } @ 285..290 (fid = 0) @ 285..290 (fid = 0),
                ];
                last_expr: none;
                typ: never;
              } @ 223..297 (fid = 0);
              index: 0;
            };
            typ: i32;
          } @ 218..297 (fid = 0);
          sym: Symbol {
            kind: local;
            name: k @ 213..214 (fid = 0);
            realname: none;
            which: 0;
            path: k;
            typ: i32;
            typeness: implicit;
            value: none;
          };
        } @ 213..297 (fid = 0),
      ];
      last_expr: none;
      typ: void;
    } @ 207..300 (fid = 0);
    info: {
      defined_mut: false;
    };
    sym: Symbol {
      kind: function;
      name: j @ 196..197 (fid = 0);
      realname: none;
      which: 0;
      path: E008::j;
      typ: *fun () -> void;
      typeness: explicit;
      value: none;
    };
  } @ 196..300 (fid = 0),

  FunDefinition {
    name: ops @ 302..305 (fid = 0);
    typeexpr: none;
    args: [
      Arg {
        name: v @ 313..314 (fid = 0);
        typeexpr: Expression {
          expr: Symbol {
            kind: global;
            name: void @ none;
            realname: none;
            which: 0;
            path: ∅;
            typ: type;
            typeness: explicit;
            value: Type {
              type: void;
            };
          };
          typ: type;
        } @ 316..320 (fid = 0);
        sym: Symbol {
          kind: argument;
          name: v @ 313..314 (fid = 0);
          realname: none;
          which: 0;
          path: v;
          typ: void;
          typeness: explicit;
          value: none;
        };
      } @ 313..320 (fid = 0),
    ];
    rettypeexpr: none;
    body: Block {
      stmts: [
        BindingDef {
          name: a @ 390..391 (fid = 0);
          mutability: not;
          typeexpr: none;
          value: Expression {
            expr: Binary {
              lhs: Expression {
                expr: float 1.0;
                typ: f32;
              } @ 395..398 (fid = 0);
              op: Shl;
              rhs: Expression {
                expr: float 1.0;
                typ: f32;
              } @ 402..405 (fid = 0);
            };
            typ: f32;
          } @ 395..405 (fid = 0);
          sym: Symbol {
            kind: local;
            name: a @ 390..391 (fid = 0);
            realname: none;
            which: 0;
            path: a;
            typ: f32;
            typeness: implicit;
            value: none;
          };
        } @ 390..405 (fid = 0),

        BindingDef {
          name: b @ 411..412 (fid = 0);
          mutability: not;
          typeexpr: none;
          value: Expression {
            expr: Binary {
              lhs: Expression {
                expr: Symbol {
                  kind: argument;
                  name: v @ 313..314 (fid = 0);
                  realname: none;
                  which: 0;
                  path: v;
                  typ: void;
                  typeness: explicit;
                  value: none;
                };
                typ: void;
              } @ 416..417 (fid = 0);
              op: Mul;
              rhs: Expression {
                expr: Symbol {
                  kind: argument;
                  name: v @ 313..314 (fid = 0);
                  realname: none;
                  which: 0;
                  path: v;
                  typ: void;
                  typeness: explicit;
                  value: none;
                };
                typ: void;
              } @ 420..421 (fid = 0);
            };
            typ: void;
          } @ 416..421 (fid = 0);
          sym: Symbol {
            kind: local;
            name: b @ 411..412 (fid = 0);
            realname: none;
            which: 1;
            path: b;
            typ: void;
            typeness: implicit;
            value: none;
          };
        } @ 411..421 (fid = 0),

        BindingDef {
          name: c @ 427..428 (fid = 0);
          mutability: not;
          typeexpr: none;
          value: Expression {
            expr: Binary {
              lhs: Expression {
                expr: Symbol {
                  kind: argument;
                  name: v @ 313..314 (fid = 0);
                  realname: none;
                  which: 0;
                  path: v;
                  typ: void;
                  typeness: explicit;
                  value: none;
                };
                typ: void;
              } @ 432..433 (fid = 0);
              op: LogicalAnd;
              rhs: Expression {
                expr: Symbol {
                  kind: argument;
                  name: v @ 313..314 (fid = 0);
                  realname: none;
                  which: 0;
                  path: v;
                  typ: void;
                  typeness: explicit;
                  value: none;
                };
                typ: void;
              } @ 437..438 (fid = 0);
            };
            typ: bool;
          } @ 432..438 (fid = 0);
          sym: Symbol {
            kind: local;
            name: c @ 427..428 (fid = 0);
            realname: none;
            which: 2;
            path: c;
            typ: bool;
            typeness: implicit;
            value: none;
          };
        } @ 427..438 (fid = 0),

        BindingDef {
          name: d @ 444..445 (fid = 0);
          mutability: not;
          typeexpr: none;
          value: Expression {
            expr: Binary {
              lhs: Expression {
                expr: float 0.0;
                typ: f32;
              } @ 449..452 (fid = 0);
              op: LogicalOr;
              rhs: Expression {
                expr: float 0.2;
                typ: f32;
              } @ 456..459 (fid = 0);
            };
            typ: bool;
          } @ 449..459 (fid = 0);
          sym: Symbol {
            kind: local;
            name: d @ 444..445 (fid = 0);
            realname: none;
            which: 3;
            path: d;
            typ: bool;
            typeness: implicit;
            value: none;
          };
        } @ 444..459 (fid = 0),

        BindingDef {
          name: e @ 465..466 (fid = 0);
          mutability: not;
          typeexpr: none;
          value: Expression {
            expr: Binary {
              lhs: Expression {
                expr: integer 1;
                typ: i32;
              } @ 470..471 (fid = 0);
              op: LogicalOr;
              rhs: Expression {
                expr: integer 2;
                typ: i32;
              } @ 475..476 (fid = 0);
            };
            typ: bool;
          } @ 470..476 (fid = 0);
          sym: Symbol {
            kind: local;
            name: e @ 465..466 (fid = 0);
            realname: none;
            which: 4;
            path: e;
            typ: bool;
            typeness: implicit;
            value: none;
          };
        } @ 465..476 (fid = 0),

        BindingDef {
          name: f @ 482..483 (fid = 0);
          mutability: not;
          typeexpr: none;
          value: Expression {
            expr: Binary {
              lhs: Expression {
                expr: float 1.0;
                typ: f32;
              } @ 487..490 (fid = 0);
              op: Rem;
              rhs: Expression {
                expr: float 2.0;
                typ: f32;
              } @ 493..496 (fid = 0);
            };
            typ: f32;
          } @ 487..496 (fid = 0);
          sym: Symbol {
            kind: local;
            name: f @ 482..483 (fid = 0);
            realname: none;
            which: 5;
            path: f;
            typ: f32;
            typeness: implicit;
            value: none;
          };
        } @ 482..496 (fid = 0),
      ];
      last_expr: none;
      typ: void;
    } @ 322..499 (fid = 0);
    info: {
      defined_mut: false;
    };
    sym: Symbol {
      kind: function;
      name: ops @ 302..305 (fid = 0);
      realname: none;
      which: 0;
      path: E008::ops;
      typ: *fun (void) -> void;
      typeness: explicit;
      value: none;
    };
  } @ 302..499 (fid = 0),
]
error[E008]: mismatched types
  ┌─ ./tests/scir/E008.lun:2:18
  │
2 │ a :: fun() -> u8 {}
  │               -- ^^ expected `u8`, found `void`
  │               │   
  │               expected due to this

error[E008]: mismatched types
  ┌─ ./tests/scir/E008.lun:4:12
  │
4 │ b : u128 : true;
  │     ----   ^^^^ expected `u128`, found `bool`
  │     │       
  │     expected due to this

error[E008]: mismatched types
  ┌─ ./tests/scir/E008.lun:8:11
  │
8 │     e := -d;
  │           ^ expected `float or signed integer`, found `u8`
  │
  = can't perform a negation on an unsigned type like 'u8'

error[E008]: mismatched types
  ┌─ ./tests/scir/E008.lun:9:11
  │
9 │     f := -true;
  │           ^^^^ expected `float or signed integer`, found `bool`

error[E008]: mismatched types
   ┌─ ./tests/scir/E008.lun:11:10
   │
11 │     g := true.*;
   │          ^^^^ expected `pointer`, found `bool`
   │
   = type 'bool' cannot be dereferenced.

error[E008]: mismatched types
   ┌─ ./tests/scir/E008.lun:15:5
   │
14 │ i :: fun() -> bool {
   │               ---- expected due to this
15 │     return;
   │     ^^^^^^ expected `bool`, found `void`

error[E008]: mismatched types
   ┌─ ./tests/scir/E008.lun:24:9
   │
24 │         break;
   │         ^^^^^ expected `i32`, found `void`

error[E008]: mismatched types
   ┌─ ./tests/scir/E008.lun:30:10
   │
30 │     a := 1.0 << 1.0;
   │          ^^^^^^^^^^ expected `integer`, found `f32`
   │
   = can't perform '<<' on type 'f32'

error[E008]: mismatched types
   ┌─ ./tests/scir/E008.lun:31:10
   │
31 │     b := v * v;
   │          ^^^^^ expected `float or integer`, found `void`
   │
   = can't perform '*' on type 'void'

error[E008]: mismatched types
   ┌─ ./tests/scir/E008.lun:32:10
   │
32 │     c := v && v;
   │          ^^^^^^ expected `bool`, found `bool`
   │
   = can't perform 'and' on type 'void'

error[E008]: mismatched types
   ┌─ ./tests/scir/E008.lun:33:10
   │
33 │     d := 0.0 || 0.2;
   │          ^^^^^^^^^^ expected `bool`, found `bool`
   │
   = can't perform 'or' on type 'f32'

error[E008]: mismatched types
   ┌─ ./tests/scir/E008.lun:34:10
   │
34 │     e := 1 || 2;
   │          ^^^^^^ expected `bool`, found `bool`
   │
   = can't perform 'or' on type 'i32'

error[E008]: mismatched types
   ┌─ ./tests/scir/E008.lun:35:10
   │
35 │     f := 1.0 % 2.0;
   │          ^^^^^^^^^ expected `integer`, found `f32`
   │
   = can't perform '%' on type 'f32'

error: compilation of `E008` failed due to 13 errors and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "scir/E009": (
        compiler_out: "scir = [
  FunDefinition {
    name: a @ 47..48 (fid = 0);
    typeexpr: Expression {
      expr: integer 12;
      typ: i32;
    } @ 51..53 (fid = 0);
    args: [
      Arg {
        name: a @ 60..61 (fid = 0);
        typeexpr: Expression {
          expr: integer 34;
          typ: i32;
        } @ 63..65 (fid = 0);
        sym: Symbol {
          kind: argument;
          name: a @ 60..61 (fid = 0);
          realname: none;
          which: 0;
          path: a;
          typ: void;
          typeness: explicit;
          value: none;
        };
      } @ 60..65 (fid = 0),
    ];
    rettypeexpr: Expression {
      expr: integer 56;
      typ: i32;
    } @ 70..72 (fid = 0);
    body: Block {
      stmts: [];
      last_expr: none;
      typ: void;
    } @ 73..75 (fid = 0);
    info: {
      defined_mut: false;
    };
    sym: Symbol {
      kind: function;
      name: a @ 47..48 (fid = 0);
      realname: none;
      which: 0;
      path: E009::a;
      typ: void;
      typeness: explicit;
      value: none;
    };
  } @ 47..75 (fid = 0),

  ExternBlock {
    abi: C;
    items: [
      FunDeclaration {
        name: b @ 94..95 (fid = 0);
        typeexpr: Expression {
          expr: integer 1;
          typ: i32;
        } @ 98..99 (fid = 0);
        args: [
          Expression {
            expr: integer 2;
            typ: i32;
          } @ 106..107 (fid = 0),
        ];
        rettypeexpr: Expression {
          expr: integer 3;
          typ: i32;
        } @ 112..113 (fid = 0);
        defined_mut: false;
        sym: Symbol {
          kind: function;
          name: b @ 94..95 (fid = 0);
          realname: none;
          which: 0;
          path: E009::b;
          typ: void;
          typeness: explicit;
          value: none;
        };
      } @ 94..114 (fid = 0),
    ];
  } @ 77..116 (fid = 0),

  GlobalDef {
    name: c @ 118..119 (fid = 0);
    mutability: mut;
    typeexpr: Expression {
      expr: integer 1;
      typ: i32;
    } @ 122..123 (fid = 0);
    value: Expression {
      expr: Block {
        label: none;
        block: Block {
          stmts: [];
          last_expr: none;
          typ: void;
        } @ 126..128 (fid = 0);
        index: none;
      };
      typ: void;
    } @ 126..128 (fid = 0);
    sym: Symbol {
      kind: global;
      name: c @ 118..119 (fid = 0);
      realname: none;
      which: 0;
      path: E009::c;
      typ: void;
      typeness: explicit;
      value: void;
    };
  } @ 118..128 (fid = 0),

  GlobalDef {
    name: d @ 130..131 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: Expression {
      expr: PointerType {
        mutability: mut;
        typeexpr: Expression {
          expr: integer 12;
          typ: i32;
        } @ 140..142 (fid = 0);
      };
      typ: type;
    } @ 135..142 (fid = 0);
    sym: Symbol {
      kind: global;
      name: d @ 130..131 (fid = 0);
      realname: none;
      which: 0;
      path: E009::d;
      typ: type;
      typeness: implicit;
      value: Type {
        type: *mut void;
      };
    };
  } @ 130..143 (fid = 0),

  GlobalDef {
    name: e @ 145..146 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: Expression {
      expr: FunPtrType {
        args: [
          Expression {
            expr: integer 12;
            typ: i32;
          } @ 155..157 (fid = 0),
        ];
        ret: Expression {
          expr: integer 34;
          typ: i32;
        } @ 162..164 (fid = 0);
      };
      typ: type;
    } @ 150..164 (fid = 0);
    sym: Symbol {
      kind: global;
      name: e @ 145..146 (fid = 0);
      realname: none;
      which: 0;
      path: E009::e;
      typ: type;
      typeness: implicit;
      value: Type {
        type: *fun (void) -> void;
      };
    };
  } @ 145..165 (fid = 0),

  FunDefinition {
    name: f @ 167..168 (fid = 0);
    typeexpr: none;
    args: [];
    rettypeexpr: none;
    body: Block {
      stmts: [
        BindingDef {
          name: a @ 184..185 (fid = 0);
          mutability: not;
          typeexpr: Expression {
            expr: integer 12;
            typ: i32;
          } @ 188..190 (fid = 0);
          value: Expression {
            expr: Block {
              label: none;
              block: Block {
                stmts: [];
                last_expr: none;
                typ: void;
              } @ 193..195 (fid = 0);
              index: none;
            };
            typ: void;
          } @ 193..195 (fid = 0);
          sym: Symbol {
            kind: local;
            name: a @ 184..185 (fid = 0);
            realname: none;
            which: 0;
            path: a;
            typ: void;
            typeness: explicit;
            value: none;
          };
        } @ 184..195 (fid = 0),
      ];
      last_expr: none;
      typ: void;
    } @ 178..198 (fid = 0);
    info: {
      defined_mut: false;
    };
    sym: Symbol {
      kind: function;
      name: f @ 167..168 (fid = 0);
      realname: none;
      which: 0;
      path: E009::f;
      typ: *fun () -> void;
      typeness: explicit;
      value: none;
    };
  } @ 167..198 (fid = 0),
]
error[E009]: expected type found an expression
  ┌─ ./tests/scir/E009.lun:2:5
  │
2 │ a : 12 : fun(a: 34) -> 56 {}
  │     ^^

error[E009]: expected type found an expression
  ┌─ ./tests/scir/E009.lun:2:17
  │
2 │ a : 12 : fun(a: 34) -> 56 {}
  │                 ^^

error[E009]: expected type found an expression
  ┌─ ./tests/scir/E009.lun:2:24
  │
2 │ a : 12 : fun(a: 34) -> 56 {}
  │                        ^^

error[E009]: expected type found an expression
  ┌─ ./tests/scir/E009.lun:5:9
  │
5 │     b : 1 : fun(2) -> 3;
  │         ^

error[E009]: expected type found an expression
  ┌─ ./tests/scir/E009.lun:5:17
  │
5 │     b : 1 : fun(2) -> 3;
  │                 ^

error[E009]: expected type found an expression
  ┌─ ./tests/scir/E009.lun:5:23
  │
5 │     b : 1 : fun(2) -> 3;
  │                       ^

error[E009]: expected type found an expression
  ┌─ ./tests/scir/E009.lun:8:5
  │
8 │ c : 1 = {}
  │     ^

error[E009]: expected type found an expression
   ┌─ ./tests/scir/E009.lun:10:11
   │
10 │ d :: *mut 12;
   │           ^^

error[E009]: expected type found an expression
   ┌─ ./tests/scir/E009.lun:12:11
   │
12 │ e :: *fun(12) -> 34;
   │           ^^

error[E009]: expected type found an expression
   ┌─ ./tests/scir/E009.lun:12:18
   │
12 │ e :: *fun(12) -> 34;
   │                  ^^

error[E009]: expected type found an expression
   ┌─ ./tests/scir/E009.lun:12:11
   │
12 │ e :: *fun(12) -> 34;
   │           ^^

error[E009]: expected type found an expression
   ┌─ ./tests/scir/E009.lun:12:18
   │
12 │ e :: *fun(12) -> 34;
   │                  ^^

error[E009]: expected type found an expression
   ┌─ ./tests/scir/E009.lun:15:9
   │
15 │     a : 12 = {};
   │         ^^

error: compilation of `E009` failed due to 13 errors and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "scir/E011": (
        compiler_out: "scir = [
  FunDefinition {
    name: a @ 46..47 (fid = 0);
    typeexpr: none;
    args: [];
    rettypeexpr: none;
    body: Block {
      stmts: [
        Expression {
          expr: Call {
            callee: Expression {
              expr: integer 12;
              typ: i32;
            } @ 63..65 (fid = 0);
            args: [];
          };
          typ: unknown;
        } @ 63..67 (fid = 0) @ 63..67 (fid = 0),
      ];
      last_expr: none;
      typ: void;
    } @ 57..70 (fid = 0);
    info: {
      defined_mut: false;
    };
    sym: Symbol {
      kind: function;
      name: a @ 46..47 (fid = 0);
      realname: none;
      which: 0;
      path: E011::a;
      typ: *fun () -> void;
      typeness: explicit;
      value: none;
    };
  } @ 46..70 (fid = 0),
]
error[E011]: function call requires function type
  ┌─ ./tests/scir/E011.lun:3:5
  │
3 │     12();
  │     ^^ instead found 'i32'

error: compilation of `E011` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "scir/E016": (
        compiler_out: "scir = [
  FunDefinition {
    name: a @ 51..52 (fid = 0);
    typeexpr: none;
    args: [];
    rettypeexpr: none;
    body: Block {
      stmts: [
        Expression {
          expr: If {
            cond: Expression {
              expr: boolean false;
              typ: bool;
            } @ 71..76 (fid = 0);
            then_br: Expression {
              expr: Block {
                label: none;
                block: Block {
                  stmts: [
                    Expression {
                      expr: Continue {
                        label: none;
                        index: none;
                      };
                      typ: never;
                    } @ 87..95 (fid = 0) @ 87..95 (fid = 0),
                  ];
                  last_expr: none;
                  typ: never;
                } @ 77..102 (fid = 0);
                index: none;
              };
              typ: never;
            } @ 68..102 (fid = 0);
            else_br: none;
          };
          typ: void;
        } @ 68..102 (fid = 0) @ 68..102 (fid = 0),

        Expression {
          expr: Break {
            label: none;
            expr: none;
            index: none;
          };
          typ: unknown;
        } @ 108..113 (fid = 0) @ 108..113 (fid = 0),
      ];
      last_expr: none;
      typ: void;
    } @ 62..116 (fid = 0);
    info: {
      defined_mut: false;
    };
    sym: Symbol {
      kind: function;
      name: a @ 51..52 (fid = 0);
      realname: none;
      which: 0;
      path: E016::a;
      typ: *fun () -> void;
      typeness: explicit;
      value: none;
    };
  } @ 51..116 (fid = 0),
]
error[E016]: `continue` outside of a loop or a labeled block
  ┌─ ./tests/scir/E016.lun:4:9
  │
4 │         continue;
  │         ^^^^^^^^

error[E016]: `break` outside of a loop or a labeled block
  ┌─ ./tests/scir/E016.lun:7:5
  │
7 │     break;
  │     ^^^^^

error: compilation of `E016` failed due to 2 errors and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "scir/E027": (
        compiler_out: "scir = [
  FunDefinition {
    name: a @ 49..50 (fid = 0);
    typeexpr: none;
    args: [];
    rettypeexpr: none;
    body: Block {
      stmts: [
        Expression {
          expr: Binary {
            lhs: Expression {
              expr: integer 12;
              typ: i32;
            } @ 66..68 (fid = 0);
            op: Assignment;
            rhs: Expression {
              expr: integer 34;
              typ: i32;
            } @ 71..73 (fid = 0);
          };
          typ: void;
        } @ 66..73 (fid = 0) @ 66..73 (fid = 0),
      ];
      last_expr: none;
      typ: void;
    } @ 60..76 (fid = 0);
    info: {
      defined_mut: false;
    };
    sym: Symbol {
      kind: function;
      name: a @ 49..50 (fid = 0);
      realname: none;
      which: 0;
      path: E027::a;
      typ: *fun () -> void;
      typeness: explicit;
      value: none;
    };
  } @ 49..76 (fid = 0),
]
error[E027]: expected this expression to be a place expression
  ┌─ ./tests/scir/E027.lun:3:5
  │
3 │     12 = 34;
  │     ^^
  │
  = the left-hand side of an assignment must be a place.

error: compilation of `E027` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "scir/E028": (
        compiler_out: "scir = [
  FunDefinition {
    name: a @ 43..44 (fid = 0);
    typeexpr: none;
    args: [
      Arg {
        name: b @ 52..53 (fid = 0);
        typeexpr: Expression {
          expr: Symbol {
            kind: global;
            name: u8 @ none;
            realname: none;
            which: 0;
            path: ∅;
            typ: type;
            typeness: explicit;
            value: Type {
              type: u8;
            };
          };
          typ: type;
        } @ 55..57 (fid = 0);
        sym: Symbol {
          kind: argument;
          name: b @ 52..53 (fid = 0);
          realname: none;
          which: 0;
          path: b;
          typ: u8;
          typeness: explicit;
          value: none;
        };
      } @ 52..57 (fid = 0),
    ];
    rettypeexpr: none;
    body: Block {
      stmts: [];
      last_expr: none;
      typ: void;
    } @ 59..61 (fid = 0);
    info: {
      defined_mut: false;
    };
    sym: Symbol {
      kind: function;
      name: a @ 43..44 (fid = 0);
      realname: none;
      which: 0;
      path: E028::a;
      typ: *fun (u8) -> void;
      typeness: explicit;
      value: none;
    };
  } @ 43..61 (fid = 0),

  FunDefinition {
    name: b @ 63..64 (fid = 0);
    typeexpr: none;
    args: [];
    rettypeexpr: none;
    body: Block {
      stmts: [
        Expression {
          expr: Call {
            callee: Expression {
              expr: Symbol {
                kind: function;
                name: a @ 43..44 (fid = 0);
                realname: none;
                which: 0;
                path: E028::a;
                typ: *fun (u8) -> void;
                typeness: explicit;
                value: none;
              };
              typ: *fun (u8) -> void;
            } @ 80..81 (fid = 0);
            args: [];
          };
          typ: void;
        } @ 80..83 (fid = 0) @ 80..83 (fid = 0),

        Expression {
          expr: Call {
            callee: Expression {
              expr: Symbol {
                kind: function;
                name: a @ 43..44 (fid = 0);
                realname: none;
                which: 0;
                path: E028::a;
                typ: *fun (u8) -> void;
                typeness: explicit;
                value: none;
              };
              typ: *fun (u8) -> void;
            } @ 89..90 (fid = 0);
            args: [
              Expression {
                expr: integer 1;
                typ: u8;
              } @ 91..92 (fid = 0),

              Expression {
                expr: Block {
                  label: none;
                  block: Block {
                    stmts: [];
                    last_expr: none;
                    typ: void;
                  } @ 94..96 (fid = 0);
                  index: none;
                };
                typ: void;
              } @ 94..96 (fid = 0),
            ];
          };
          typ: void;
        } @ 89..97 (fid = 0) @ 89..97 (fid = 0),
      ];
      last_expr: none;
      typ: void;
    } @ 74..100 (fid = 0);
    info: {
      defined_mut: false;
    };
    sym: Symbol {
      kind: function;
      name: b @ 63..64 (fid = 0);
      realname: none;
      which: 0;
      path: E028::b;
      typ: *fun () -> void;
      typeness: explicit;
      value: none;
    };
  } @ 63..100 (fid = 0),
]
error[E028]: this function takes 1 arguments but 0 were provided
  ┌─ ./tests/scir/E028.lun:6:5
  │
6 │     a();
  │     ^

error[E028]: this function takes 1 arguments but 2 were provided
  ┌─ ./tests/scir/E028.lun:7:5
  │
7 │     a(1, {});
  │     ^

error: compilation of `E028` failed due to 2 errors and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "scir/E029": (
        compiler_out: "scir = [
  GlobalDef {
    name: a @ 50..51 (fid = 0);
    mutability: mut;
    typeexpr: none;
    value: Expression {
      expr: Symbol {
        kind: global;
        name: bool @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: bool;
        };
      };
      typ: type;
    } @ 55..59 (fid = 0);
    sym: Symbol {
      kind: global;
      name: a @ 50..51 (fid = 0);
      realname: none;
      which: 0;
      path: E029::a;
      typ: type;
      typeness: implicit;
      value: Type {
        type: bool;
      };
    };
  } @ 50..60 (fid = 0),

  FunDefinition {
    name: b @ 62..63 (fid = 0);
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: a @ 50..51 (fid = 0);
        realname: none;
        which: 0;
        path: E029::a;
        typ: type;
        typeness: implicit;
        value: Type {
          type: bool;
        };
      };
      typ: unknown;
    } @ 66..67 (fid = 0);
    args: [];
    rettypeexpr: none;
    body: Block {
      stmts: [];
      last_expr: none;
      typ: void;
    } @ 76..78 (fid = 0);
    info: {
      defined_mut: false;
    };
    sym: Symbol {
      kind: function;
      name: b @ 62..63 (fid = 0);
      realname: none;
      which: 0;
      path: E029::b;
      typ: unknown;
      typeness: explicit;
      value: none;
    };
  } @ 62..78 (fid = 0),

  FunDefinition {
    name: c @ 79..80 (fid = 0);
    typeexpr: none;
    args: [
      Arg {
        name: d @ 88..89 (fid = 0);
        typeexpr: Expression {
          expr: Symbol {
            kind: global;
            name: a @ 50..51 (fid = 0);
            realname: none;
            which: 0;
            path: E029::a;
            typ: type;
            typeness: implicit;
            value: Type {
              type: bool;
            };
          };
          typ: unknown;
        } @ 91..92 (fid = 0);
        sym: Symbol {
          kind: argument;
          name: d @ 88..89 (fid = 0);
          realname: none;
          which: 0;
          path: d;
          typ: void;
          typeness: explicit;
          value: none;
        };
      } @ 88..92 (fid = 0),
    ];
    rettypeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: a @ 50..51 (fid = 0);
        realname: none;
        which: 0;
        path: E029::a;
        typ: type;
        typeness: implicit;
        value: Type {
          type: bool;
        };
      };
      typ: unknown;
    } @ 97..98 (fid = 0);
    body: Block {
      stmts: [];
      last_expr: none;
      typ: void;
    } @ 99..101 (fid = 0);
    info: {
      defined_mut: false;
    };
    sym: Symbol {
      kind: function;
      name: c @ 79..80 (fid = 0);
      realname: none;
      which: 0;
      path: E029::c;
      typ: *fun (void) -> void;
      typeness: explicit;
      value: none;
    };
  } @ 79..101 (fid = 0),

  ExternBlock {
    abi: C;
    items: [
      FunDeclaration {
        name: e @ 120..121 (fid = 0);
        typeexpr: Expression {
          expr: Symbol {
            kind: global;
            name: a @ 50..51 (fid = 0);
            realname: none;
            which: 0;
            path: E029::a;
            typ: type;
            typeness: implicit;
            value: Type {
              type: bool;
            };
          };
          typ: unknown;
        } @ 124..125 (fid = 0);
        args: [];
        rettypeexpr: none;
        defined_mut: false;
        sym: Symbol {
          kind: function;
          name: e @ 120..121 (fid = 0);
          realname: none;
          which: 0;
          path: E029::e;
          typ: unknown;
          typeness: explicit;
          value: none;
        };
      } @ 120..134 (fid = 0),

      FunDeclaration {
        name: f @ 139..140 (fid = 0);
        typeexpr: none;
        args: [
          Expression {
            expr: Symbol {
              kind: global;
              name: a @ 50..51 (fid = 0);
              realname: none;
              which: 0;
              path: E029::a;
              typ: type;
              typeness: implicit;
              value: Type {
                type: bool;
              };
            };
            typ: unknown;
          } @ 148..149 (fid = 0),
        ];
        rettypeexpr: Expression {
          expr: Symbol {
            kind: global;
            name: a @ 50..51 (fid = 0);
            realname: none;
            which: 0;
            path: E029::a;
            typ: type;
            typeness: implicit;
            value: Type {
              type: bool;
            };
          };
          typ: unknown;
        } @ 154..155 (fid = 0);
        defined_mut: false;
        sym: Symbol {
          kind: function;
          name: f @ 139..140 (fid = 0);
          realname: none;
          which: 0;
          path: E029::f;
          typ: *fun (void) -> void;
          typeness: explicit;
          value: none;
        };
      } @ 139..156 (fid = 0),

      GlobalUninit {
        name: g @ 161..162 (fid = 0);
        typeexpr: Expression {
          expr: Symbol {
            kind: global;
            name: a @ 50..51 (fid = 0);
            realname: none;
            which: 0;
            path: E029::a;
            typ: type;
            typeness: implicit;
            value: Type {
              type: bool;
            };
          };
          typ: unknown;
        } @ 165..166 (fid = 0);
        sym: Symbol {
          kind: global;
          name: g @ 161..162 (fid = 0);
          realname: none;
          which: 0;
          path: E029::g;
          typ: unknown;
          typeness: explicit;
          value: none;
        };
      } @ 161..167 (fid = 0),
    ];
  } @ 103..169 (fid = 0),

  GlobalDef {
    name: h @ 171..172 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: a @ 50..51 (fid = 0);
        realname: none;
        which: 0;
        path: E029::a;
        typ: type;
        typeness: implicit;
        value: Type {
          type: bool;
        };
      };
      typ: unknown;
    } @ 175..176 (fid = 0);
    value: Expression {
      expr: Block {
        label: none;
        block: Block {
          stmts: [];
          last_expr: none;
          typ: void;
        } @ 179..181 (fid = 0);
        index: none;
      };
      typ: void;
    } @ 179..181 (fid = 0);
    sym: Symbol {
      kind: global;
      name: h @ 171..172 (fid = 0);
      realname: none;
      which: 0;
      path: E029::h;
      typ: void;
      typeness: explicit;
      value: void;
    };
  } @ 171..181 (fid = 0),

  FunDefinition {
    name: i @ 184..185 (fid = 0);
    typeexpr: none;
    args: [];
    rettypeexpr: none;
    body: Block {
      stmts: [];
      last_expr: none;
      typ: void;
    } @ 195..197 (fid = 0);
    info: {
      defined_mut: false;
    };
    sym: Symbol {
      kind: function;
      name: i @ 184..185 (fid = 0);
      realname: none;
      which: 0;
      path: E029::i;
      typ: *fun () -> void;
      typeness: explicit;
      value: none;
    };
  } @ 184..197 (fid = 0),

  GlobalDef {
    name: j @ 198..199 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: Expression {
      expr: Call {
        callee: Expression {
          expr: Symbol {
            kind: global;
            name: h @ 171..172 (fid = 0);
            realname: none;
            which: 0;
            path: E029::h;
            typ: void;
            typeness: explicit;
            value: void;
          };
          typ: void;
        } @ 203..204 (fid = 0);
        args: [];
      };
      typ: unknown;
    } @ 203..206 (fid = 0);
    sym: Symbol {
      kind: global;
      name: j @ 198..199 (fid = 0);
      realname: none;
      which: 0;
      path: E029::j;
      typ: unknown;
      typeness: implicit;
      value: none;
    };
  } @ 198..207 (fid = 0),

  FunDefinition {
    name: k @ 209..210 (fid = 0);
    typeexpr: none;
    args: [];
    rettypeexpr: none;
    body: Block {
      stmts: [
        BindingDef {
          name: l @ 226..227 (fid = 0);
          mutability: not;
          typeexpr: Expression {
            expr: Symbol {
              kind: global;
              name: a @ 50..51 (fid = 0);
              realname: none;
              which: 0;
              path: E029::a;
              typ: type;
              typeness: implicit;
              value: Type {
                type: bool;
              };
            };
            typ: type;
          } @ 230..231 (fid = 0);
          value: Expression {
            expr: Block {
              label: none;
              block: Block {
                stmts: [];
                last_expr: none;
                typ: unknown;
              } @ 234..236 (fid = 0);
              index: none;
            };
            typ: unknown;
          } @ 234..236 (fid = 0);
          sym: Symbol {
            kind: local;
            name: l @ 226..227 (fid = 0);
            realname: none;
            which: 0;
            path: l;
            typ: unknown;
            typeness: explicit;
            value: none;
          };
        } @ 226..236 (fid = 0),
      ];
      last_expr: none;
      typ: void;
    } @ 220..239 (fid = 0);
    info: {
      defined_mut: false;
    };
    sym: Symbol {
      kind: function;
      name: k @ 209..210 (fid = 0);
      realname: none;
      which: 0;
      path: E029::k;
      typ: *fun () -> void;
      typeness: explicit;
      value: none;
    };
  } @ 209..239 (fid = 0),
]
error[E009]: expected type found an expression
  ┌─ ./tests/scir/E029.lun:4:5
  │
4 │ b : a : fun() {}
  │     ^

error[E029]: unable to resolve expression at comptime
  ┌─ ./tests/scir/E029.lun:4:5
  │
4 │ b : a : fun() {}
  │     ^
  │     │
  │     due to this expression

error[E029]: unable to resolve expression at comptime
  ┌─ ./tests/scir/E029.lun:5:13
  │
5 │ c :: fun(d: a) -> a {}
  │             ^
  │             │
  │             due to this expression

error[E029]: unable to resolve expression at comptime
  ┌─ ./tests/scir/E029.lun:5:19
  │
5 │ c :: fun(d: a) -> a {}
  │                   ^
  │                   │
  │                   due to this expression

error[E009]: expected type found an expression
  ┌─ ./tests/scir/E029.lun:8:9
  │
8 │     e : a : fun();
  │         ^

error[E029]: unable to resolve expression at comptime
  ┌─ ./tests/scir/E029.lun:8:9
  │
8 │     e : a : fun();
  │         ^
  │         │
  │         due to this expression

error[E029]: unable to resolve expression at comptime
  ┌─ ./tests/scir/E029.lun:9:14
  │
9 │     f :: fun(a) -> a;
  │              ^
  │              │
  │              due to this expression

error[E029]: unable to resolve expression at comptime
  ┌─ ./tests/scir/E029.lun:9:20
  │
9 │     f :: fun(a) -> a;
  │                    ^
  │                    │
  │                    due to this expression

error[E009]: expected type found an expression
   ┌─ ./tests/scir/E029.lun:10:9
   │
10 │     g : a;
   │         ^

error[E029]: unable to resolve expression at comptime
   ┌─ ./tests/scir/E029.lun:10:9
   │
10 │     g : a;
   │         ^
   │         │
   │         due to this expression

error[E009]: expected type found an expression
   ┌─ ./tests/scir/E029.lun:13:5
   │
13 │ h : a : {};
   │     ^

error[E029]: unable to resolve expression at comptime
   ┌─ ./tests/scir/E029.lun:13:5
   │
13 │ h : a : {};
   │     ^
   │     │
   │     due to this expression

error[E011]: function call requires function type
   ┌─ ./tests/scir/E029.lun:16:6
   │
16 │ j :: h();
   │      ^ instead found 'void'

error[E029]: unable to resolve expression at comptime
   ┌─ ./tests/scir/E029.lun:19:9
   │
19 │     l : a = {};
   │         ^
   │         │
   │         due to this expression

error: compilation of `E029` failed due to 14 errors and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "scir/E030": (
        compiler_out: "scir = [
  FunDefinition {
    name: a @ 45..46 (fid = 0);
    typeexpr: none;
    args: [];
    rettypeexpr: none;
    body: Block {
      stmts: [];
      last_expr: Expression {
        expr: Loop {
          label: none;
          body: Block {
            stmts: [
              Expression {
                expr: Break {
                  label: b;
                  expr: none;
                  index: none;
                };
                typ: unknown;
              } @ 78..86 (fid = 0) @ 78..86 (fid = 0),
            ];
            last_expr: none;
            typ: void;
          } @ 68..93 (fid = 0);
          index: 0;
        };
        typ: never;
      } @ 63..93 (fid = 0);
      typ: never;
    } @ 57..95 (fid = 0);
    info: {
      defined_mut: false;
    };
    sym: Symbol {
      kind: function;
      name: a @ 45..46 (fid = 0);
      realname: none;
      which: 0;
      path: E030::a;
      typ: *fun () -> void;
      typeness: explicit;
      value: none;
    };
  } @ 45..95 (fid = 0),

  FunDefinition {
    name: c @ 97..98 (fid = 0);
    typeexpr: none;
    args: [];
    rettypeexpr: none;
    body: Block {
      stmts: [];
      last_expr: Expression {
        expr: Loop {
          label: none;
          body: Block {
            stmts: [
              Expression {
                expr: Continue {
                  label: d;
                  index: none;
                };
                typ: never;
              } @ 130..141 (fid = 0) @ 130..141 (fid = 0),
            ];
            last_expr: none;
            typ: never;
          } @ 120..148 (fid = 0);
          index: 0;
        };
        typ: never;
      } @ 115..148 (fid = 0);
      typ: never;
    } @ 109..150 (fid = 0);
    info: {
      defined_mut: false;
    };
    sym: Symbol {
      kind: function;
      name: c @ 97..98 (fid = 0);
      realname: none;
      which: 0;
      path: E030::c;
      typ: *fun () -> void;
      typeness: explicit;
      value: none;
    };
  } @ 97..150 (fid = 0),
]
error[E030]: use of undeclared label 'b'
  ┌─ ./tests/scir/E030.lun:4:9
  │
4 │         break :b;
  │         ^^^^^^^^

error[E030]: use of undeclared label 'd'
   ┌─ ./tests/scir/E030.lun:10:9
   │
10 │         continue :d;
   │         ^^^^^^^^^^^

error: compilation of `E030` failed due to 2 errors and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "scir/E031": (
        compiler_out: "scir = [
  FunDefinition {
    name: a @ 56..57 (fid = 0);
    typeexpr: none;
    args: [];
    rettypeexpr: none;
    body: Block {
      stmts: [
        Expression {
          expr: Block {
            label: blk @ 73..76 (fid = 0);
            block: Block {
              stmts: [
                Expression {
                  expr: If {
                    cond: Expression {
                      expr: boolean false;
                      typ: bool;
                    } @ 91..96 (fid = 0);
                    then_br: Expression {
                      expr: Block {
                        label: none;
                        block: Block {
                          stmts: [
                            Expression {
                              expr: Break {
                                label: blk;
                                expr: none;
                                index: 0;
                              };
                              typ: never;
                            } @ 150..160 (fid = 0) @ 150..160 (fid = 0),
                          ];
                          last_expr: none;
                          typ: never;
                        } @ 97..171 (fid = 0);
                        index: none;
                      };
                      typ: never;
                    } @ 88..171 (fid = 0);
                    else_br: none;
                  };
                  typ: void;
                } @ 88..171 (fid = 0) @ 88..171 (fid = 0),

                Expression {
                  expr: Break {
                    label: none;
                    expr: none;
                    index: none;
                  };
                  typ: unknown;
                } @ 181..186 (fid = 0) @ 181..186 (fid = 0),
              ];
              last_expr: none;
              typ: void;
            } @ 78..193 (fid = 0);
            index: 0;
          };
          typ: void;
        } @ 73..193 (fid = 0) @ 73..193 (fid = 0),
      ];
      last_expr: none;
      typ: void;
    } @ 67..196 (fid = 0);
    info: {
      defined_mut: false;
    };
    sym: Symbol {
      kind: function;
      name: a @ 56..57 (fid = 0);
      realname: none;
      which: 0;
      path: E031::a;
      typ: *fun () -> void;
      typeness: explicit;
      value: none;
    };
  } @ 56..196 (fid = 0),
]
error[E031]: implicit label `break` inside of a labeled block
  ┌─ ./tests/scir/E031.lun:9:9
  │
9 │         break;
  │         ^^^^^ 'break' statement referring to a labeled block need to have a label

error: compilation of `E031` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "scir/E032": (
        compiler_out: "scir = [
  FunDefinition {
    name: a @ 44..45 (fid = 0);
    typeexpr: none;
    args: [];
    rettypeexpr: none;
    body: Block {
      stmts: [];
      last_expr: Expression {
        expr: Block {
          label: blk @ 61..64 (fid = 0);
          block: Block {
            stmts: [
              Expression {
                expr: If {
                  cond: Expression {
                    expr: boolean false;
                    typ: bool;
                  } @ 79..84 (fid = 0);
                  then_br: Expression {
                    expr: Block {
                      label: none;
                      block: Block {
                        stmts: [
                          Expression {
                            expr: Break {
                              label: blk;
                              expr: none;
                              index: 0;
                            };
                            typ: never;
                          } @ 138..148 (fid = 0) @ 138..148 (fid = 0),
                        ];
                        last_expr: none;
                        typ: never;
                      } @ 85..159 (fid = 0);
                      index: none;
                    };
                    typ: never;
                  } @ 76..159 (fid = 0);
                  else_br: none;
                };
                typ: void;
              } @ 76..159 (fid = 0) @ 76..159 (fid = 0),

              Expression {
                expr: Continue {
                  label: blk;
                  index: none;
                };
                typ: never;
              } @ 169..182 (fid = 0) @ 169..182 (fid = 0),
            ];
            last_expr: none;
            typ: never;
          } @ 66..189 (fid = 0);
          index: 0;
        };
        typ: void;
      } @ 61..189 (fid = 0);
      typ: void;
    } @ 55..191 (fid = 0);
    info: {
      defined_mut: false;
    };
    sym: Symbol {
      kind: function;
      name: a @ 44..45 (fid = 0);
      realname: none;
      which: 0;
      path: E032::a;
      typ: *fun () -> void;
      typeness: explicit;
      value: none;
    };
  } @ 44..191 (fid = 0),
]
error[E032]: a block cannot be 'continue'd
  ┌─ ./tests/scir/E032.lun:9:9
  │
9 │         continue :blk;
  │         ^^^^^^^^^^^^^
  │
  = you might want to use a loop instead like 'while', 'for' or 'loop'.

error: compilation of `E032` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "scir/E033": (
        compiler_out: "scir = [
  FunDefinition {
    name: a @ 51..52 (fid = 0);
    typeexpr: none;
    args: [];
    rettypeexpr: none;
    body: Block {
      stmts: [];
      last_expr: Expression {
        expr: Loop {
          label: none;
          body: Block {
            stmts: [
              Expression {
                expr: If {
                  cond: Expression {
                    expr: Unary {
                      op: Not;
                      expr: Expression {
                        expr: boolean true;
                        typ: bool;
                      } @ 74..78 (fid = 0);
                    };
                    typ: bool;
                  } @ none;
                  then_br: Expression {
                    expr: Break {
                      label: none;
                      expr: none;
                      index: 0;
                    };
                    typ: never;
                  } @ none;
                  else_br: none;
                };
                typ: void;
              } @ none @ none,

              Expression {
                expr: Block {
                  label: none;
                  block: Block {
                    stmts: [
                      Expression {
                        expr: Break {
                          label: none;
                          expr: Expression {
                            expr: integer 12;
                            typ: i32;
                          } @ 95..97 (fid = 0);
                          index: 0;
                        };
                        typ: never;
                      } @ 89..97 (fid = 0) @ 89..97 (fid = 0),
                    ];
                    last_expr: none;
                    typ: never;
                  } @ 79..104 (fid = 0);
                  index: none;
                };
                typ: never;
              } @ none @ none,
            ];
            last_expr: none;
            typ: never;
          } @ 79..104 (fid = 0);
          index: 0;
        };
        typ: void;
      } @ 68..104 (fid = 0);
      typ: void;
    } @ 62..106 (fid = 0);
    info: {
      defined_mut: false;
    };
    sym: Symbol {
      kind: function;
      name: a @ 51..52 (fid = 0);
      realname: none;
      which: 0;
      path: E033::a;
      typ: *fun () -> void;
      typeness: explicit;
      value: none;
    };
  } @ 51..106 (fid = 0),
]
error[E033]: 'break' from a predicate or iterator loop with a value
  ┌─ ./tests/scir/E033.lun:4:9
  │
4 │         break 12;
  │         ^^^^^^^^ can only 'break' with a value from a labeled block or an infinite loop

error: compilation of `E033` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "scir/E034": (
        compiler_out: "scir = [
  FunDefinition {
    name: a @ 44..45 (fid = 0);
    typeexpr: none;
    args: [];
    rettypeexpr: none;
    body: Block {
      stmts: [
        BindingDef {
          name: bn @ 90..92 (fid = 0);
          mutability: not;
          typeexpr: Expression {
            expr: Symbol {
              kind: global;
              name: i8 @ none;
              realname: none;
              which: 0;
              path: ∅;
              typ: type;
              typeness: explicit;
              value: Type {
                type: i8;
              };
            };
            typ: type;
          } @ 95..97 (fid = 0);
          value: Expression {
            expr: Unary {
              op: Negation;
              expr: Expression {
                expr: integer 128;
                typ: i8;
              } @ 101..104 (fid = 0);
            };
            typ: i8;
          } @ 100..104 (fid = 0);
          sym: Symbol {
            kind: local;
            name: bn @ 90..92 (fid = 0);
            realname: none;
            which: 0;
            path: bn;
            typ: i8;
            typeness: explicit;
            value: none;
          };
        } @ 90..104 (fid = 0),

        BindingDef {
          name: bx @ 110..112 (fid = 0);
          mutability: not;
          typeexpr: Expression {
            expr: Symbol {
              kind: global;
              name: i8 @ none;
              realname: none;
              which: 0;
              path: ∅;
              typ: type;
              typeness: explicit;
              value: Type {
                type: i8;
              };
            };
            typ: type;
          } @ 115..117 (fid = 0);
          value: Expression {
            expr: integer 128;
            typ: i8;
          } @ 120..123 (fid = 0);
          sym: Symbol {
            kind: local;
            name: bx @ 110..112 (fid = 0);
            realname: none;
            which: 1;
            path: bx;
            typ: i8;
            typeness: explicit;
            value: none;
          };
        } @ 110..123 (fid = 0),

        BindingDef {
          name: cn @ 130..132 (fid = 0);
          mutability: not;
          typeexpr: Expression {
            expr: Symbol {
              kind: global;
              name: i16 @ none;
              realname: none;
              which: 0;
              path: ∅;
              typ: type;
              typeness: explicit;
              value: Type {
                type: i16;
              };
            };
            typ: type;
          } @ 135..138 (fid = 0);
          value: Expression {
            expr: Unary {
              op: Negation;
              expr: Expression {
                expr: integer 32768;
                typ: i16;
              } @ 142..148 (fid = 0);
            };
            typ: i16;
          } @ 141..148 (fid = 0);
          sym: Symbol {
            kind: local;
            name: cn @ 130..132 (fid = 0);
            realname: none;
            which: 2;
            path: cn;
            typ: i16;
            typeness: explicit;
            value: none;
          };
        } @ 130..148 (fid = 0),

        BindingDef {
          name: cx @ 154..156 (fid = 0);
          mutability: not;
          typeexpr: Expression {
            expr: Symbol {
              kind: global;
              name: i16 @ none;
              realname: none;
              which: 0;
              path: ∅;
              typ: type;
              typeness: explicit;
              value: Type {
                type: i16;
              };
            };
            typ: type;
          } @ 159..162 (fid = 0);
          value: Expression {
            expr: integer 32768;
            typ: i16;
          } @ 165..171 (fid = 0);
          sym: Symbol {
            kind: local;
            name: cx @ 154..156 (fid = 0);
            realname: none;
            which: 3;
            path: cx;
            typ: i16;
            typeness: explicit;
            value: none;
          };
        } @ 154..171 (fid = 0),

        BindingDef {
          name: dn @ 178..180 (fid = 0);
          mutability: not;
          typeexpr: Expression {
            expr: Symbol {
              kind: global;
              name: i32 @ none;
              realname: none;
              which: 0;
              path: ∅;
              typ: type;
              typeness: explicit;
              value: Type {
                type: i32;
              };
            };
            typ: type;
          } @ 183..186 (fid = 0);
          value: Expression {
            expr: Unary {
              op: Negation;
              expr: Expression {
                expr: integer 2147483648;
                typ: i32;
              } @ 190..203 (fid = 0);
            };
            typ: i32;
          } @ 189..203 (fid = 0);
          sym: Symbol {
            kind: local;
            name: dn @ 178..180 (fid = 0);
            realname: none;
            which: 4;
            path: dn;
            typ: i32;
            typeness: explicit;
            value: none;
          };
        } @ 178..203 (fid = 0),

        BindingDef {
          name: dx @ 209..211 (fid = 0);
          mutability: not;
          typeexpr: Expression {
            expr: Symbol {
              kind: global;
              name: i32 @ none;
              realname: none;
              which: 0;
              path: ∅;
              typ: type;
              typeness: explicit;
              value: Type {
                type: i32;
              };
            };
            typ: type;
          } @ 214..217 (fid = 0);
          value: Expression {
            expr: integer 2147483648;
            typ: i32;
          } @ 220..233 (fid = 0);
          sym: Symbol {
            kind: local;
            name: dx @ 209..211 (fid = 0);
            realname: none;
            which: 5;
            path: dx;
            typ: i32;
            typeness: explicit;
            value: none;
          };
        } @ 209..233 (fid = 0),

        BindingDef {
          name: en @ 240..242 (fid = 0);
          mutability: not;
          typeexpr: Expression {
            expr: Symbol {
              kind: global;
              name: i64 @ none;
              realname: none;
              which: 0;
              path: ∅;
              typ: type;
              typeness: explicit;
              value: Type {
                type: i64;
              };
            };
            typ: type;
          } @ 245..248 (fid = 0);
          value: Expression {
            expr: Unary {
              op: Negation;
              expr: Expression {
                expr: integer 9223372036854775808;
                typ: i64;
              } @ 252..277 (fid = 0);
            };
            typ: i64;
          } @ 251..277 (fid = 0);
          sym: Symbol {
            kind: local;
            name: en @ 240..242 (fid = 0);
            realname: none;
            which: 6;
            path: en;
            typ: i64;
            typeness: explicit;
            value: none;
          };
        } @ 240..277 (fid = 0),

        BindingDef {
          name: ex @ 283..285 (fid = 0);
          mutability: not;
          typeexpr: Expression {
            expr: Symbol {
              kind: global;
              name: i64 @ none;
              realname: none;
              which: 0;
              path: ∅;
              typ: type;
              typeness: explicit;
              value: Type {
                type: i64;
              };
            };
            typ: type;
          } @ 288..291 (fid = 0);
          value: Expression {
            expr: integer 9223372036854775808;
            typ: i64;
          } @ 294..319 (fid = 0);
          sym: Symbol {
            kind: local;
            name: ex @ 283..285 (fid = 0);
            realname: none;
            which: 7;
            path: ex;
            typ: i64;
            typeness: explicit;
            value: none;
          };
        } @ 283..319 (fid = 0),

        BindingDef {
          name: fn @ 326..328 (fid = 0);
          mutability: not;
          typeexpr: Expression {
            expr: Symbol {
              kind: global;
              name: i128 @ none;
              realname: none;
              which: 0;
              path: ∅;
              typ: type;
              typeness: explicit;
              value: Type {
                type: i128;
              };
            };
            typ: type;
          } @ 331..335 (fid = 0);
          value: Expression {
            expr: Unary {
              op: Negation;
              expr: Expression {
                expr: integer 170141183460469231731687303715884105728;
                typ: i128;
              } @ 339..390 (fid = 0);
            };
            typ: i128;
          } @ 338..390 (fid = 0);
          sym: Symbol {
            kind: local;
            name: fn @ 326..328 (fid = 0);
            realname: none;
            which: 8;
            path: fn;
            typ: i128;
            typeness: explicit;
            value: none;
          };
        } @ 326..390 (fid = 0),

        BindingDef {
          name: fx @ 396..398 (fid = 0);
          mutability: not;
          typeexpr: Expression {
            expr: Symbol {
              kind: global;
              name: i128 @ none;
              realname: none;
              which: 0;
              path: ∅;
              typ: type;
              typeness: explicit;
              value: Type {
                type: i128;
              };
            };
            typ: type;
          } @ 401..405 (fid = 0);
          value: Expression {
            expr: integer 170141183460469231731687303715884105728;
            typ: i128;
          } @ 408..459 (fid = 0);
          sym: Symbol {
            kind: local;
            name: fx @ 396..398 (fid = 0);
            realname: none;
            which: 9;
            path: fx;
            typ: i128;
            typeness: explicit;
            value: none;
          };
        } @ 396..459 (fid = 0),

        BindingDef {
          name: gx @ 497..499 (fid = 0);
          mutability: not;
          typeexpr: Expression {
            expr: Symbol {
              kind: global;
              name: u8 @ none;
              realname: none;
              which: 0;
              path: ∅;
              typ: type;
              typeness: explicit;
              value: Type {
                type: u8;
              };
            };
            typ: type;
          } @ 502..504 (fid = 0);
          value: Expression {
            expr: integer 256;
            typ: u8;
          } @ 507..510 (fid = 0);
          sym: Symbol {
            kind: local;
            name: gx @ 497..499 (fid = 0);
            realname: none;
            which: 10;
            path: gx;
            typ: u8;
            typeness: explicit;
            value: none;
          };
        } @ 497..510 (fid = 0),

        BindingDef {
          name: hx @ 517..519 (fid = 0);
          mutability: not;
          typeexpr: Expression {
            expr: Symbol {
              kind: global;
              name: u16 @ none;
              realname: none;
              which: 0;
              path: ∅;
              typ: type;
              typeness: explicit;
              value: Type {
                type: u16;
              };
            };
            typ: type;
          } @ 522..525 (fid = 0);
          value: Expression {
            expr: integer 65536;
            typ: u16;
          } @ 528..534 (fid = 0);
          sym: Symbol {
            kind: local;
            name: hx @ 517..519 (fid = 0);
            realname: none;
            which: 11;
            path: hx;
            typ: u16;
            typeness: explicit;
            value: none;
          };
        } @ 517..534 (fid = 0),

        BindingDef {
          name: ix @ 541..543 (fid = 0);
          mutability: not;
          typeexpr: Expression {
            expr: Symbol {
              kind: global;
              name: u32 @ none;
              realname: none;
              which: 0;
              path: ∅;
              typ: type;
              typeness: explicit;
              value: Type {
                type: u32;
              };
            };
            typ: type;
          } @ 546..549 (fid = 0);
          value: Expression {
            expr: integer 4294967296;
            typ: u32;
          } @ 552..565 (fid = 0);
          sym: Symbol {
            kind: local;
            name: ix @ 541..543 (fid = 0);
            realname: none;
            which: 12;
            path: ix;
            typ: u32;
            typeness: explicit;
            value: none;
          };
        } @ 541..565 (fid = 0),

        BindingDef {
          name: jx @ 572..574 (fid = 0);
          mutability: not;
          typeexpr: Expression {
            expr: Symbol {
              kind: global;
              name: u64 @ none;
              realname: none;
              which: 0;
              path: ∅;
              typ: type;
              typeness: explicit;
              value: Type {
                type: u64;
              };
            };
            typ: type;
          } @ 577..580 (fid = 0);
          value: Expression {
            expr: integer 18446744073709551616;
            typ: u64;
          } @ 583..609 (fid = 0);
          sym: Symbol {
            kind: local;
            name: jx @ 572..574 (fid = 0);
            realname: none;
            which: 13;
            path: jx;
            typ: u64;
            typeness: explicit;
            value: none;
          };
        } @ 572..609 (fid = 0),

        BindingDef {
          name: ln @ 764..766 (fid = 0);
          mutability: not;
          typeexpr: Expression {
            expr: Symbol {
              kind: global;
              name: f32 @ none;
              realname: none;
              which: 0;
              path: ∅;
              typ: type;
              typeness: explicit;
              value: Type {
                type: f32;
              };
            };
            typ: type;
          } @ 769..772 (fid = 0);
          value: Expression {
            expr: Unary {
              op: Negation;
              expr: Expression {
                expr: float 3.40282348e38;
                typ: f32;
              } @ 776..792 (fid = 0);
            };
            typ: f32;
          } @ 775..792 (fid = 0);
          sym: Symbol {
            kind: local;
            name: ln @ 764..766 (fid = 0);
            realname: none;
            which: 14;
            path: ln;
            typ: f32;
            typeness: explicit;
            value: none;
          };
        } @ 764..792 (fid = 0),

        BindingDef {
          name: lx @ 798..800 (fid = 0);
          mutability: not;
          typeexpr: Expression {
            expr: Symbol {
              kind: global;
              name: f32 @ none;
              realname: none;
              which: 0;
              path: ∅;
              typ: type;
              typeness: explicit;
              value: Type {
                type: f32;
              };
            };
            typ: type;
          } @ 803..806 (fid = 0);
          value: Expression {
            expr: float 3.40282348e38;
            typ: f32;
          } @ 809..825 (fid = 0);
          sym: Symbol {
            kind: local;
            name: lx @ 798..800 (fid = 0);
            realname: none;
            which: 15;
            path: lx;
            typ: f32;
            typeness: explicit;
            value: none;
          };
        } @ 798..825 (fid = 0),

        BindingDef {
          name: mn @ 832..834 (fid = 0);
          mutability: not;
          typeexpr: Expression {
            expr: Symbol {
              kind: global;
              name: f64 @ none;
              realname: none;
              which: 0;
              path: ∅;
              typ: type;
              typeness: explicit;
              value: Type {
                type: f64;
              };
            };
            typ: type;
          } @ 837..840 (fid = 0);
          value: Expression {
            expr: Unary {
              op: Negation;
              expr: Expression {
                expr: float inf;
                typ: f64;
              } @ 844..872 (fid = 0);
            };
            typ: f64;
          } @ 843..872 (fid = 0);
          sym: Symbol {
            kind: local;
            name: mn @ 832..834 (fid = 0);
            realname: none;
            which: 16;
            path: mn;
            typ: f64;
            typeness: explicit;
            value: none;
          };
        } @ 832..872 (fid = 0),

        BindingDef {
          name: mx @ 878..880 (fid = 0);
          mutability: not;
          typeexpr: Expression {
            expr: Symbol {
              kind: global;
              name: f64 @ none;
              realname: none;
              which: 0;
              path: ∅;
              typ: type;
              typeness: explicit;
              value: Type {
                type: f64;
              };
            };
            typ: type;
          } @ 883..886 (fid = 0);
          value: Expression {
            expr: float inf;
            typ: f64;
          } @ 889..917 (fid = 0);
          sym: Symbol {
            kind: local;
            name: mx @ 878..880 (fid = 0);
            realname: none;
            which: 17;
            path: mx;
            typ: f64;
            typeness: explicit;
            value: none;
          };
        } @ 878..917 (fid = 0),
      ];
      last_expr: none;
      typ: void;
    } @ 55..920 (fid = 0);
    info: {
      defined_mut: false;
    };
    sym: Symbol {
      kind: function;
      name: a @ 44..45 (fid = 0);
      realname: none;
      which: 0;
      path: E034::a;
      typ: *fun () -> void;
      typeness: explicit;
      value: none;
    };
  } @ 44..920 (fid = 0),
]
error[E034]: literal out of range
  ┌─ ./tests/scir/E034.lun:5:16
  │
5 │     bn : i8 = -128;
  │                ^^^
  │
  = the literal (of value 128) does not fit in the type 'i8'
  = the range of valid integers for this type is '-128..=127'

error[E034]: literal out of range
  ┌─ ./tests/scir/E034.lun:6:15
  │
6 │     bx : i8 = 128;
  │               ^^^
  │
  = the literal (of value 128) does not fit in the type 'i8'
  = the range of valid integers for this type is '-128..=127'

error[E034]: literal out of range
  ┌─ ./tests/scir/E034.lun:8:17
  │
8 │     cn : i16 = -32_768;
  │                 ^^^^^^
  │
  = the literal (of value 32768) does not fit in the type 'i16'
  = the range of valid integers for this type is '-32768..=32767'

error[E034]: literal out of range
  ┌─ ./tests/scir/E034.lun:9:16
  │
9 │     cx : i16 = 32_768;
  │                ^^^^^^
  │
  = the literal (of value 32768) does not fit in the type 'i16'
  = the range of valid integers for this type is '-32768..=32767'

error[E034]: literal out of range
   ┌─ ./tests/scir/E034.lun:11:17
   │
11 │     dn : i32 = -2_147_483_648;
   │                 ^^^^^^^^^^^^^
   │
   = the literal (of value 2147483648) does not fit in the type 'i32'
   = the range of valid integers for this type is '-2147483648..=2147483647'

error[E034]: literal out of range
   ┌─ ./tests/scir/E034.lun:12:16
   │
12 │     dx : i32 = 2_147_483_648;
   │                ^^^^^^^^^^^^^
   │
   = the literal (of value 2147483648) does not fit in the type 'i32'
   = the range of valid integers for this type is '-2147483648..=2147483647'

error[E034]: literal out of range
   ┌─ ./tests/scir/E034.lun:14:17
   │
14 │     en : i64 = -9_223_372_036_854_775_808;
   │                 ^^^^^^^^^^^^^^^^^^^^^^^^^
   │
   = the literal (of value 9223372036854775808) does not fit in the type 'i64'
   = the range of valid integers for this type is '-9223372036854775808..=9223372036854775807'

error[E034]: literal out of range
   ┌─ ./tests/scir/E034.lun:15:16
   │
15 │     ex : i64 = 9_223_372_036_854_775_808;
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^
   │
   = the literal (of value 9223372036854775808) does not fit in the type 'i64'
   = the range of valid integers for this type is '-9223372036854775808..=9223372036854775807'

error[E034]: literal out of range
   ┌─ ./tests/scir/E034.lun:17:18
   │
17 │     fn : i128 = -170_141_183_460_469_231_731_687_303_715_884_105_728;
   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   │
   = the literal (of value 170141183460469231731687303715884105728) does not fit in the type 'i128'
   = the range of valid integers for this type is '-170141183460469231731687303715884105728..=170141183460469231731687303715884105727'

error[E034]: literal out of range
   ┌─ ./tests/scir/E034.lun:18:17
   │
18 │     fx : i128 = 170_141_183_460_469_231_731_687_303_715_884_105_728;
   │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   │
   = the literal (of value 170141183460469231731687303715884105728) does not fit in the type 'i128'
   = the range of valid integers for this type is '-170141183460469231731687303715884105728..=170141183460469231731687303715884105727'

error[E034]: literal out of range
   ┌─ ./tests/scir/E034.lun:22:15
   │
22 │     gx : u8 = 256;
   │               ^^^
   │
   = the literal (of value 256) does not fit in the type 'u8'
   = the range of valid integers for this type is '0..=255'

error[E034]: literal out of range
   ┌─ ./tests/scir/E034.lun:24:16
   │
24 │     hx : u16 = 65_536;
   │                ^^^^^^
   │
   = the literal (of value 65536) does not fit in the type 'u16'
   = the range of valid integers for this type is '0..=65535'

error[E034]: literal out of range
   ┌─ ./tests/scir/E034.lun:26:16
   │
26 │     ix : u32 = 4_294_967_296;
   │                ^^^^^^^^^^^^^
   │
   = the literal (of value 4294967296) does not fit in the type 'u32'
   = the range of valid integers for this type is '0..=4294967295'

error[E034]: literal out of range
   ┌─ ./tests/scir/E034.lun:28:16
   │
28 │     jx : u64 = 18_446_744_073_709_551_616;
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^
   │
   = the literal (of value 18446744073709551616) does not fit in the type 'u64'
   = the range of valid integers for this type is '0..=18446744073709551615'

error[E034]: literal out of range
   ┌─ ./tests/scir/E034.lun:35:17
   │
35 │     ln : f32 = -3.402_823_48E+38;
   │                 ^^^^^^^^^^^^^^^^
   │
   = the literal (of value 3.40282348e38) does not fit in the type 'f32'
   = the range of valid integers for this type is '-3.40282347e38..=3.40282347e38'

error[E034]: literal out of range
   ┌─ ./tests/scir/E034.lun:36:16
   │
36 │     lx : f32 = 3.402_823_48E+38;
   │                ^^^^^^^^^^^^^^^^
   │
   = the literal (of value 3.40282348e38) does not fit in the type 'f32'
   = the range of valid integers for this type is '-3.40282347e38..=3.40282347e38'

error[E034]: literal out of range
   ┌─ ./tests/scir/E034.lun:38:17
   │
38 │     mn : f64 = -1.797_693_134_862_315_8E+308;
   │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   │
   = the literal (of value inf) does not fit in the type 'f64'
   = the range of valid integers for this type is '-1.7976931348623157e308..=1.7976931348623157e308'

error[E034]: literal out of range
   ┌─ ./tests/scir/E034.lun:39:16
   │
39 │     mx : f64 = 1.797_693_134_862_315_8E+308;
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   │
   = the literal (of value inf) does not fit in the type 'f64'
   = the range of valid integers for this type is '-1.7976931348623157e308..=1.7976931348623157e308'

error: compilation of `E034` failed due to 18 errors and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "scir/E036": (
        compiler_out: "scir = [
  FunDefinition {
    name: a @ 52..53 (fid = 0);
    typeexpr: none;
    args: [];
    rettypeexpr: none;
    body: Block {
      stmts: [
        BindingDef {
          name: a @ 69..70 (fid = 0);
          mutability: not;
          typeexpr: none;
          value: Expression {
            expr: integer 12;
            typ: i32;
          } @ 74..76 (fid = 0);
          sym: Symbol {
            kind: local;
            name: a @ 69..70 (fid = 0);
            realname: none;
            which: 0;
            path: a;
            typ: i32;
            typeness: implicit;
            value: none;
          };
        } @ 69..76 (fid = 0),

        Expression {
          expr: Borrow {
            mutability: mut;
            expr: Expression {
              expr: Symbol {
                kind: local;
                name: a @ 69..70 (fid = 0);
                realname: none;
                which: 0;
                path: a;
                typ: i32;
                typeness: implicit;
                value: none;
              };
              typ: i32;
            } @ 87..88 (fid = 0);
          };
          typ: *mut i32;
        } @ 82..88 (fid = 0) @ 82..88 (fid = 0),
      ];
      last_expr: none;
      typ: void;
    } @ 63..91 (fid = 0);
    info: {
      defined_mut: false;
    };
    sym: Symbol {
      kind: function;
      name: a @ 52..53 (fid = 0);
      realname: none;
      which: 0;
      path: E036::a;
      typ: *fun () -> void;
      typeness: explicit;
      value: none;
    };
  } @ 52..91 (fid = 0),
]
error[E036]: cannot borrow 'a' as mutable because it is not declared as mutable
  ┌─ ./tests/scir/E036.lun:4:5
  │
3 │     a := 12;
  │     - defined here
4 │     &mut a;
  │     ^^^^^^ mutable borrow here

error: compilation of `E036` failed due to 1 error and 0 warnings

",
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "scir/E037": (
        compiler_out: r#"scir = [
  FunDeclaration {
    name: a @ 44..45 (fid = 0);
    typeexpr: none;
    args: [];
    rettypeexpr: none;
    defined_mut: false;
    sym: Symbol {
      kind: function;
      name: a @ 44..45 (fid = 0);
      realname: none;
      which: 0;
      path: E037::a;
      typ: *fun () -> void;
      typeness: explicit;
      value: none;
    };
  } @ 44..55 (fid = 0),

  FunDefinition {
    name: b @ 57..58 (fid = 0);
    typeexpr: none;
    args: [];
    rettypeexpr: none;
    body: Block {
      stmts: [
        Expression {
          expr: POISONED: None;
          typ: void;
        } @ 74..79 (fid = 0) @ 74..79 (fid = 0),
      ];
      last_expr: none;
      typ: void;
    } @ 68..82 (fid = 0);
    info: {
      defined_mut: false;
    };
    sym: Symbol {
      kind: function;
      name: b @ 57..58 (fid = 0);
      realname: none;
      which: 0;
      path: E037::b;
      typ: *fun () -> void;
      typeness: explicit;
      value: none;
    };
  } @ 57..82 (fid = 0),

  GlobalUninit {
    name: c @ 84..85 (fid = 0);
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: u8 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: u8;
        };
      };
      typ: type;
    } @ 88..90 (fid = 0);
    sym: Symbol {
      kind: global;
      name: c @ 84..85 (fid = 0);
      realname: none;
      which: 0;
      path: E037::c;
      typ: u8;
      typeness: explicit;
      value: none;
    };
  } @ 84..91 (fid = 0),
]
error[E037]: function declaration must be inside of an extern block.
  ┌─ ./tests/scir/E037.lun:2:1
  │
2 │ a :: fun();
  │ ^^^^^^^^^^^
  │
  = consider moving the function declaration into an extern block like 'extern "C" { .. }'.

error[E037]: function declaration must be inside of an extern block.
  ┌─ ./tests/scir/E037.lun:5:5
  │
5 │     fun();
  │     ^^^^^
  │
  = consider moving the function declaration into an extern block like 'extern "C" { .. }'.

error[E037]: global uninit must be inside of an extern block.
  ┌─ ./tests/scir/E037.lun:8:1
  │
8 │ c : u8;
  │ ^^^^^^^
  │
  = consider moving the function declaration into an extern block like 'extern "C" { .. }'.

error: compilation of `E037` failed due to 3 errors and 0 warnings

"#,
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "scir/E039": (
        compiler_out: r##"scir = [
  ExternBlock {
    abi: C;
    items: [];
  } @ 53..135 (fid = 0),
]
error[E039]: a function definition isn't allowed inside of an extern block.
   ┌─ ./tests/scir/E039.lun:3:5
   │  
 2 │ ╭ extern "C" {
 3 │ │     a :: fun() {}
   │ │     ^^^^^^^^^^^^^ defined here.
 4 │ │ 
 5 │ │     b :: 12;
   · │
 9 │ │     extern "C" {}
10 │ │ }
   │ ╰─' inside this extern block

error[E039]: a global definition isn't allowed inside of an extern block.
   ┌─ ./tests/scir/E039.lun:5:5
   │  
 2 │ ╭ extern "C" {
 3 │ │     a :: fun() {}
 4 │ │ 
 5 │ │     b :: 12;
   │ │     ^^^^^^^^ defined here.
   · │
 9 │ │     extern "C" {}
10 │ │ }
   │ ╰─' inside this extern block

error[E039]: a module isn't allowed inside of an extern block.
   ┌─ ./tests/scir/E039.lun:7:5
   │  
 2 │ ╭ extern "C" {
 3 │ │     a :: fun() {}
 4 │ │ 
 5 │ │     b :: 12;
 6 │ │ 
 7 │ │     #mod empty;
   │ │     ^^^^^^^^^^^ defined here.
 8 │ │ 
 9 │ │     extern "C" {}
10 │ │ }
   │ ╰─' inside this extern block

error[E039]: a extern block isn't allowed inside of an extern block.
   ┌─ ./tests/scir/E039.lun:9:5
   │  
 2 │ ╭ extern "C" {
 3 │ │     a :: fun() {}
 4 │ │ 
 5 │ │     b :: 12;
   · │
 9 │ │     extern "C" {}
   │ │     ^^^^^^^^^^^^^ defined here.
10 │ │ }
   │ ╰─' inside this extern block
   │  
   = you probably want to un nest the extern block

error: compilation of `E039` failed due to 4 errors and 0 warnings

"##,
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "scir/E040": (
        compiler_out: r#"scir = [
  FunDefinition {
    name: a @ 45..46 (fid = 0);
    typeexpr: none;
    args: [];
    rettypeexpr: none;
    body: Block {
      stmts: [];
      last_expr: none;
      typ: void;
    } @ 56..58 (fid = 0);
    info: {
      defined_mut: true;
    };
    sym: Symbol {
      kind: function;
      name: a @ 45..46 (fid = 0);
      realname: none;
      which: 0;
      path: E040::a;
      typ: *fun () -> void;
      typeness: explicit;
      value: none;
    };
  } @ 45..58 (fid = 0),

  FunDeclaration {
    name: b @ 60..61 (fid = 0);
    typeexpr: none;
    args: [];
    rettypeexpr: none;
    defined_mut: true;
    sym: Symbol {
      kind: function;
      name: b @ 60..61 (fid = 0);
      realname: none;
      which: 0;
      path: E040::b;
      typ: *fun () -> void;
      typeness: explicit;
      value: none;
    };
  } @ 60..71 (fid = 0),

  ExternBlock {
    abi: C;
    items: [
      FunDeclaration {
        name: c @ 90..91 (fid = 0);
        typeexpr: none;
        args: [];
        rettypeexpr: none;
        defined_mut: true;
        sym: Symbol {
          kind: function;
          name: c @ 90..91 (fid = 0);
          realname: none;
          which: 0;
          path: E040::c;
          typ: *fun () -> void;
          typeness: explicit;
          value: none;
        };
      } @ 90..101 (fid = 0),
    ];
  } @ 73..103 (fid = 0),
]
error[E040]: cannot define a function definition inside of a mutable global definition
  ┌─ ./tests/scir/E040.lun:2:1
  │
2 │ a := fun() {}
  │ ^^^^^^^^^^^^^

error[E037]: function declaration must be inside of an extern block.
  ┌─ ./tests/scir/E040.lun:4:1
  │
4 │ b := fun();
  │ ^^^^^^^^^^^
  │
  = consider moving the function declaration into an extern block like 'extern "C" { .. }'.

error[E040]: cannot define a function declaration inside of a mutable global definition
  ┌─ ./tests/scir/E040.lun:4:1
  │
4 │ b := fun();
  │ ^^^^^^^^^^^

error[E040]: cannot define a function declaration inside of a mutable global definition
  ┌─ ./tests/scir/E040.lun:7:5
  │
7 │     c := fun();
  │     ^^^^^^^^^^^

error: compilation of `E040` failed due to 4 errors and 0 warnings

"#,
        compiler_code: 255,
        test_out: "",
        test_code: 0,
    ),
    "scir/constant_evaluation": (
        compiler_out: "scir = [
  GlobalDef {
    name: add_i8 @ 18..24 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: i8 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: i8;
        };
      };
      typ: type;
    } @ 27..29 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: integer 34;
          typ: i8;
        } @ 32..34 (fid = 0);
        op: Add;
        rhs: Expression {
          expr: integer 35;
          typ: i8;
        } @ 37..39 (fid = 0);
      };
      typ: i8;
    } @ 32..39 (fid = 0);
    sym: Symbol {
      kind: global;
      name: add_i8 @ 18..24 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::add_i8;
      typ: i8;
      typeness: explicit;
      value: I8 {
        val: 69;
      };
    };
  } @ 18..40 (fid = 0),

  GlobalDef {
    name: add_i16 @ 41..48 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: i16 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: i16;
        };
      };
      typ: type;
    } @ 51..54 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: integer 34;
          typ: i16;
        } @ 57..59 (fid = 0);
        op: Add;
        rhs: Expression {
          expr: integer 35;
          typ: i16;
        } @ 62..64 (fid = 0);
      };
      typ: i16;
    } @ 57..64 (fid = 0);
    sym: Symbol {
      kind: global;
      name: add_i16 @ 41..48 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::add_i16;
      typ: i16;
      typeness: explicit;
      value: I16 {
        val: 69;
      };
    };
  } @ 41..65 (fid = 0),

  GlobalDef {
    name: add_i32 @ 66..73 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: i32 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: i32;
        };
      };
      typ: type;
    } @ 76..79 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: integer 34;
          typ: i32;
        } @ 82..84 (fid = 0);
        op: Add;
        rhs: Expression {
          expr: integer 35;
          typ: i32;
        } @ 87..89 (fid = 0);
      };
      typ: i32;
    } @ 82..89 (fid = 0);
    sym: Symbol {
      kind: global;
      name: add_i32 @ 66..73 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::add_i32;
      typ: i32;
      typeness: explicit;
      value: I32 {
        val: 69;
      };
    };
  } @ 66..90 (fid = 0),

  GlobalDef {
    name: add_i64 @ 91..98 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: i64 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: i64;
        };
      };
      typ: type;
    } @ 101..104 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: integer 34;
          typ: i64;
        } @ 107..109 (fid = 0);
        op: Add;
        rhs: Expression {
          expr: integer 35;
          typ: i64;
        } @ 112..114 (fid = 0);
      };
      typ: i64;
    } @ 107..114 (fid = 0);
    sym: Symbol {
      kind: global;
      name: add_i64 @ 91..98 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::add_i64;
      typ: i64;
      typeness: explicit;
      value: I64 {
        val: 69;
      };
    };
  } @ 91..115 (fid = 0),

  GlobalDef {
    name: add_i128 @ 116..124 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: i128 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: i128;
        };
      };
      typ: type;
    } @ 127..131 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: integer 34;
          typ: i128;
        } @ 134..136 (fid = 0);
        op: Add;
        rhs: Expression {
          expr: integer 35;
          typ: i128;
        } @ 139..141 (fid = 0);
      };
      typ: i128;
    } @ 134..141 (fid = 0);
    sym: Symbol {
      kind: global;
      name: add_i128 @ 116..124 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::add_i128;
      typ: i128;
      typeness: explicit;
      value: I128 {
        val: 69;
      };
    };
  } @ 116..142 (fid = 0),

  GlobalDef {
    name: add_isz @ 143..150 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: isz @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: isz;
        };
      };
      typ: type;
    } @ 153..156 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: integer 34;
          typ: isz;
        } @ 159..161 (fid = 0);
        op: Add;
        rhs: Expression {
          expr: integer 35;
          typ: isz;
        } @ 164..166 (fid = 0);
      };
      typ: isz;
    } @ 159..166 (fid = 0);
    sym: Symbol {
      kind: global;
      name: add_isz @ 143..150 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::add_isz;
      typ: isz;
      typeness: explicit;
      value: I64 {
        val: 69;
      };
    };
  } @ 143..167 (fid = 0),

  GlobalDef {
    name: add_u8 @ 169..175 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: u8 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: u8;
        };
      };
      typ: type;
    } @ 178..180 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: integer 34;
          typ: u8;
        } @ 183..185 (fid = 0);
        op: Add;
        rhs: Expression {
          expr: integer 35;
          typ: u8;
        } @ 188..190 (fid = 0);
      };
      typ: u8;
    } @ 183..190 (fid = 0);
    sym: Symbol {
      kind: global;
      name: add_u8 @ 169..175 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::add_u8;
      typ: u8;
      typeness: explicit;
      value: U8 {
        val: 69;
      };
    };
  } @ 169..191 (fid = 0),

  GlobalDef {
    name: add_u16 @ 192..199 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: u16 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: u16;
        };
      };
      typ: type;
    } @ 202..205 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: integer 34;
          typ: u16;
        } @ 208..210 (fid = 0);
        op: Add;
        rhs: Expression {
          expr: integer 35;
          typ: u16;
        } @ 213..215 (fid = 0);
      };
      typ: u16;
    } @ 208..215 (fid = 0);
    sym: Symbol {
      kind: global;
      name: add_u16 @ 192..199 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::add_u16;
      typ: u16;
      typeness: explicit;
      value: U16 {
        val: 69;
      };
    };
  } @ 192..216 (fid = 0),

  GlobalDef {
    name: add_u32 @ 217..224 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: u32 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: u32;
        };
      };
      typ: type;
    } @ 227..230 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: integer 34;
          typ: u32;
        } @ 233..235 (fid = 0);
        op: Add;
        rhs: Expression {
          expr: integer 35;
          typ: u32;
        } @ 238..240 (fid = 0);
      };
      typ: u32;
    } @ 233..240 (fid = 0);
    sym: Symbol {
      kind: global;
      name: add_u32 @ 217..224 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::add_u32;
      typ: u32;
      typeness: explicit;
      value: U32 {
        val: 69;
      };
    };
  } @ 217..241 (fid = 0),

  GlobalDef {
    name: add_u64 @ 242..249 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: u64 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: u64;
        };
      };
      typ: type;
    } @ 252..255 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: integer 34;
          typ: u64;
        } @ 258..260 (fid = 0);
        op: Add;
        rhs: Expression {
          expr: integer 35;
          typ: u64;
        } @ 263..265 (fid = 0);
      };
      typ: u64;
    } @ 258..265 (fid = 0);
    sym: Symbol {
      kind: global;
      name: add_u64 @ 242..249 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::add_u64;
      typ: u64;
      typeness: explicit;
      value: U64 {
        val: 69;
      };
    };
  } @ 242..266 (fid = 0),

  GlobalDef {
    name: add_u128 @ 267..275 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: u128 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: u128;
        };
      };
      typ: type;
    } @ 278..282 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: integer 34;
          typ: u128;
        } @ 285..287 (fid = 0);
        op: Add;
        rhs: Expression {
          expr: integer 35;
          typ: u128;
        } @ 290..292 (fid = 0);
      };
      typ: u128;
    } @ 285..292 (fid = 0);
    sym: Symbol {
      kind: global;
      name: add_u128 @ 267..275 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::add_u128;
      typ: u128;
      typeness: explicit;
      value: U128 {
        val: 69;
      };
    };
  } @ 267..293 (fid = 0),

  GlobalDef {
    name: add_usz @ 294..301 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: usz @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: usz;
        };
      };
      typ: type;
    } @ 304..307 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: integer 34;
          typ: usz;
        } @ 310..312 (fid = 0);
        op: Add;
        rhs: Expression {
          expr: integer 35;
          typ: usz;
        } @ 315..317 (fid = 0);
      };
      typ: usz;
    } @ 310..317 (fid = 0);
    sym: Symbol {
      kind: global;
      name: add_usz @ 294..301 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::add_usz;
      typ: usz;
      typeness: explicit;
      value: U64 {
        val: 69;
      };
    };
  } @ 294..318 (fid = 0),

  GlobalDef {
    name: add_f32 @ 320..327 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: f32 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: f32;
        };
      };
      typ: type;
    } @ 330..333 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: float 34.0;
          typ: f32;
        } @ 336..339 (fid = 0);
        op: Add;
        rhs: Expression {
          expr: float 35.0;
          typ: f32;
        } @ 342..345 (fid = 0);
      };
      typ: f32;
    } @ 336..345 (fid = 0);
    sym: Symbol {
      kind: global;
      name: add_f32 @ 320..327 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::add_f32;
      typ: f32;
      typeness: explicit;
      value: F32 {
        val: 69;
      };
    };
  } @ 320..346 (fid = 0),

  GlobalDef {
    name: add_f64 @ 347..354 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: f64 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: f64;
        };
      };
      typ: type;
    } @ 357..360 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: float 34.0;
          typ: f64;
        } @ 363..366 (fid = 0);
        op: Add;
        rhs: Expression {
          expr: float 35.0;
          typ: f64;
        } @ 369..372 (fid = 0);
      };
      typ: f64;
    } @ 363..372 (fid = 0);
    sym: Symbol {
      kind: global;
      name: add_f64 @ 347..354 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::add_f64;
      typ: f64;
      typeness: explicit;
      value: F64 {
        val: 69;
      };
    };
  } @ 347..373 (fid = 0),

  GlobalDef {
    name: sub_i8 @ 393..399 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: i8 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: i8;
        };
      };
      typ: type;
    } @ 402..404 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: integer 101;
          typ: i8;
        } @ 407..410 (fid = 0);
        op: Sub;
        rhs: Expression {
          expr: integer 1;
          typ: i8;
        } @ 413..414 (fid = 0);
      };
      typ: i8;
    } @ 407..414 (fid = 0);
    sym: Symbol {
      kind: global;
      name: sub_i8 @ 393..399 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::sub_i8;
      typ: i8;
      typeness: explicit;
      value: I8 {
        val: 100;
      };
    };
  } @ 393..415 (fid = 0),

  GlobalDef {
    name: sub_i16 @ 416..423 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: i16 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: i16;
        };
      };
      typ: type;
    } @ 426..429 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: integer 101;
          typ: i16;
        } @ 432..435 (fid = 0);
        op: Sub;
        rhs: Expression {
          expr: integer 1;
          typ: i16;
        } @ 438..439 (fid = 0);
      };
      typ: i16;
    } @ 432..439 (fid = 0);
    sym: Symbol {
      kind: global;
      name: sub_i16 @ 416..423 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::sub_i16;
      typ: i16;
      typeness: explicit;
      value: I16 {
        val: 100;
      };
    };
  } @ 416..440 (fid = 0),

  GlobalDef {
    name: sub_i32 @ 441..448 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: i32 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: i32;
        };
      };
      typ: type;
    } @ 451..454 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: integer 101;
          typ: i32;
        } @ 457..460 (fid = 0);
        op: Sub;
        rhs: Expression {
          expr: integer 1;
          typ: i32;
        } @ 463..464 (fid = 0);
      };
      typ: i32;
    } @ 457..464 (fid = 0);
    sym: Symbol {
      kind: global;
      name: sub_i32 @ 441..448 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::sub_i32;
      typ: i32;
      typeness: explicit;
      value: I32 {
        val: 100;
      };
    };
  } @ 441..465 (fid = 0),

  GlobalDef {
    name: sub_i64 @ 466..473 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: i64 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: i64;
        };
      };
      typ: type;
    } @ 476..479 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: integer 101;
          typ: i64;
        } @ 482..485 (fid = 0);
        op: Sub;
        rhs: Expression {
          expr: integer 1;
          typ: i64;
        } @ 488..489 (fid = 0);
      };
      typ: i64;
    } @ 482..489 (fid = 0);
    sym: Symbol {
      kind: global;
      name: sub_i64 @ 466..473 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::sub_i64;
      typ: i64;
      typeness: explicit;
      value: I64 {
        val: 100;
      };
    };
  } @ 466..490 (fid = 0),

  GlobalDef {
    name: sub_i128 @ 491..499 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: i128 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: i128;
        };
      };
      typ: type;
    } @ 502..506 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: integer 101;
          typ: i128;
        } @ 509..512 (fid = 0);
        op: Sub;
        rhs: Expression {
          expr: integer 1;
          typ: i128;
        } @ 515..516 (fid = 0);
      };
      typ: i128;
    } @ 509..516 (fid = 0);
    sym: Symbol {
      kind: global;
      name: sub_i128 @ 491..499 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::sub_i128;
      typ: i128;
      typeness: explicit;
      value: I128 {
        val: 100;
      };
    };
  } @ 491..517 (fid = 0),

  GlobalDef {
    name: sub_isz @ 518..525 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: isz @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: isz;
        };
      };
      typ: type;
    } @ 528..531 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: integer 101;
          typ: isz;
        } @ 534..537 (fid = 0);
        op: Sub;
        rhs: Expression {
          expr: integer 1;
          typ: isz;
        } @ 540..541 (fid = 0);
      };
      typ: isz;
    } @ 534..541 (fid = 0);
    sym: Symbol {
      kind: global;
      name: sub_isz @ 518..525 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::sub_isz;
      typ: isz;
      typeness: explicit;
      value: I64 {
        val: 100;
      };
    };
  } @ 518..542 (fid = 0),

  GlobalDef {
    name: sub_u8 @ 544..550 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: u8 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: u8;
        };
      };
      typ: type;
    } @ 553..555 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: integer 101;
          typ: u8;
        } @ 558..561 (fid = 0);
        op: Sub;
        rhs: Expression {
          expr: integer 1;
          typ: u8;
        } @ 564..565 (fid = 0);
      };
      typ: u8;
    } @ 558..565 (fid = 0);
    sym: Symbol {
      kind: global;
      name: sub_u8 @ 544..550 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::sub_u8;
      typ: u8;
      typeness: explicit;
      value: U8 {
        val: 100;
      };
    };
  } @ 544..566 (fid = 0),

  GlobalDef {
    name: sub_u16 @ 567..574 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: u16 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: u16;
        };
      };
      typ: type;
    } @ 577..580 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: integer 101;
          typ: u16;
        } @ 583..586 (fid = 0);
        op: Sub;
        rhs: Expression {
          expr: integer 1;
          typ: u16;
        } @ 589..590 (fid = 0);
      };
      typ: u16;
    } @ 583..590 (fid = 0);
    sym: Symbol {
      kind: global;
      name: sub_u16 @ 567..574 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::sub_u16;
      typ: u16;
      typeness: explicit;
      value: U16 {
        val: 100;
      };
    };
  } @ 567..591 (fid = 0),

  GlobalDef {
    name: sub_u32 @ 592..599 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: u32 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: u32;
        };
      };
      typ: type;
    } @ 602..605 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: integer 101;
          typ: u32;
        } @ 608..611 (fid = 0);
        op: Sub;
        rhs: Expression {
          expr: integer 1;
          typ: u32;
        } @ 614..615 (fid = 0);
      };
      typ: u32;
    } @ 608..615 (fid = 0);
    sym: Symbol {
      kind: global;
      name: sub_u32 @ 592..599 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::sub_u32;
      typ: u32;
      typeness: explicit;
      value: U32 {
        val: 100;
      };
    };
  } @ 592..616 (fid = 0),

  GlobalDef {
    name: sub_u64 @ 617..624 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: u64 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: u64;
        };
      };
      typ: type;
    } @ 627..630 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: integer 101;
          typ: u64;
        } @ 633..636 (fid = 0);
        op: Sub;
        rhs: Expression {
          expr: integer 1;
          typ: u64;
        } @ 639..640 (fid = 0);
      };
      typ: u64;
    } @ 633..640 (fid = 0);
    sym: Symbol {
      kind: global;
      name: sub_u64 @ 617..624 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::sub_u64;
      typ: u64;
      typeness: explicit;
      value: U64 {
        val: 100;
      };
    };
  } @ 617..641 (fid = 0),

  GlobalDef {
    name: sub_u128 @ 642..650 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: u128 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: u128;
        };
      };
      typ: type;
    } @ 653..657 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: integer 101;
          typ: u128;
        } @ 660..663 (fid = 0);
        op: Sub;
        rhs: Expression {
          expr: integer 1;
          typ: u128;
        } @ 666..667 (fid = 0);
      };
      typ: u128;
    } @ 660..667 (fid = 0);
    sym: Symbol {
      kind: global;
      name: sub_u128 @ 642..650 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::sub_u128;
      typ: u128;
      typeness: explicit;
      value: U128 {
        val: 100;
      };
    };
  } @ 642..668 (fid = 0),

  GlobalDef {
    name: sub_usz @ 669..676 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: usz @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: usz;
        };
      };
      typ: type;
    } @ 679..682 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: integer 101;
          typ: usz;
        } @ 685..688 (fid = 0);
        op: Sub;
        rhs: Expression {
          expr: integer 1;
          typ: usz;
        } @ 691..692 (fid = 0);
      };
      typ: usz;
    } @ 685..692 (fid = 0);
    sym: Symbol {
      kind: global;
      name: sub_usz @ 669..676 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::sub_usz;
      typ: usz;
      typeness: explicit;
      value: U64 {
        val: 100;
      };
    };
  } @ 669..693 (fid = 0),

  GlobalDef {
    name: sub_f32 @ 695..702 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: f32 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: f32;
        };
      };
      typ: type;
    } @ 705..708 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: float 101.0;
          typ: f32;
        } @ 711..715 (fid = 0);
        op: Sub;
        rhs: Expression {
          expr: float 1.0;
          typ: f32;
        } @ 718..720 (fid = 0);
      };
      typ: f32;
    } @ 711..720 (fid = 0);
    sym: Symbol {
      kind: global;
      name: sub_f32 @ 695..702 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::sub_f32;
      typ: f32;
      typeness: explicit;
      value: F32 {
        val: 100;
      };
    };
  } @ 695..721 (fid = 0),

  GlobalDef {
    name: sub_f64 @ 722..729 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: f64 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: f64;
        };
      };
      typ: type;
    } @ 732..735 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: float 101.0;
          typ: f64;
        } @ 738..742 (fid = 0);
        op: Sub;
        rhs: Expression {
          expr: float 1.0;
          typ: f64;
        } @ 745..747 (fid = 0);
      };
      typ: f64;
    } @ 738..747 (fid = 0);
    sym: Symbol {
      kind: global;
      name: sub_f64 @ 722..729 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::sub_f64;
      typ: f64;
      typeness: explicit;
      value: F64 {
        val: 100;
      };
    };
  } @ 722..748 (fid = 0),

  GlobalDef {
    name: mul_i8 @ 768..774 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: i8 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: i8;
        };
      };
      typ: type;
    } @ 777..779 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: integer 6;
          typ: i8;
        } @ 782..783 (fid = 0);
        op: Mul;
        rhs: Expression {
          expr: integer 4;
          typ: i8;
        } @ 786..787 (fid = 0);
      };
      typ: i8;
    } @ 782..787 (fid = 0);
    sym: Symbol {
      kind: global;
      name: mul_i8 @ 768..774 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::mul_i8;
      typ: i8;
      typeness: explicit;
      value: I8 {
        val: 24;
      };
    };
  } @ 768..788 (fid = 0),

  GlobalDef {
    name: mul_i16 @ 789..796 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: i16 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: i16;
        };
      };
      typ: type;
    } @ 799..802 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: integer 6;
          typ: i16;
        } @ 805..806 (fid = 0);
        op: Mul;
        rhs: Expression {
          expr: integer 4;
          typ: i16;
        } @ 809..810 (fid = 0);
      };
      typ: i16;
    } @ 805..810 (fid = 0);
    sym: Symbol {
      kind: global;
      name: mul_i16 @ 789..796 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::mul_i16;
      typ: i16;
      typeness: explicit;
      value: I16 {
        val: 24;
      };
    };
  } @ 789..811 (fid = 0),

  GlobalDef {
    name: mul_i32 @ 812..819 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: i32 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: i32;
        };
      };
      typ: type;
    } @ 822..825 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: integer 6;
          typ: i32;
        } @ 828..829 (fid = 0);
        op: Mul;
        rhs: Expression {
          expr: integer 4;
          typ: i32;
        } @ 832..833 (fid = 0);
      };
      typ: i32;
    } @ 828..833 (fid = 0);
    sym: Symbol {
      kind: global;
      name: mul_i32 @ 812..819 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::mul_i32;
      typ: i32;
      typeness: explicit;
      value: I32 {
        val: 24;
      };
    };
  } @ 812..834 (fid = 0),

  GlobalDef {
    name: mul_i64 @ 835..842 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: i64 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: i64;
        };
      };
      typ: type;
    } @ 845..848 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: integer 6;
          typ: i64;
        } @ 851..852 (fid = 0);
        op: Mul;
        rhs: Expression {
          expr: integer 4;
          typ: i64;
        } @ 855..856 (fid = 0);
      };
      typ: i64;
    } @ 851..856 (fid = 0);
    sym: Symbol {
      kind: global;
      name: mul_i64 @ 835..842 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::mul_i64;
      typ: i64;
      typeness: explicit;
      value: I64 {
        val: 24;
      };
    };
  } @ 835..857 (fid = 0),

  GlobalDef {
    name: mul_i128 @ 858..866 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: i128 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: i128;
        };
      };
      typ: type;
    } @ 869..873 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: integer 6;
          typ: i128;
        } @ 876..877 (fid = 0);
        op: Mul;
        rhs: Expression {
          expr: integer 4;
          typ: i128;
        } @ 880..881 (fid = 0);
      };
      typ: i128;
    } @ 876..881 (fid = 0);
    sym: Symbol {
      kind: global;
      name: mul_i128 @ 858..866 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::mul_i128;
      typ: i128;
      typeness: explicit;
      value: I128 {
        val: 24;
      };
    };
  } @ 858..882 (fid = 0),

  GlobalDef {
    name: mul_isz @ 883..890 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: isz @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: isz;
        };
      };
      typ: type;
    } @ 893..896 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: integer 6;
          typ: isz;
        } @ 899..900 (fid = 0);
        op: Mul;
        rhs: Expression {
          expr: integer 4;
          typ: isz;
        } @ 903..904 (fid = 0);
      };
      typ: isz;
    } @ 899..904 (fid = 0);
    sym: Symbol {
      kind: global;
      name: mul_isz @ 883..890 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::mul_isz;
      typ: isz;
      typeness: explicit;
      value: I64 {
        val: 24;
      };
    };
  } @ 883..905 (fid = 0),

  GlobalDef {
    name: mul_u8 @ 907..913 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: u8 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: u8;
        };
      };
      typ: type;
    } @ 916..918 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: integer 6;
          typ: u8;
        } @ 921..922 (fid = 0);
        op: Mul;
        rhs: Expression {
          expr: integer 4;
          typ: u8;
        } @ 925..926 (fid = 0);
      };
      typ: u8;
    } @ 921..926 (fid = 0);
    sym: Symbol {
      kind: global;
      name: mul_u8 @ 907..913 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::mul_u8;
      typ: u8;
      typeness: explicit;
      value: U8 {
        val: 24;
      };
    };
  } @ 907..927 (fid = 0),

  GlobalDef {
    name: mul_u16 @ 928..935 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: u16 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: u16;
        };
      };
      typ: type;
    } @ 938..941 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: integer 6;
          typ: u16;
        } @ 944..945 (fid = 0);
        op: Mul;
        rhs: Expression {
          expr: integer 4;
          typ: u16;
        } @ 948..949 (fid = 0);
      };
      typ: u16;
    } @ 944..949 (fid = 0);
    sym: Symbol {
      kind: global;
      name: mul_u16 @ 928..935 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::mul_u16;
      typ: u16;
      typeness: explicit;
      value: U16 {
        val: 24;
      };
    };
  } @ 928..950 (fid = 0),

  GlobalDef {
    name: mul_u32 @ 951..958 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: u32 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: u32;
        };
      };
      typ: type;
    } @ 961..964 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: integer 6;
          typ: u32;
        } @ 967..968 (fid = 0);
        op: Mul;
        rhs: Expression {
          expr: integer 4;
          typ: u32;
        } @ 971..972 (fid = 0);
      };
      typ: u32;
    } @ 967..972 (fid = 0);
    sym: Symbol {
      kind: global;
      name: mul_u32 @ 951..958 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::mul_u32;
      typ: u32;
      typeness: explicit;
      value: U32 {
        val: 24;
      };
    };
  } @ 951..973 (fid = 0),

  GlobalDef {
    name: mul_u64 @ 974..981 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: u64 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: u64;
        };
      };
      typ: type;
    } @ 984..987 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: integer 6;
          typ: u64;
        } @ 990..991 (fid = 0);
        op: Mul;
        rhs: Expression {
          expr: integer 4;
          typ: u64;
        } @ 994..995 (fid = 0);
      };
      typ: u64;
    } @ 990..995 (fid = 0);
    sym: Symbol {
      kind: global;
      name: mul_u64 @ 974..981 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::mul_u64;
      typ: u64;
      typeness: explicit;
      value: U64 {
        val: 24;
      };
    };
  } @ 974..996 (fid = 0),

  GlobalDef {
    name: mul_u128 @ 997..1005 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: u128 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: u128;
        };
      };
      typ: type;
    } @ 1008..1012 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: integer 6;
          typ: u128;
        } @ 1015..1016 (fid = 0);
        op: Mul;
        rhs: Expression {
          expr: integer 4;
          typ: u128;
        } @ 1019..1020 (fid = 0);
      };
      typ: u128;
    } @ 1015..1020 (fid = 0);
    sym: Symbol {
      kind: global;
      name: mul_u128 @ 997..1005 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::mul_u128;
      typ: u128;
      typeness: explicit;
      value: U128 {
        val: 24;
      };
    };
  } @ 997..1021 (fid = 0),

  GlobalDef {
    name: mul_usz @ 1022..1029 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: usz @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: usz;
        };
      };
      typ: type;
    } @ 1032..1035 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: integer 6;
          typ: usz;
        } @ 1038..1039 (fid = 0);
        op: Mul;
        rhs: Expression {
          expr: integer 4;
          typ: usz;
        } @ 1042..1043 (fid = 0);
      };
      typ: usz;
    } @ 1038..1043 (fid = 0);
    sym: Symbol {
      kind: global;
      name: mul_usz @ 1022..1029 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::mul_usz;
      typ: usz;
      typeness: explicit;
      value: U64 {
        val: 24;
      };
    };
  } @ 1022..1044 (fid = 0),

  GlobalDef {
    name: mul_f32 @ 1046..1053 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: f32 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: f32;
        };
      };
      typ: type;
    } @ 1056..1059 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: float 6.0;
          typ: f32;
        } @ 1062..1064 (fid = 0);
        op: Mul;
        rhs: Expression {
          expr: float 4.0;
          typ: f32;
        } @ 1067..1069 (fid = 0);
      };
      typ: f32;
    } @ 1062..1069 (fid = 0);
    sym: Symbol {
      kind: global;
      name: mul_f32 @ 1046..1053 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::mul_f32;
      typ: f32;
      typeness: explicit;
      value: F32 {
        val: 24;
      };
    };
  } @ 1046..1070 (fid = 0),

  GlobalDef {
    name: mul_f64 @ 1071..1078 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: f64 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: f64;
        };
      };
      typ: type;
    } @ 1081..1084 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: float 6.0;
          typ: f64;
        } @ 1087..1089 (fid = 0);
        op: Mul;
        rhs: Expression {
          expr: float 4.0;
          typ: f64;
        } @ 1092..1094 (fid = 0);
      };
      typ: f64;
    } @ 1087..1094 (fid = 0);
    sym: Symbol {
      kind: global;
      name: mul_f64 @ 1071..1078 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::mul_f64;
      typ: f64;
      typeness: explicit;
      value: F64 {
        val: 24;
      };
    };
  } @ 1071..1095 (fid = 0),

  GlobalDef {
    name: div_i8 @ 1115..1121 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: i8 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: i8;
        };
      };
      typ: type;
    } @ 1124..1126 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: integer 10;
          typ: i8;
        } @ 1129..1131 (fid = 0);
        op: Div;
        rhs: Expression {
          expr: integer 5;
          typ: i8;
        } @ 1134..1135 (fid = 0);
      };
      typ: i8;
    } @ 1129..1135 (fid = 0);
    sym: Symbol {
      kind: global;
      name: div_i8 @ 1115..1121 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::div_i8;
      typ: i8;
      typeness: explicit;
      value: I8 {
        val: 2;
      };
    };
  } @ 1115..1136 (fid = 0),

  GlobalDef {
    name: div_i16 @ 1137..1144 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: i16 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: i16;
        };
      };
      typ: type;
    } @ 1147..1150 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: integer 10;
          typ: i16;
        } @ 1153..1155 (fid = 0);
        op: Div;
        rhs: Expression {
          expr: integer 5;
          typ: i16;
        } @ 1158..1159 (fid = 0);
      };
      typ: i16;
    } @ 1153..1159 (fid = 0);
    sym: Symbol {
      kind: global;
      name: div_i16 @ 1137..1144 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::div_i16;
      typ: i16;
      typeness: explicit;
      value: I16 {
        val: 2;
      };
    };
  } @ 1137..1160 (fid = 0),

  GlobalDef {
    name: div_i32 @ 1161..1168 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: i32 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: i32;
        };
      };
      typ: type;
    } @ 1171..1174 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: integer 10;
          typ: i32;
        } @ 1177..1179 (fid = 0);
        op: Div;
        rhs: Expression {
          expr: integer 5;
          typ: i32;
        } @ 1182..1183 (fid = 0);
      };
      typ: i32;
    } @ 1177..1183 (fid = 0);
    sym: Symbol {
      kind: global;
      name: div_i32 @ 1161..1168 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::div_i32;
      typ: i32;
      typeness: explicit;
      value: I32 {
        val: 2;
      };
    };
  } @ 1161..1184 (fid = 0),

  GlobalDef {
    name: div_i64 @ 1185..1192 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: i64 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: i64;
        };
      };
      typ: type;
    } @ 1195..1198 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: integer 10;
          typ: i64;
        } @ 1201..1203 (fid = 0);
        op: Div;
        rhs: Expression {
          expr: integer 5;
          typ: i64;
        } @ 1206..1207 (fid = 0);
      };
      typ: i64;
    } @ 1201..1207 (fid = 0);
    sym: Symbol {
      kind: global;
      name: div_i64 @ 1185..1192 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::div_i64;
      typ: i64;
      typeness: explicit;
      value: I64 {
        val: 2;
      };
    };
  } @ 1185..1208 (fid = 0),

  GlobalDef {
    name: div_i128 @ 1209..1217 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: i128 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: i128;
        };
      };
      typ: type;
    } @ 1220..1224 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: integer 10;
          typ: i128;
        } @ 1227..1229 (fid = 0);
        op: Div;
        rhs: Expression {
          expr: integer 5;
          typ: i128;
        } @ 1232..1233 (fid = 0);
      };
      typ: i128;
    } @ 1227..1233 (fid = 0);
    sym: Symbol {
      kind: global;
      name: div_i128 @ 1209..1217 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::div_i128;
      typ: i128;
      typeness: explicit;
      value: I128 {
        val: 2;
      };
    };
  } @ 1209..1234 (fid = 0),

  GlobalDef {
    name: div_isz @ 1235..1242 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: isz @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: isz;
        };
      };
      typ: type;
    } @ 1245..1248 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: integer 10;
          typ: isz;
        } @ 1251..1253 (fid = 0);
        op: Div;
        rhs: Expression {
          expr: integer 5;
          typ: isz;
        } @ 1256..1257 (fid = 0);
      };
      typ: isz;
    } @ 1251..1257 (fid = 0);
    sym: Symbol {
      kind: global;
      name: div_isz @ 1235..1242 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::div_isz;
      typ: isz;
      typeness: explicit;
      value: I64 {
        val: 2;
      };
    };
  } @ 1235..1258 (fid = 0),

  GlobalDef {
    name: div_u8 @ 1260..1266 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: u8 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: u8;
        };
      };
      typ: type;
    } @ 1269..1271 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: integer 10;
          typ: u8;
        } @ 1274..1276 (fid = 0);
        op: Div;
        rhs: Expression {
          expr: integer 5;
          typ: u8;
        } @ 1279..1280 (fid = 0);
      };
      typ: u8;
    } @ 1274..1280 (fid = 0);
    sym: Symbol {
      kind: global;
      name: div_u8 @ 1260..1266 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::div_u8;
      typ: u8;
      typeness: explicit;
      value: U8 {
        val: 2;
      };
    };
  } @ 1260..1281 (fid = 0),

  GlobalDef {
    name: div_u16 @ 1282..1289 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: u16 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: u16;
        };
      };
      typ: type;
    } @ 1292..1295 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: integer 10;
          typ: u16;
        } @ 1298..1300 (fid = 0);
        op: Div;
        rhs: Expression {
          expr: integer 5;
          typ: u16;
        } @ 1303..1304 (fid = 0);
      };
      typ: u16;
    } @ 1298..1304 (fid = 0);
    sym: Symbol {
      kind: global;
      name: div_u16 @ 1282..1289 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::div_u16;
      typ: u16;
      typeness: explicit;
      value: U16 {
        val: 2;
      };
    };
  } @ 1282..1305 (fid = 0),

  GlobalDef {
    name: div_u32 @ 1306..1313 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: u32 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: u32;
        };
      };
      typ: type;
    } @ 1316..1319 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: integer 10;
          typ: u32;
        } @ 1322..1324 (fid = 0);
        op: Div;
        rhs: Expression {
          expr: integer 5;
          typ: u32;
        } @ 1327..1328 (fid = 0);
      };
      typ: u32;
    } @ 1322..1328 (fid = 0);
    sym: Symbol {
      kind: global;
      name: div_u32 @ 1306..1313 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::div_u32;
      typ: u32;
      typeness: explicit;
      value: U32 {
        val: 2;
      };
    };
  } @ 1306..1329 (fid = 0),

  GlobalDef {
    name: div_u64 @ 1330..1337 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: u64 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: u64;
        };
      };
      typ: type;
    } @ 1340..1343 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: integer 10;
          typ: u64;
        } @ 1346..1348 (fid = 0);
        op: Div;
        rhs: Expression {
          expr: integer 5;
          typ: u64;
        } @ 1351..1352 (fid = 0);
      };
      typ: u64;
    } @ 1346..1352 (fid = 0);
    sym: Symbol {
      kind: global;
      name: div_u64 @ 1330..1337 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::div_u64;
      typ: u64;
      typeness: explicit;
      value: U64 {
        val: 2;
      };
    };
  } @ 1330..1353 (fid = 0),

  GlobalDef {
    name: div_u128 @ 1354..1362 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: u128 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: u128;
        };
      };
      typ: type;
    } @ 1365..1369 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: integer 10;
          typ: u128;
        } @ 1372..1374 (fid = 0);
        op: Div;
        rhs: Expression {
          expr: integer 5;
          typ: u128;
        } @ 1377..1378 (fid = 0);
      };
      typ: u128;
    } @ 1372..1378 (fid = 0);
    sym: Symbol {
      kind: global;
      name: div_u128 @ 1354..1362 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::div_u128;
      typ: u128;
      typeness: explicit;
      value: U128 {
        val: 2;
      };
    };
  } @ 1354..1379 (fid = 0),

  GlobalDef {
    name: div_usz @ 1380..1387 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: usz @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: usz;
        };
      };
      typ: type;
    } @ 1390..1393 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: integer 10;
          typ: usz;
        } @ 1396..1398 (fid = 0);
        op: Div;
        rhs: Expression {
          expr: integer 5;
          typ: usz;
        } @ 1401..1402 (fid = 0);
      };
      typ: usz;
    } @ 1396..1402 (fid = 0);
    sym: Symbol {
      kind: global;
      name: div_usz @ 1380..1387 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::div_usz;
      typ: usz;
      typeness: explicit;
      value: U64 {
        val: 2;
      };
    };
  } @ 1380..1403 (fid = 0),

  GlobalDef {
    name: div_f32 @ 1405..1412 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: f32 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: f32;
        };
      };
      typ: type;
    } @ 1415..1418 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: float 10.0;
          typ: f32;
        } @ 1421..1424 (fid = 0);
        op: Div;
        rhs: Expression {
          expr: float 5.0;
          typ: f32;
        } @ 1427..1429 (fid = 0);
      };
      typ: f32;
    } @ 1421..1429 (fid = 0);
    sym: Symbol {
      kind: global;
      name: div_f32 @ 1405..1412 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::div_f32;
      typ: f32;
      typeness: explicit;
      value: F32 {
        val: 2;
      };
    };
  } @ 1405..1430 (fid = 0),

  GlobalDef {
    name: div_f64 @ 1431..1438 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: f64 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: f64;
        };
      };
      typ: type;
    } @ 1441..1444 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: float 10.0;
          typ: f64;
        } @ 1447..1450 (fid = 0);
        op: Div;
        rhs: Expression {
          expr: float 5.0;
          typ: f64;
        } @ 1453..1455 (fid = 0);
      };
      typ: f64;
    } @ 1447..1455 (fid = 0);
    sym: Symbol {
      kind: global;
      name: div_f64 @ 1431..1438 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::div_f64;
      typ: f64;
      typeness: explicit;
      value: F64 {
        val: 2;
      };
    };
  } @ 1431..1456 (fid = 0),

  GlobalDef {
    name: rem_i8 @ 1476..1482 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: i8 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: i8;
        };
      };
      typ: type;
    } @ 1485..1487 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: integer 15;
          typ: i8;
        } @ 1490..1492 (fid = 0);
        op: Rem;
        rhs: Expression {
          expr: integer 4;
          typ: i8;
        } @ 1495..1496 (fid = 0);
      };
      typ: i8;
    } @ 1490..1496 (fid = 0);
    sym: Symbol {
      kind: global;
      name: rem_i8 @ 1476..1482 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::rem_i8;
      typ: i8;
      typeness: explicit;
      value: I8 {
        val: 3;
      };
    };
  } @ 1476..1497 (fid = 0),

  GlobalDef {
    name: rem_i16 @ 1498..1505 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: i16 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: i16;
        };
      };
      typ: type;
    } @ 1508..1511 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: integer 15;
          typ: i16;
        } @ 1514..1516 (fid = 0);
        op: Rem;
        rhs: Expression {
          expr: integer 4;
          typ: i16;
        } @ 1519..1520 (fid = 0);
      };
      typ: i16;
    } @ 1514..1520 (fid = 0);
    sym: Symbol {
      kind: global;
      name: rem_i16 @ 1498..1505 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::rem_i16;
      typ: i16;
      typeness: explicit;
      value: I16 {
        val: 3;
      };
    };
  } @ 1498..1521 (fid = 0),

  GlobalDef {
    name: rem_i32 @ 1522..1529 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: i32 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: i32;
        };
      };
      typ: type;
    } @ 1532..1535 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: integer 15;
          typ: i32;
        } @ 1538..1540 (fid = 0);
        op: Rem;
        rhs: Expression {
          expr: integer 4;
          typ: i32;
        } @ 1543..1544 (fid = 0);
      };
      typ: i32;
    } @ 1538..1544 (fid = 0);
    sym: Symbol {
      kind: global;
      name: rem_i32 @ 1522..1529 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::rem_i32;
      typ: i32;
      typeness: explicit;
      value: I32 {
        val: 3;
      };
    };
  } @ 1522..1545 (fid = 0),

  GlobalDef {
    name: rem_i64 @ 1546..1553 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: i64 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: i64;
        };
      };
      typ: type;
    } @ 1556..1559 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: integer 15;
          typ: i64;
        } @ 1562..1564 (fid = 0);
        op: Rem;
        rhs: Expression {
          expr: integer 4;
          typ: i64;
        } @ 1567..1568 (fid = 0);
      };
      typ: i64;
    } @ 1562..1568 (fid = 0);
    sym: Symbol {
      kind: global;
      name: rem_i64 @ 1546..1553 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::rem_i64;
      typ: i64;
      typeness: explicit;
      value: I64 {
        val: 3;
      };
    };
  } @ 1546..1569 (fid = 0),

  GlobalDef {
    name: rem_i128 @ 1570..1578 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: i128 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: i128;
        };
      };
      typ: type;
    } @ 1581..1585 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: integer 15;
          typ: i128;
        } @ 1588..1590 (fid = 0);
        op: Rem;
        rhs: Expression {
          expr: integer 4;
          typ: i128;
        } @ 1593..1594 (fid = 0);
      };
      typ: i128;
    } @ 1588..1594 (fid = 0);
    sym: Symbol {
      kind: global;
      name: rem_i128 @ 1570..1578 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::rem_i128;
      typ: i128;
      typeness: explicit;
      value: I128 {
        val: 3;
      };
    };
  } @ 1570..1595 (fid = 0),

  GlobalDef {
    name: rem_isz @ 1596..1603 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: isz @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: isz;
        };
      };
      typ: type;
    } @ 1606..1609 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: integer 15;
          typ: isz;
        } @ 1612..1614 (fid = 0);
        op: Rem;
        rhs: Expression {
          expr: integer 4;
          typ: isz;
        } @ 1617..1618 (fid = 0);
      };
      typ: isz;
    } @ 1612..1618 (fid = 0);
    sym: Symbol {
      kind: global;
      name: rem_isz @ 1596..1603 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::rem_isz;
      typ: isz;
      typeness: explicit;
      value: I64 {
        val: 3;
      };
    };
  } @ 1596..1619 (fid = 0),

  GlobalDef {
    name: rem_u8 @ 1621..1627 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: u8 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: u8;
        };
      };
      typ: type;
    } @ 1630..1632 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: integer 15;
          typ: u8;
        } @ 1635..1637 (fid = 0);
        op: Rem;
        rhs: Expression {
          expr: integer 4;
          typ: u8;
        } @ 1640..1641 (fid = 0);
      };
      typ: u8;
    } @ 1635..1641 (fid = 0);
    sym: Symbol {
      kind: global;
      name: rem_u8 @ 1621..1627 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::rem_u8;
      typ: u8;
      typeness: explicit;
      value: U8 {
        val: 3;
      };
    };
  } @ 1621..1642 (fid = 0),

  GlobalDef {
    name: rem_u16 @ 1643..1650 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: u16 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: u16;
        };
      };
      typ: type;
    } @ 1653..1656 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: integer 15;
          typ: u16;
        } @ 1659..1661 (fid = 0);
        op: Rem;
        rhs: Expression {
          expr: integer 4;
          typ: u16;
        } @ 1664..1665 (fid = 0);
      };
      typ: u16;
    } @ 1659..1665 (fid = 0);
    sym: Symbol {
      kind: global;
      name: rem_u16 @ 1643..1650 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::rem_u16;
      typ: u16;
      typeness: explicit;
      value: U16 {
        val: 3;
      };
    };
  } @ 1643..1666 (fid = 0),

  GlobalDef {
    name: rem_u32 @ 1667..1674 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: u32 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: u32;
        };
      };
      typ: type;
    } @ 1677..1680 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: integer 15;
          typ: u32;
        } @ 1683..1685 (fid = 0);
        op: Rem;
        rhs: Expression {
          expr: integer 4;
          typ: u32;
        } @ 1688..1689 (fid = 0);
      };
      typ: u32;
    } @ 1683..1689 (fid = 0);
    sym: Symbol {
      kind: global;
      name: rem_u32 @ 1667..1674 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::rem_u32;
      typ: u32;
      typeness: explicit;
      value: U32 {
        val: 3;
      };
    };
  } @ 1667..1690 (fid = 0),

  GlobalDef {
    name: rem_u64 @ 1691..1698 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: u64 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: u64;
        };
      };
      typ: type;
    } @ 1701..1704 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: integer 15;
          typ: u64;
        } @ 1707..1709 (fid = 0);
        op: Rem;
        rhs: Expression {
          expr: integer 4;
          typ: u64;
        } @ 1712..1713 (fid = 0);
      };
      typ: u64;
    } @ 1707..1713 (fid = 0);
    sym: Symbol {
      kind: global;
      name: rem_u64 @ 1691..1698 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::rem_u64;
      typ: u64;
      typeness: explicit;
      value: U64 {
        val: 3;
      };
    };
  } @ 1691..1714 (fid = 0),

  GlobalDef {
    name: rem_u128 @ 1715..1723 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: u128 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: u128;
        };
      };
      typ: type;
    } @ 1726..1730 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: integer 15;
          typ: u128;
        } @ 1733..1735 (fid = 0);
        op: Rem;
        rhs: Expression {
          expr: integer 4;
          typ: u128;
        } @ 1738..1739 (fid = 0);
      };
      typ: u128;
    } @ 1733..1739 (fid = 0);
    sym: Symbol {
      kind: global;
      name: rem_u128 @ 1715..1723 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::rem_u128;
      typ: u128;
      typeness: explicit;
      value: U128 {
        val: 3;
      };
    };
  } @ 1715..1740 (fid = 0),

  GlobalDef {
    name: rem_usz @ 1741..1748 (fid = 0);
    mutability: not;
    typeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: usz @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: usz;
        };
      };
      typ: type;
    } @ 1751..1754 (fid = 0);
    value: Expression {
      expr: Binary {
        lhs: Expression {
          expr: integer 15;
          typ: usz;
        } @ 1757..1759 (fid = 0);
        op: Rem;
        rhs: Expression {
          expr: integer 4;
          typ: usz;
        } @ 1762..1763 (fid = 0);
      };
      typ: usz;
    } @ 1757..1763 (fid = 0);
    sym: Symbol {
      kind: global;
      name: rem_usz @ 1741..1748 (fid = 0);
      realname: none;
      which: 0;
      path: constant_evaluation::rem_usz;
      typ: usz;
      typeness: explicit;
      value: U64 {
        val: 3;
      };
    };
  } @ 1741..1764 (fid = 0),
]
",
        compiler_code: 0,
        test_out: "",
        test_code: 0,
    ),
    "scir/empty": (
        compiler_out: "scir = []
",
        compiler_code: 0,
        test_out: "",
        test_code: 0,
    ),
    "scir/extern_block": (
        compiler_out: r#"scir = [
  ExternBlock {
    abi: C;
    items: [
      FunDeclaration {
        name: puts @ 17..21 (fid = 0);
        typeexpr: none;
        args: [
          Expression {
            expr: PointerType {
              mutability: not;
              typeexpr: Expression {
                expr: Symbol {
                  kind: global;
                  name: str @ none;
                  realname: none;
                  which: 0;
                  path: ∅;
                  typ: type;
                  typeness: explicit;
                  value: Type {
                    type: str;
                  };
                };
                typ: type;
              } @ 30..33 (fid = 0);
            };
            typ: type;
          } @ 29..33 (fid = 0),
        ];
        rettypeexpr: none;
        defined_mut: false;
        sym: Symbol {
          kind: function;
          name: puts @ 17..21 (fid = 0);
          realname: none;
          which: 0;
          path: extern_block::puts;
          typ: *fun (*str) -> void;
          typeness: explicit;
          value: none;
        };
      } @ 17..35 (fid = 0),
    ];
  } @ 0..37 (fid = 0),

  FunDefinition {
    name: main @ 39..43 (fid = 0);
    typeexpr: none;
    args: [];
    rettypeexpr: none;
    body: Block {
      stmts: [
        Expression {
          expr: Call {
            callee: Expression {
              expr: Symbol {
                kind: function;
                name: puts @ 17..21 (fid = 0);
                realname: none;
                which: 0;
                path: extern_block::puts;
                typ: *fun (*str) -> void;
                typeness: explicit;
                value: none;
              };
              typ: *fun (*str) -> void;
            } @ 59..63 (fid = 0);
            args: [
              Expression {
                expr: string "Hello world!";
                typ: *str;
              } @ 64..78 (fid = 0),
            ];
          };
          typ: void;
        } @ 59..79 (fid = 0) @ 59..79 (fid = 0),
      ];
      last_expr: none;
      typ: void;
    } @ 53..82 (fid = 0);
    info: {
      defined_mut: false;
    };
    sym: Symbol {
      kind: function;
      name: main @ 39..43 (fid = 0);
      realname: none;
      which: 0;
      path: extern_block::main;
      typ: *fun () -> void;
      typeness: explicit;
      value: none;
    };
  } @ 39..82 (fid = 0),
]
"#,
        compiler_code: 0,
        test_out: "",
        test_code: 0,
    ),
    "scir/fun_ret_ty": (
        compiler_out: r#"scir = [
  FunDefinition {
    name: i32_return @ 0..10 (fid = 0);
    typeexpr: none;
    args: [];
    rettypeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: i32 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: i32;
        };
      };
      typ: type;
    } @ 23..26 (fid = 0);
    body: Block {
      stmts: [
        Expression {
          expr: If {
            cond: Expression {
              expr: boolean false;
              typ: bool;
            } @ 36..41 (fid = 0);
            then_br: Expression {
              expr: Block {
                label: none;
                block: Block {
                  stmts: [
                    Expression {
                      expr: Return {
                        expr: Expression {
                          expr: integer 21;
                          typ: i32;
                        } @ 59..61 (fid = 0);
                      };
                      typ: never;
                    } @ 52..61 (fid = 0) @ 52..61 (fid = 0),
                  ];
                  last_expr: none;
                  typ: never;
                } @ 42..68 (fid = 0);
                index: none;
              };
              typ: never;
            } @ 33..68 (fid = 0);
            else_br: none;
          };
          typ: void;
        } @ 33..68 (fid = 0) @ 33..68 (fid = 0),
      ];
      last_expr: Expression {
        expr: integer 120;
        typ: i32;
      } @ 74..77 (fid = 0);
      typ: i32;
    } @ 27..79 (fid = 0);
    info: {
      defined_mut: false;
    };
    sym: Symbol {
      kind: function;
      name: i32_return @ 0..10 (fid = 0);
      realname: none;
      which: 0;
      path: fun_ret_ty::i32_return;
      typ: *fun () -> i32;
      typeness: explicit;
      value: none;
    };
  } @ 0..79 (fid = 0),

  FunDefinition {
    name: f32_return @ 81..91 (fid = 0);
    typeexpr: none;
    args: [];
    rettypeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: f32 @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: f32;
        };
      };
      typ: type;
    } @ 104..107 (fid = 0);
    body: Block {
      stmts: [
        Expression {
          expr: If {
            cond: Expression {
              expr: boolean false;
              typ: bool;
            } @ 117..122 (fid = 0);
            then_br: Expression {
              expr: Block {
                label: none;
                block: Block {
                  stmts: [
                    Expression {
                      expr: Return {
                        expr: Expression {
                          expr: float 2.1;
                          typ: f32;
                        } @ 140..143 (fid = 0);
                      };
                      typ: never;
                    } @ 133..143 (fid = 0) @ 133..143 (fid = 0),
                  ];
                  last_expr: none;
                  typ: never;
                } @ 123..150 (fid = 0);
                index: none;
              };
              typ: never;
            } @ 114..150 (fid = 0);
            else_br: none;
          };
          typ: void;
        } @ 114..150 (fid = 0) @ 114..150 (fid = 0),
      ];
      last_expr: Expression {
        expr: float 1.2;
        typ: f32;
      } @ 156..160 (fid = 0);
      typ: f32;
    } @ 108..162 (fid = 0);
    info: {
      defined_mut: false;
    };
    sym: Symbol {
      kind: function;
      name: f32_return @ 81..91 (fid = 0);
      realname: none;
      which: 0;
      path: fun_ret_ty::f32_return;
      typ: *fun () -> f32;
      typeness: explicit;
      value: none;
    };
  } @ 81..162 (fid = 0),

  FunDefinition {
    name: char_return @ 164..175 (fid = 0);
    typeexpr: none;
    args: [];
    rettypeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: char @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: char;
        };
      };
      typ: type;
    } @ 188..192 (fid = 0);
    body: Block {
      stmts: [
        Expression {
          expr: If {
            cond: Expression {
              expr: boolean false;
              typ: bool;
            } @ 202..207 (fid = 0);
            then_br: Expression {
              expr: Block {
                label: none;
                block: Block {
                  stmts: [];
                  last_expr: Expression {
                    expr: Return {
                      expr: Expression {
                        expr: char 'B';
                        typ: char;
                      } @ 225..228 (fid = 0);
                    };
                    typ: never;
                  } @ 218..228 (fid = 0);
                  typ: never;
                } @ 208..234 (fid = 0);
                index: none;
              };
              typ: never;
            } @ 199..234 (fid = 0);
            else_br: none;
          };
          typ: void;
        } @ 199..234 (fid = 0) @ 199..234 (fid = 0),
      ];
      last_expr: Expression {
        expr: char 'A';
        typ: char;
      } @ 240..243 (fid = 0);
      typ: char;
    } @ 193..245 (fid = 0);
    info: {
      defined_mut: false;
    };
    sym: Symbol {
      kind: function;
      name: char_return @ 164..175 (fid = 0);
      realname: none;
      which: 0;
      path: fun_ret_ty::char_return;
      typ: *fun () -> char;
      typeness: explicit;
      value: none;
    };
  } @ 164..245 (fid = 0),

  FunDefinition {
    name: string_return @ 247..260 (fid = 0);
    typeexpr: none;
    args: [];
    rettypeexpr: Expression {
      expr: PointerType {
        mutability: not;
        typeexpr: Expression {
          expr: Symbol {
            kind: global;
            name: str @ none;
            realname: none;
            which: 0;
            path: ∅;
            typ: type;
            typeness: explicit;
            value: Type {
              type: str;
            };
          };
          typ: type;
        } @ 274..277 (fid = 0);
      };
      typ: type;
    } @ 273..277 (fid = 0);
    body: Block {
      stmts: [
        Expression {
          expr: If {
            cond: Expression {
              expr: boolean false;
              typ: bool;
            } @ 287..292 (fid = 0);
            then_br: Expression {
              expr: Block {
                label: none;
                block: Block {
                  stmts: [];
                  last_expr: Expression {
                    expr: Return {
                      expr: Expression {
                        expr: string "!World Hello";
                        typ: *str;
                      } @ 310..324 (fid = 0);
                    };
                    typ: never;
                  } @ 303..324 (fid = 0);
                  typ: never;
                } @ 293..330 (fid = 0);
                index: none;
              };
              typ: never;
            } @ 284..330 (fid = 0);
            else_br: none;
          };
          typ: void;
        } @ 284..330 (fid = 0) @ 284..330 (fid = 0),
      ];
      last_expr: Expression {
        expr: string "Hello World";
        typ: *str;
      } @ 336..349 (fid = 0);
      typ: *str;
    } @ 278..351 (fid = 0);
    info: {
      defined_mut: false;
    };
    sym: Symbol {
      kind: function;
      name: string_return @ 247..260 (fid = 0);
      realname: none;
      which: 0;
      path: fun_ret_ty::string_return;
      typ: *fun () -> *str;
      typeness: explicit;
      value: none;
    };
  } @ 247..351 (fid = 0),

  FunDefinition {
    name: void_return @ 353..364 (fid = 0);
    typeexpr: none;
    args: [];
    rettypeexpr: none;
    body: Block {
      stmts: [
        Expression {
          expr: If {
            cond: Expression {
              expr: boolean false;
              typ: bool;
            } @ 383..388 (fid = 0);
            then_br: Expression {
              expr: Block {
                label: none;
                block: Block {
                  stmts: [];
                  last_expr: Expression {
                    expr: Return {
                      expr: none;
                    };
                    typ: never;
                  } @ 399..405 (fid = 0);
                  typ: never;
                } @ 389..411 (fid = 0);
                index: none;
              };
              typ: never;
            } @ 380..411 (fid = 0);
            else_br: none;
          };
          typ: void;
        } @ 380..411 (fid = 0) @ 380..411 (fid = 0),

        Expression {
          expr: Return {
            expr: none;
          };
          typ: never;
        } @ 417..423 (fid = 0) @ 417..423 (fid = 0),
      ];
      last_expr: none;
      typ: never;
    } @ 374..426 (fid = 0);
    info: {
      defined_mut: false;
    };
    sym: Symbol {
      kind: function;
      name: void_return @ 353..364 (fid = 0);
      realname: none;
      which: 0;
      path: fun_ret_ty::void_return;
      typ: *fun () -> void;
      typeness: explicit;
      value: none;
    };
  } @ 353..426 (fid = 0),
]
"#,
        compiler_code: 0,
        test_out: "",
        test_code: 0,
    ),
    "scir/label_kw_expr": (
        compiler_out: "scir = [
  FunDefinition {
    name: nested_loops @ 0..12 (fid = 0);
    typeexpr: none;
    args: [];
    rettypeexpr: none;
    body: Block {
      stmts: [];
      last_expr: Expression {
        expr: Loop {
          label: lab @ 28..31 (fid = 0);
          body: Block {
            stmts: [];
            last_expr: Expression {
              expr: Loop {
                label: none;
                body: Block {
                  stmts: [
                    Expression {
                      expr: Break {
                        label: none;
                        expr: none;
                        index: 1;
                      };
                      typ: never;
                    } @ 67..72 (fid = 0) @ 67..72 (fid = 0),
                  ];
                  last_expr: none;
                  typ: never;
                } @ 53..156 (fid = 0);
                index: 1;
              };
              typ: void;
            } @ 48..156 (fid = 0);
            typ: void;
          } @ 38..162 (fid = 0);
          index: 0;
        };
        typ: void;
      } @ 28..162 (fid = 0);
      typ: void;
    } @ 22..164 (fid = 0);
    info: {
      defined_mut: false;
    };
    sym: Symbol {
      kind: function;
      name: nested_loops @ 0..12 (fid = 0);
      realname: none;
      which: 0;
      path: label_kw_expr::nested_loops;
      typ: *fun () -> void;
      typeness: explicit;
      value: none;
    };
  } @ 0..164 (fid = 0),

  FunDefinition {
    name: block_label @ 166..177 (fid = 0);
    typeexpr: none;
    args: [];
    rettypeexpr: none;
    body: Block {
      stmts: [
        BindingDef {
          name: a @ 193..194 (fid = 0);
          mutability: not;
          typeexpr: Expression {
            expr: Symbol {
              kind: global;
              name: i32 @ none;
              realname: none;
              which: 0;
              path: ∅;
              typ: type;
              typeness: explicit;
              value: Type {
                type: i32;
              };
            };
            typ: type;
          } @ 197..200 (fid = 0);
          value: Expression {
            expr: Block {
              label: blk @ 203..206 (fid = 0);
              block: Block {
                stmts: [
                  Expression {
                    expr: Break {
                      label: blk;
                      expr: Expression {
                        expr: integer 12;
                        typ: i32;
                      } @ 229..231 (fid = 0);
                      index: 0;
                    };
                    typ: never;
                  } @ 218..231 (fid = 0) @ 218..231 (fid = 0),
                ];
                last_expr: none;
                typ: never;
              } @ 208..249 (fid = 0);
              index: 0;
            };
            typ: i32;
          } @ 203..249 (fid = 0);
          sym: Symbol {
            kind: local;
            name: a @ 193..194 (fid = 0);
            realname: none;
            which: 0;
            path: a;
            typ: i32;
            typeness: explicit;
            value: none;
          };
        } @ 193..249 (fid = 0),
      ];
      last_expr: none;
      typ: void;
    } @ 187..252 (fid = 0);
    info: {
      defined_mut: false;
    };
    sym: Symbol {
      kind: function;
      name: block_label @ 166..177 (fid = 0);
      realname: none;
      which: 0;
      path: label_kw_expr::block_label;
      typ: *fun () -> void;
      typeness: explicit;
      value: none;
    };
  } @ 166..252 (fid = 0),

  FunDefinition {
    name: unused_label_block @ 254..272 (fid = 0);
    typeexpr: none;
    args: [];
    rettypeexpr: none;
    body: Block {
      stmts: [
        Expression {
          expr: Block {
            label: blk @ 288..291 (fid = 0);
            block: Block {
              stmts: [];
              last_expr: none;
              typ: void;
            } @ 293..295 (fid = 0);
            index: 0;
          };
          typ: void;
        } @ 288..295 (fid = 0) @ 288..295 (fid = 0),
      ];
      last_expr: none;
      typ: void;
    } @ 282..298 (fid = 0);
    info: {
      defined_mut: false;
    };
    sym: Symbol {
      kind: function;
      name: unused_label_block @ 254..272 (fid = 0);
      realname: none;
      which: 0;
      path: label_kw_expr::unused_label_block;
      typ: *fun () -> void;
      typeness: explicit;
      value: none;
    };
  } @ 254..298 (fid = 0),
]
warning[W002]: unreachable code
  ┌─ ./tests/scir/label_kw_expr.lun:5:13
  │
4 │             break;
  │             ----- any code following this statement is unreachable
5 │             break :lab;
  │             ^^^^^^^^^^ the unreachable code

warning[W002]: unreachable code
   ┌─ ./tests/scir/label_kw_expr.lun:16:9
   │
14 │         break :blk 12;
   │         ------------- any code following this statement is unreachable
15 │ 
16 │         2
   │         ^ the unreachable code

warning[W003]: unused label 'blk'
   ┌─ ./tests/scir/label_kw_expr.lun:21:5
   │
21 │     blk: {};
   │     ^^^

warning: compilation of `label_kw_expr` succeeded but 3 warnings emitted.

",
        compiler_code: 0,
        test_out: "",
        test_code: 0,
    ),
    "scir/loop_semantics": (
        compiler_out: "scir = [
  FunDefinition {
    name: loop_forever @ 0..12 (fid = 0);
    typeexpr: none;
    args: [];
    rettypeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: never @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: never;
        };
      };
      typ: type;
    } @ 25..30 (fid = 0);
    body: Block {
      stmts: [];
      last_expr: Expression {
        expr: Loop {
          label: none;
          body: Block {
            stmts: [];
            last_expr: none;
            typ: void;
          } @ 42..44 (fid = 0);
          index: 0;
        };
        typ: never;
      } @ 37..44 (fid = 0);
      typ: never;
    } @ 31..46 (fid = 0);
    info: {
      defined_mut: false;
    };
    sym: Symbol {
      kind: function;
      name: loop_forever @ 0..12 (fid = 0);
      realname: none;
      which: 0;
      path: loop_semantics::loop_forever;
      typ: *fun () -> never;
      typeness: explicit;
      value: none;
    };
  } @ 0..46 (fid = 0),

  FunDefinition {
    name: still_loop_forever @ 48..66 (fid = 0);
    typeexpr: none;
    args: [];
    rettypeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: never @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: never;
        };
      };
      typ: type;
    } @ 79..84 (fid = 0);
    body: Block {
      stmts: [];
      last_expr: Expression {
        expr: Loop {
          label: none;
          body: Block {
            stmts: [];
            last_expr: Expression {
              expr: Loop {
                label: inner @ 106..111 (fid = 0);
                body: Block {
                  stmts: [
                    Expression {
                      expr: Break {
                        label: inner;
                        expr: none;
                        index: 1;
                      };
                      typ: never;
                    } @ 132..144 (fid = 0) @ 132..144 (fid = 0),
                  ];
                  last_expr: none;
                  typ: never;
                } @ 118..155 (fid = 0);
                index: 1;
              };
              typ: void;
            } @ 106..155 (fid = 0);
            typ: void;
          } @ 96..161 (fid = 0);
          index: 0;
        };
        typ: never;
      } @ 91..161 (fid = 0);
      typ: never;
    } @ 85..163 (fid = 0);
    info: {
      defined_mut: false;
    };
    sym: Symbol {
      kind: function;
      name: still_loop_forever @ 48..66 (fid = 0);
      realname: none;
      which: 0;
      path: loop_semantics::still_loop_forever;
      typ: *fun () -> never;
      typeness: explicit;
      value: none;
    };
  } @ 48..163 (fid = 0),

  FunDefinition {
    name: loop_forever_in_practice @ 165..189 (fid = 0);
    typeexpr: none;
    args: [];
    rettypeexpr: none;
    body: Block {
      stmts: [
        BindingDef {
          name: reachable @ 399..408 (fid = 0);
          mutability: not;
          typeexpr: none;
          value: Expression {
            expr: integer 12;
            typ: i32;
          } @ 412..414 (fid = 0);
          sym: Symbol {
            kind: local;
            name: reachable @ 399..408 (fid = 0);
            realname: none;
            which: 0;
            path: reachable;
            typ: i32;
            typeness: implicit;
            value: none;
          };
        } @ 399..414 (fid = 0),

        Expression {
          expr: Loop {
            label: none;
            body: Block {
              stmts: [];
              last_expr: Expression {
                expr: If {
                  cond: Expression {
                    expr: boolean false;
                    typ: bool;
                  } @ 439..444 (fid = 0);
                  then_br: Expression {
                    expr: Block {
                      label: none;
                      block: Block {
                        stmts: [];
                        last_expr: Expression {
                          expr: Break {
                            label: none;
                            expr: none;
                            index: 0;
                          };
                          typ: never;
                        } @ 459..464 (fid = 0);
                        typ: never;
                      } @ 445..474 (fid = 0);
                      index: none;
                    };
                    typ: never;
                  } @ 436..474 (fid = 0);
                  else_br: none;
                };
                typ: void;
              } @ 436..474 (fid = 0);
              typ: void;
            } @ 426..480 (fid = 0);
            index: 0;
          };
          typ: void;
        } @ 421..480 (fid = 0) @ 421..480 (fid = 0),

        Expression {
          expr: Symbol {
            kind: local;
            name: reachable @ 399..408 (fid = 0);
            realname: none;
            which: 0;
            path: reachable;
            typ: i32;
            typeness: implicit;
            value: none;
          };
          typ: i32;
        } @ 486..495 (fid = 0) @ 486..495 (fid = 0),
      ];
      last_expr: none;
      typ: void;
    } @ 199..498 (fid = 0);
    info: {
      defined_mut: false;
    };
    sym: Symbol {
      kind: function;
      name: loop_forever_in_practice @ 165..189 (fid = 0);
      realname: none;
      which: 0;
      path: loop_semantics::loop_forever_in_practice;
      typ: *fun () -> void;
      typeness: explicit;
      value: none;
    };
  } @ 165..498 (fid = 0),
]
",
        compiler_code: 0,
        test_out: "",
        test_code: 0,
    ),
    "scir/never_block": (
        compiler_out: "scir = [
  GlobalDef {
    name: cant_reach @ 0..10 (fid = 0);
    mutability: not;
    typeexpr: none;
    value: Expression {
      expr: integer 1;
      typ: i32;
    } @ 14..15 (fid = 0);
    sym: Symbol {
      kind: global;
      name: cant_reach @ 0..10 (fid = 0);
      realname: none;
      which: 0;
      path: never_block::cant_reach;
      typ: i32;
      typeness: implicit;
      value: I32 {
        val: 1;
      };
    };
  } @ 0..16 (fid = 0),

  FunDefinition {
    name: main @ 18..22 (fid = 0);
    typeexpr: none;
    args: [];
    rettypeexpr: Expression {
      expr: Symbol {
        kind: global;
        name: usz @ none;
        realname: none;
        which: 0;
        path: ∅;
        typ: type;
        typeness: explicit;
        value: Type {
          type: usz;
        };
      };
      typ: type;
    } @ 35..38 (fid = 0);
    body: Block {
      stmts: [
        BindingDef {
          name: a @ 45..46 (fid = 0);
          mutability: not;
          typeexpr: Expression {
            expr: Symbol {
              kind: global;
              name: usz @ none;
              realname: none;
              which: 0;
              path: ∅;
              typ: type;
              typeness: explicit;
              value: Type {
                type: usz;
              };
            };
            typ: type;
          } @ 49..52 (fid = 0);
          value: Expression {
            expr: Block {
              label: blk @ 55..58 (fid = 0);
              block: Block {
                stmts: [
                  Expression {
                    expr: Symbol {
                      kind: global;
                      name: cant_reach @ 0..10 (fid = 0);
                      realname: none;
                      which: 0;
                      path: never_block::cant_reach;
                      typ: i32;
                      typeness: implicit;
                      value: I32 {
                        val: 1;
                      };
                    };
                    typ: i32;
                  } @ 128..138 (fid = 0) @ 128..138 (fid = 0),

                  Expression {
                    expr: Break {
                      label: blk;
                      expr: Expression {
                        expr: integer 12;
                        typ: usz;
                      } @ 160..162 (fid = 0);
                      index: 0;
                    };
                    typ: never;
                  } @ 149..162 (fid = 0) @ 149..162 (fid = 0),
                ];
                last_expr: none;
                typ: never;
              } @ 60..189 (fid = 0);
              index: 0;
            };
            typ: usz;
          } @ 55..189 (fid = 0);
          sym: Symbol {
            kind: local;
            name: a @ 45..46 (fid = 0);
            realname: none;
            which: 0;
            path: a;
            typ: usz;
            typeness: explicit;
            value: none;
          };
        } @ 45..189 (fid = 0),

        Expression {
          expr: Return {
            expr: Expression {
              expr: integer 12;
              typ: usz;
            } @ 244..246 (fid = 0);
          };
          typ: never;
        } @ 237..246 (fid = 0) @ 237..246 (fid = 0),
      ];
      last_expr: none;
      typ: never;
    } @ 39..265 (fid = 0);
    info: {
      defined_mut: false;
    };
    sym: Symbol {
      kind: function;
      name: main @ 18..22 (fid = 0);
      realname: none;
      which: 0;
      path: never_block::main;
      typ: *fun () -> usz;
      typeness: explicit;
      value: none;
    };
  } @ 18..265 (fid = 0),
]
warning[W002]: unreachable code
   ┌─ ./tests/scir/never_block.lun:10:9
   │
 8 │         break :blk 12;
   │         ------------- any code following this statement is unreachable
 9 │ 
10 │         cant_reach
   │         ^^^^^^^^^^ the unreachable code

warning[W002]: unreachable code
   ┌─ ./tests/scir/never_block.lun:15:5
   │
14 │     return 12;
   │     --------- any code following this statement is unreachable
15 │     cant_reach;
   │     ^^^^^^^^^^ the unreachable code

warning: compilation of `never_block` succeeded but 2 warnings emitted.

",
        compiler_code: 0,
        test_out: "",
        test_code: 0,
    ),
}
